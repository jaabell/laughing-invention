#line 2 "feiparser.lex.c"

#line 4 "feiparser.lex.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 526
#define YY_END_OF_BUFFER 527
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3439] =
    {   0,
        0,    0,    0,    0,    0,    0,  527,  525,  522,  523,
      522,    8,  525,  480,    4,   29,   10,   15,    3,    1,
        9,    2,  525,    5,  519,  519,  519,  519,  519,   16,
       24,    7,   23,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,   13,   14,    6,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  512,  517,  517,  517,  517,  517,  517,  517,  517,
      517,   11,   30,   12,   62,   63,  526,    0,    0,    0,
      524,    0,  521,   21,   19,   17,   18,  519,  520,   20,

      518,  519,    0,  519,  519,    0,    0,    0,   28,   25,
       26,   27,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  343,  344,
      345,  517,  517,  517,  517,  517,  517,    0,  517,  517,
      517,  517,  517,  346,  347,  348,  517,  517,  517,  517,
      479,  517,  517,  270,  517,  517,  517,  517,  517,  517,
      509,  510,  511,  517,  517,   22,  384,  385,  267,  268,
      269,  517,  517,  517,  517,  517,  517,  517,  517,  471,
      352,  353,  354,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,   56,  517,  517,  241,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,   52,  517,   58,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  375,  376,  377,  517,  517,
      517,  517,  517,  481,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  506,  507,  508,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  483,  517,  517,  517,  517,  517,  503,  504,
      505,  517,  517,  517,  517,  517,  517,  517,  517,  517,
       62,    0,  521,  520,  518,    0,    0,  519,    0,    0,

        0,    0,    0,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  378,  379,  380,  517,  517,  155,  154,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,   83,  517,  472,  517,  517,  473,  517,  517,
      517,  517,  517,  517,  517,  517,  515,  271,  272,  517,
      517,  517,  517,  517,   64,  517,  517,  517,  517,  517,
      517,  517,  517,  489,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,

       75,  517,  517,  517,  517,  517,   85,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  151,  152,  153,  517,  517,  517,  517,   57,
      517,  517,  517,   80,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,   98,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,   97,  517,  517,   65,  517,  517,  517,
      517,  517,  517,  517,  517,   66,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  485,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,    0,    0,  518,    0,
        0,    0,    0,    0,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  333,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  340,  517,   70,  517,
      517,  517,  517,   71,   72,  517,  517,  496,  517,  517,
      517,   77,  517,  517,  517,  517,  517,   67,  517,  517,

      517,  517,  517,  517,  517,  517,  517,    0,  474,  517,
      517,  517,  517,  312,  517,  517,  517,  517,   54,  517,
      517,  517,  517,  517,  514,  517,  517,   78,  517,  517,
      491,  517,  517,   86,  517,  517,  492,  517,  336,  517,
       91,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  106,  517,  337,
      517,  109,  517,  517,  517,  517,  301,   94,  517,  517,
      517,  339,  477,  517,  102,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  513,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,   68,  517,  517,
       74,  517,  517,  517,  517,  517,  517,  517,  517,  517,
       69,  517,  517,  467,   53,  517,  517,  517,  517,  517,
      517,  517,  484,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,   92,  486,  517,  517,
      517,    0,    0,    0,    0,    0,    0,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  311,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      495,  517,  517,   73,  517,  517,  517,  517,  517,  517,
       93,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  500,  517,  517,  517,    0,  517,  517,
      517,  517,  462,  517,  517,  517,  517,  517,  517,  517,
      493,    0,  517,  517,  517,  187,   79,  517,  517,  517,
      517,  497,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  499,  334,  517,  517,  494,  517,    0,
      517,   76,  517,  517,  517,  517,  517,  517,  517,   82,

      517,  517,  487,  517,  517,  517,  517,  517,  517,  364,
      517,  314,  517,  517,  517,   90,  517,  517,  517,  517,
      517,  517,  517,  150,  149,  517,  517,  517,  517,  517,
      517,  306,  517,  517,  517,  393,  517,  100,  517,  517,
      482,  517,  517,  517,  517,  517,  517,  517,  517,    0,
      517,  517,  517,  517,  517,  143,  517,  517,  517,  517,
      463,  316,  517,  517,  517,  517,  517,  517,   55,  517,
      335,  517,  517,    0,    0,    0,    0,    0,    0,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  435,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  466,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,   84,  517,  517,  517,    0,
      488,  517,  517,  517,  517,  517,  517,  468,  517,  517,
        0,  517,    0,  517,  517,  475,  517,  517,  115,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
       37,  517,  517,  517,  517,  517,   32,  517,   34,  517,
      517,  517,  517,  517,  498,  357,    0,    0,  517,  517,

      517,  392,  517,  517,  517,  517,  517,  433,  517,  478,
      419,  517,  517,  517,  363,  517,  313,  517,  517,  517,
      517,  517,  517,   87,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  305,  517,  315,  416,  517,  458,
      517,  227,  228,  517,  517,  517,  517,  517,  517,    0,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
       81,  517,  517,  517,  517,  517,  517,  517,    0,    0,
        0,    0,    0,    0,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  455,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  454,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  198,  517,   89,  517,  517,
      517,  144,  517,  229,  517,  517,  517,  517,  112,  517,
      469,  517,    0,    0,  303,  517,  459,  517,  517,  103,
      517,  517,    0,  517,    0,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,   39,  517,  517,   35,   36,  517,
      517,  517,  517,  517,  517,  517,    0,    0,   99,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  517,   95,  517,
      101,   96,  517,  517,  117,  517,  517,  517,  517,  517,
        0,  517,  517,  517,  360,  517,  517,  517,  299,  517,
        0,  517,  517,  517,  517,  517,  517,  453,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
        0,    0,    0,    0,    0,    0,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  209,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  329,  517,  317,  517,  320,  517,
      326,  319,  517,  517,  517,  517,  208,  517,  381,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  338,  517,  517,  517,  300,  517,  517,
      517,   60,  517,  517,  517,  517,  517,  517,    0,    0,
      517,    0,  517,  517,  517,  517,  104,  362,  517,    0,
      391,    0,  230,  517,  517,  517,  517,  517,  517,  517,
      517,  231,    0,    0,   61,  517,  517,  517,  517,  517,
      517,   40,   33,  517,   41,   38,  517,  517,  517,  517,
      517,    0,    0,  517,  517,  105,  371,  517,  517,  517,
      517,  517,  517,  452,  517,  517,  517,  517,  148,  156,
      517,  114,  517,  490,  517,  517,  517,  517,  517,  517,

       88,  517,    0,  517,  517,  517,  517,  517,  517,  517,
      517,  517,    0,  517,  517,  517,  517,  517,  302,  517,
      517,    0,  517,  517,  517,  517,  517,  517,  517,  517,
      517,    0,    0,    0,    0,    0,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  349,  350,  351,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  331,  332,  330,  324,  328,
      325,  517,  323,  517,  327,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  413,  365,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  166,  517,    0,    0,  517,    0,
      516,  177,  517,  517,  517,  390,    0,  517,  517,  517,
      517,  366,  517,  517,  408,    0,  476,  517,  517,  517,
      517,  517,  517,  517,  517,   44,  517,  517,  517,  517,
      517,  517,    0,    0,  373,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,    0,  167,  517,  517,  517,  517,  517,  517,  517,
      179,    0,  517,  464,  444,  517,  460,  304,  517,    0,
        0,  517,  517,  517,  517,  517,  517,  517,  517,  517,

        0,    0,    0,    0,  121,  517,  517,  517,  382,  383,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  318,  517,  517,  517,  517,  517,  450,  517,
      517,  517,  517,  517,  191,  517,  517,  517,  517,  517,
      517,  161,  160,  517,  517,  517,  517,  517,  113,  517,
      517,  517,  517,  517,  517,    0,    0,  517,    0,  517,
      517,  517,    0,  517,  517,  517,  410,  367,  368,  369,
      370,  517,  517,    0,  517,  517,  517,  517,  517,  517,
      517,  517,  517,   42,  517,  517,  517,  517,  517,    0,

      119,  372,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  451,
      517,  517,  517,  517,  517,  517,  517,  361,    0,  517,
      517,  517,  517,  517,  517,  517,  517,    0,  517,  517,
      159,  517,  517,  517,    0,    0,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  124,  126,    0,    0,
        0,    0,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,   51,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  322,  321,  517,  517,  517,  517,  517,  517,  147,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  470,
      517,  517,  517,  517,  517,  517,  517,  517,    0,    0,
      517,    0,  517,  517,  517,    0,  517,  517,  517,  517,
      517,    0,  517,  517,  517,  517,  517,  517,  415,  517,
       43,  517,  517,  517,  517,  517,    0,  517,  173,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  355,  517,  517,  517,  517,
      517,  517,  517,  517,  359,  411,  517,    0,  517,  517,
      517,  517,  517,  517,  517,  517,    0,  517,  309,  310,
      517,  517,  517,    0,    0,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  517,    0,    0,    0,    0,    0,
        0,    0,    0,  122,    0,    0,  517,  517,   47,  517,
      517,  517,  517,  517,  517,  178,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  206,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  136,  517,  517,  517,
      298,  517,    0,  517,  517,  517,  120,    0,    0,  517,
        0,  517,  403,  342,    0,  517,  517,  517,  517,  517,
        0,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  118,  162,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  200,
      197,  395,  517,  517,    0,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  108,  517,  517,  517,  517,
        0,    0,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  125,    0,    0,  127,    0,    0,    0,    0,
        0,    0,    0,  132,  517,  517,  517,  517,  517,  517,
      517,  517,  420,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,    0,  517,  517,

      517,  517,  517,  517,  517,  517,  517,    0,  517,  157,
      517,  517,    0,    0,  517,    0,  517,    0,  517,  517,
      517,  517,  517,    0,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  214,  517,  517,
      517,  517,  517,  158,    0,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,    0,
        0,  517,  409,  517,  446,  517,  517,  517,  517,  517,
      517,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      131,  427,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  424,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  439,  517,  517,  517,  517,  517,    0,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,    0,  517,
      517,  517,  517,  517,    0,    0,  517,    0,  517,   59,
      517,  517,  185,  172,  358,  110,  517,  517,  517,  517,
      517,  517,  517,   31,  517,  164,  165,  517,  517,  517,
      517,  296,  517,  517,  517,  517,  170,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  283,  517,  517,
      517,  287,  517,  517,  517,  517,  517,  517,  517,  517,
      260,  517,  247,  517,  517,  517,  517,  251,  517,  517,
      517,  517,  517,  517,  181,  517,    0,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,    0,    0,  517,  517,  517,  517,  517,  517,  517,
      265,    0,  133,    0,    0,    0,    0,    0,    0,    0,
      517,  517,  517,  192,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  502,  517,  517,  517,  431,  517,
      517,   50,  517,   45,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,    0,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,    0,  517,  517,  517,  517,
      517,    0,    0,  517,  220,    0,  210,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  432,  517,  517,  517,  517,
      517,  517,  465,  399,  517,  517,  517,  224,  225,  517,
      517,  517,  291,  280,  282,  517,  289,  294,  517,  288,
      517,  290,  292,  517,  285,  517,  255,  245,  244,  517,
      517,  253,  262,  517,  252,  517,  517,  254,  256,  263,
      517,  517,  517,  248,  517,  517,    0,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,    0,    0,  517,  517,  517,  517,  517,  163,  517,
        0,    0,  141,  142,  139,    0,    0,    0,  517,  517,
      517,  517,  517,  517,  517,  440,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  434,  517,
      517,  517,  517,  517,  517,  517,  517,    0,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  414,  517,
      517,  517,  517,  517,  394,    0,  517,    0,  517,  517,
      517,  183,  184,  517,  517,  517,  517,  374,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  168,

      517,  517,  517,  517,  517,  517,  517,  356,  517,  517,
      517,  279,  517,  517,  517,  517,  242,  517,  517,  243,
      517,  517,  257,  517,  517,  517,  517,    0,  386,  517,
      517,  517,  517,  517,  517,  517,  277,  517,  412,  517,
      202,  203,  204,    0,    0,  517,  517,  517,  218,  517,
      517,    0,    0,    0,    0,    0,  517,  388,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  387,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,    0,  407,  517,  517,  137,  517,  517,
      517,  517,  517,  517,  517,  275,  517,  406,  517,    0,

      517,    0,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  448,
      517,  447,  517,  517,  517,  517,  517,  517,  517,  216,
      215,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      264,  517,  517,  517,  217,  418,  517,  517,  517,  517,
      517,  517,  517,  517,  517,    0,    0,  517,  517,  517,
      517,  517,    0,    0,    0,    0,  128,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,   46,  517,  517,  517,  517,  517,  517,  517,  517,
      186,  517,  107,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,    0,  517,  417,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  234,  501,  517,  517,
      517,  517,  445,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  281,  293,  517,  517,
      517,  258,  517,  261,  517,  517,  517,  517,  517,  171,
      517,  517,  517,    0,  461,  517,  517,  517,  517,  517,
      129,  130,  140,    0,  517,  517,  517,  517,  517,  517,
      517,  517,  428,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  404,  199,  517,  517,  517,  517,  517,    0,  219,

      517,  517,  517,  405,  182,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  286,  517,  517,  250,  249,  517,
      517,  517,  517,  517,  517,  517,  517,  205,    0,  517,
      397,  517,  517,  517,  123,  517,  517,  517,  517,  189,
      517,  517,  517,  456,  517,  175,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  273,  174,  517,  457,  517,    0,  341,  517,  517,
      236,  517,  517,  517,  517,  517,  517,  517,  517,  239,
      517,  517,  517,  517,  449,  517,  517,  517,  237,  517,

      517,  259,  517,  517,  517,  517,  517,  169,  517,  111,
      517,  213,  517,  517,  135,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
        0,  517,  517,  517,  240,  235,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  226,  284,  246,
      517,  517,  517,  295,  517,  517,  517,  517,  517,  517,
      517,  517,  176,  517,  517,  517,  517,  517,  517,  517,
      190,  517,  517,  517,  517,  517,  517,  517,  222,  221,
      517,  517,  517,  517,    0,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  402,  517,  517,  517,  517,  517,
      517,  266,  517,  517,  517,  517,  517,  517,  517,  194,
      421,  517,  517,  517,  422,  517,  517,  517,  517,  517,
      442,  517,  517,  398,  134,  517,  238,  396,  116,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      307,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  145,  389,  517,  517,   49,   48,  517,  517,  517,
      517,  517,  138,  517,  212,  223,  232,  233,  517,  517,
      517,  400,  401,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  443,  517,  517,

      429,  517,  517,  517,  517,  517,  517,  517,  517,  437,
      517,  517,  430,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  211,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  438,  517,
      517,  517,  188,  517,  517,  517,  517,  276,  278,  146,
      517,  517,  517,  517,  425,  517,  517,  426,  517,  517,
      308,  180,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  207,  517,  274,  517,  517,  517,  517,  517,  517,
      201,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      195,  517,  517,  423,  517,  517,  436,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  441,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  297,  517,  517,
      517,  517,  517,  193,  517,  517,  196,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,    1,   29,   30,
       31,   32,    1,    1,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,    1,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[93] =
    {   0,
        1,    2,    3,    1,    2,    1,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        1,    1,    6,    6,    6,    6,    5,    6,    6,    6,
        6,    6,    6,    6,    6,    5,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1,
        1,    1,    6,    6,    6,    6,    6,    5,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1,    1

    } ;

static yyconst flex_int16_t yy_base[3447] =
    {   0,
        0,    0,   91,   97,    0,    0, 3641, 3642,  101, 3642,
     3642, 3642,   88, 3634, 3608, 3642, 3642, 3642, 3607, 3606,
     3642, 3605,   88,   87,  100,  119,  112,  113, 3589, 3642,
      100, 3603, 3602,    0,   33,   98, 3551,   77,  111, 3567,
     3558,  102, 3566,  126,  123,  141,   83,  138, 3557, 3549,
      127, 3548, 3553, 3642, 3642, 3593,  204,   97,  167,  165,
      177,  191, 3559,  103,  206, 3544,  231,  164,  233,  245,
      119,  260, 3537,  259,  285,  302,  230,  272,   63,   95,
     3548, 3642, 3642, 3642,    0, 3642, 3642,  242, 3542,  190,
     3642, 3615,    0, 3642, 3642, 3642, 3642,  372,    0, 3642,

      391,  410,  429, 3571, 3570, 3537, 3536, 3535, 3642, 3642,
     3642, 3642,    0, 3546, 3547, 3560, 3525, 3527, 3523, 3542,
     3537, 3529, 3552, 3533, 3536, 3519, 3527, 3523,    0,    0,
        0, 3513, 3521, 3532,  171,  121,  136,  201, 3512, 3521,
     3516, 3524, 3515,    0,    0,    0, 3544, 3543, 3501, 3504,
      153, 3503, 3506,    0, 3495, 3507, 3504, 3512, 3498, 3540,
        0,    0,    0, 3500, 3493, 3642,    0,    0,    0,    0,
        0, 3503,  173, 3507,  198, 3494, 3505, 3495, 3498, 3505,
        0,    0,    0,  201, 3491, 3483, 3498,  200, 3489, 3492,
     3495,  257,  232, 3486,  257,  208,  276,  278, 3484,    0,

     3494,  284,  303,  235, 3484, 3474, 3489,  303,  293,  250,
     3478, 3474,  309, 3478, 3481, 3483, 3476,    0, 3471,  306,
      427, 3477,  314, 3469, 3484, 3469, 3469,  191, 3467,  356,
     3471,  400,  324, 3465, 3474,    0,    0,    0, 3468, 3463,
     3452,  340, 3461,    0, 3453,  341, 3454, 3470, 3469,  283,
      390, 3460,  416, 3453, 3453,    0,    0,    0, 3452, 3464,
      418, 3459,  328, 3462, 3450, 3443,  405, 3442, 3445,  413,
      374, 3445,  413,  425, 3441, 3450,  312,  434,    0,    0,
        0,  429,  437, 3436, 3440,  435, 3433, 3452, 3451, 3445,
        0, 3446,    0,    0,  500,  519,  529,  539, 3433, 3432,

     3442, 3441, 3440, 3432, 3429, 3454, 3433, 3421, 3435, 3418,
     3418, 3430, 3452, 3421, 3427, 3408, 3427, 3417, 3409, 3425,
     3441,    0,    0,    0, 3405, 3419,    0,    0, 3403, 3408,
     3419, 3411, 3399, 3417, 3446,  391, 3401, 3403, 3401, 3412,
     3406, 3399, 3409, 3402, 3407, 3388, 3421, 3423, 3396, 3389,
     3397, 3382,    0, 3385,    0, 3391, 3386,    0, 3378, 3382,
     3381, 3381, 3389, 3391, 3390, 3376,    0,    0,    0, 3386,
     3376, 3384, 3370,  432, 3377, 3364, 3364, 3363, 3365, 3371,
     3359, 3373,  344,  434, 3376, 3367, 3372, 3373, 3365, 3367,
     3352, 3351, 3356, 3363, 3365, 3366, 3362, 3363, 3345, 3342,

     3349, 3355, 3340, 3338, 3352, 3351,    0, 3340, 3351,  501,
     3350, 3339, 3338, 3336, 3388, 3332,  366,  455, 3327, 3341,
      503, 3330, 3339, 3329, 3327, 3336, 3339, 3321,  499, 3323,
     3317, 3322,    0,    0,    0, 3319, 3325, 3328, 3330,    0,
     3326, 3325, 3325, 3371, 3313, 3312,  449, 3320,  510, 3310,
     3315, 3313,  504, 3307, 3315, 3299, 3313, 3304, 3314, 3299,
     3313, 3305, 3303, 3292, 3291,  452, 3294, 3289, 3293, 3300,
     3285, 3301, 3298, 3287, 3280,  495, 3300, 3310, 3289, 3285,
     3276, 3289, 3285,    0, 3292,  496,  515, 3270, 3269, 3270,
      509, 3273, 3282,  519, 3281,  518, 3267, 3265, 3264, 3269,

     3279, 3276, 3275, 3260, 3264, 3276, 3257, 3270, 3258, 3255,
      527,    0, 3258, 3250, 3261, 3249, 3253, 3265, 3263, 3265,
     3252, 3244, 3254, 3252, 3244, 3247, 3246,  578,  588, 3253,
     3252, 3250, 3249, 3248, 3229, 3279, 3276, 3241, 3243, 3236,
     3226, 3238, 3226, 3228, 3221, 3223, 3239, 3219, 3238, 3218,
     3231, 3265, 3225, 3226, 3232,    0, 3213, 3224, 3220, 3208,
     3253, 3225, 3210, 3265, 3214, 3222, 3207, 3211, 3214, 3198,
     3212, 3198, 3206, 3213, 3204, 3212,    0, 3199,    0, 3192,
     3208, 3199, 3187,    0, 3248, 3205, 3195, 3203, 3184, 3197,
     3188,    0, 3188,  427, 3178,  553, 3192,    0, 3187, 3176,

     3186, 3184, 3178, 3190, 3187, 3187, 3176, 3167,    0, 3177,
     3171, 3173, 3170,    0, 3168, 3161, 3160, 3174,    0, 3166,
     3157, 3155, 3163, 3149, 3231, 3163, 3153,    0, 3155, 3151,
        0, 3150, 3162,    0, 3145, 3145, 3164, 3162,    0, 3162,
        0, 3152, 3141, 3138, 3153, 3148, 3149, 3146, 3149, 3149,
     3138, 3146, 3132, 3135, 3129, 3142, 3133, 3127, 3132, 3125,
     3122, 3140, 3126, 3126, 3134, 3125, 3135,  588, 3179,    0,
     3125, 3133, 3127, 3113, 3110, 3116,    0,    0, 3115, 3115,
     3120,    0,    0, 3110, 3105, 3122, 3117, 3100, 3108, 3119,
     3103, 3112, 3096, 3095, 3095, 3094, 3093, 3091, 3101,    0,

     3089, 3090, 3085, 3097, 3090, 3103,  549, 3098, 3083, 3096,
     3091, 3099, 3093, 3079, 3084, 3083, 3082,    0, 3088, 3087,
        0, 3086, 3070, 3080, 3069, 3081, 3077, 3066, 3083, 3075,
        0, 3065, 3059,    0,    0, 3056,  589,   79,  104,  158,
      213,  294,    0,  361,  402,  389,  413,  525,  551,  556,
      543,  556,  545,  546,  550,  559,    0,  565,  552,  555,
      565,  549,  567,  568,  586,  587,  605,  576,  563,  596,
      575,  567,  577,  574,  559,  585,  582,  578,  600,  572,
      582,  621,    0,  575,  607,  594,  578,  626,  598,  591,
      582,  597,  616,  586,  591,  602,  593,  635,  594,  598,

      602,  603,  613,  643,  600,  613,  598,  604,  614,  611,
        0,  601,  604,    0,  658,  610,  613,  602,  627,  628,
        0,  625,  611,  631,  630,  620,  620,  618,  634,  638,
      630,  627,  637,    0,  623,  632,  644,  631,  633,  643,
      645,  642,    0,  647,  644,  640,  650,  647,  644,  716,
        0,  640,  657,  652,  646,  665,    0,  666,  662,  659,
      651,    0,  664,  668,  667,  669,  661,  674,  658,  664,
      677,  654,  661,  663,  679,  676,  665,  667,  682,  671,
      668,  675,  691,    0,    0,  691,  692,    0,  676,  679,
      682,    0,  677,  694,  681,  691,  693,  682,  683,    0,

      696,  692,    0,  695,  690,  689,  698,  692,  709,    0,
      705,  696,  701,  708,  697,    0,  707,  712,  717,  718,
      706,  711,  708,    0,    0,  708,  727,  729,  715,  708,
      713,  733,  729,  734,  731,    0,  719,    0,  738,  736,
        0,  726,  727,  723,  740,  730,  733,  732,  733,  741,
      731,  750,  737,  744,  745,    0,  752,  747,  748,  740,
        0,    0,  757,  742,  752,  743,  758,  755,    0,  751,
        0,  765,  767,  764,  798,  799,  763,  764,  755,  756,
      763,  787,  752,  758,  761,  777,  781,  798,  778,  780,
      780,  782,  772,  787,  789,  820,  779,  791,  778,  780,

      790,  776,  779,  798,  788,  819,  801,  797,  794,  790,
      824,  801,  800,  786,  829,  805,  797,  801,  808,  799,
      797,  796,  796,  803,  815,  811,  809,  815,  814,    0,
      806,  800,  807,  822,  814,  809,  829,  811,  811,  821,
      827,  834,  817,  823,  831,    0,  830,  835,  838,  900,
      901,  840,  827,  843,  838,  845,  829,    0,  837,  851,
      848,  838,  853,  846,  841,    0,  854,  852,    0,  845,
      845,  856,  853,  854,  860,  860,  862,  856,  868,  865,
        0,  896,  863,  866,  869,  855,    0,  857,  918,  857,
      867,  865,  925,  864,    0,  885,  885,  886,  881,  868,

      885,    0,  890,  879,  880,  881,  890,    0,  896,  897,
        0,  893,  894,  891,    0,  898,    0,  888,  883,  886,
      900,  891,  893,    0,  903,  890,  890,  891,  898,  907,
      900,  910,  916,  904,    0,  898,    0,    0,  899,  978,
      916,  922,  923,  919,  905,  921,  913,  921,  924,  921,
      926,  918,  919,  929,  934,  925,  923,  937,  926,  928,
        0,  921,  937,  931,  925,  930,  933,  942,  944,  932,
      933,  947,  948,  945,  951,  935,  957,  999,  960,  977,
      985,  986,  951,  954,  967,  965,  969,  956,  968,  995,
      992,  974,  955,  963,  972,  974,  974,  971,  997,    0,

      973, 1012,  983,  968,  986, 1000, 1002,  983,  988,  973,
      994, 1024,    0,  978,  998,  999,  993,  998,  989,  989,
      986, 1005, 1007,  994,  984, 1010,  992,    0,  992,  992,
     1005, 1017, 1013,    0, 1014, 1008, 1016, 1015,    0, 1008,
        0, 1019, 1024, 1011,    0, 1014, 1089, 1018, 1074, 1034,
     1030, 1033, 1022, 1032, 1033, 1020, 1023, 1024, 1028, 1035,
     1042, 1032, 1046, 1036, 1029, 1108, 1112, 1038, 1055, 1037,
     1044, 1044, 1040, 1036,    0, 1054, 1042,    0,    0, 1059,
     1060, 1057, 1067, 1068, 1060, 1065, 1051, 1060,    0, 1069,
     1061, 1064, 1072, 1078, 1079, 1076, 1077, 1067, 1071, 1066,

     1072, 1086, 1087, 1063, 1084, 1071, 1077, 1089,    0, 1088,
        0,    0, 1090, 1094, 1097, 1089, 1093, 1085, 1096, 1093,
     1094, 1085, 1104, 1088,    0, 1098, 1108, 1109,    0, 1091,
     1092, 1096, 1110, 1113, 1117, 1104, 1107,    0, 1115, 1109,
     1180, 1118, 1099, 1125, 1125, 1122, 1128, 1124, 1109, 1111,
     1193, 1124, 1125, 1124, 1126, 1136, 1140, 1128, 1153, 1125,
     1124, 1157, 1128, 1128, 1166, 1135, 1145,    0, 1127, 1134,
     1181, 1155, 1146, 1137, 1178, 1172, 1152, 1149, 1163, 1164,
     1149, 1165, 1192, 1154,    0, 1160, 1214, 1165,    0, 1157,
        0,    0, 1173, 1157, 1160, 1176,    0, 1194,    0, 1182,

     1163, 1171, 1170, 1205, 1184, 1168, 1176, 1185, 1184, 1186,
     1177, 1175, 1217,    0, 1196, 1196, 1189,    0, 1179, 1186,
     1185,    0, 1188, 1203, 1201, 1205, 1192, 1194, 1193, 1204,
     1192, 1202, 1246, 1209, 1201, 1209,    0,    0, 1199, 1212,
        0, 1214,    0, 1220, 1206, 1219, 1211, 1199, 1225, 1223,
     1222,    0, 1215, 1290, 3642, 1210, 1234, 1222, 1214, 1220,
     1214,    0,    0, 1222,    0,    0, 1238, 1227, 1228, 1241,
     1233, 1226, 1227, 1244, 1231,    0,    0, 1245, 1249, 1255,
     1256, 1238, 1254,    0, 1252, 1257, 1257, 1248,    0, 1267,
     1252,    0, 1265,    0, 1313, 1269, 1259, 1267, 1266, 1272,

        0, 1264, 1264, 1260, 1260, 1280, 1268, 1278, 1283, 1266,
     1267, 1268, 1268, 1280, 1274, 1286, 1313, 1273,    0, 1290,
     1295, 1295, 1355, 1298, 1287, 1281, 1282, 1299, 1303, 1290,
     1287, 1303, 1304, 1296, 1297, 1299, 1337, 1298, 1335, 1310,
     1307, 1296, 1316, 1303, 1314, 1317, 1321,    0,    0,    0,
     1313, 1302, 1312, 1302, 1319, 1353, 1308, 1314, 1321, 1346,
     1358, 1333, 1322, 1335, 1331,    0,    0,    0,    0,    0,
        0, 1319,    0, 1330,    0, 1330, 1362, 1330, 1331, 1371,
     1371, 1326, 1366, 1334, 1360, 1335, 1342,    0,    0, 1352,
     1353, 1344, 1337, 1333, 1346, 1358, 1347, 1354, 1344, 1353,

     1363, 1348, 1348, 1351,    0, 1366, 1358, 1369, 1373, 1361,
     3642,    0, 1361, 1368, 1378, 3642, 1437, 1366, 1362, 1381,
     1378, 1427, 1370, 1369,    0, 1375,    0, 1370, 1377, 1388,
     1386, 1390, 1381, 1388, 1395,    0, 1394, 1400, 1395, 1396,
     1403, 1403, 1401, 1402, 1389, 1400, 1409, 1391, 1391, 1393,
     1405, 1394, 1407, 1403, 1405, 1410, 1420, 1416, 1422, 1411,
     1423, 1407, 1422, 1427, 1472, 1409, 1409, 1423, 1420, 1412,
     1429, 1415, 1436, 1437, 1420, 1436, 1428, 1429, 1422, 1428,
        0, 1429, 1440,    0, 1446, 1423,    0,    0, 1445, 1446,
     1431, 1438, 1447, 1449, 1435, 1456, 1442, 1436, 1456, 1455,

     1450, 1451, 1463, 1465, 1486, 1447, 1496, 1488,    0,    0,
     1462, 1465, 1453, 1461, 1457, 1488, 1462, 1466, 1494, 1479,
     1473, 1501, 1474, 1470, 1465, 1475, 1467, 1484, 1515, 1510,
     1518, 1505,    0, 1485, 1539, 1477, 1496, 1497,    0, 1488,
     1488, 1503, 1516, 1488,    0, 1494, 1494, 1504, 1506, 1511,
     1504,    0,    0, 1499, 1512, 1502, 1512, 1496,    0, 1518,
     1515, 1501, 1513, 1503, 1510, 1506, 1505, 1520, 1508, 1525,
     1518, 1522, 1519, 1518, 1515, 1515,    0,    0,    0,    0,
        0, 1535, 1528, 1518, 1527, 1526, 1540, 1537, 1531, 1535,
     1531, 1531, 1542,    0, 1540, 1543, 1544, 1543, 1533, 1535,

     3642,    0, 1534, 1539, 1551, 1544, 1540, 1546, 1548, 1548,
     1557, 1547, 1558, 1563, 1547, 1550, 1555, 1551, 1568,    0,
     1552, 1619, 1562, 1565, 1559, 1575, 1569,    0, 1579, 1565,
     1583, 1583, 1570, 1588, 1590, 1573, 1586, 1575, 1575, 1638,
        0, 1582, 1586, 1579, 1597, 1583, 1587, 1594, 1601, 1583,
     1597, 1589, 1594, 1604, 1590, 1597, 1631, 1632, 1644, 1645,
     1627, 1612, 1606, 1610, 1646, 1615, 1617, 1605, 1622, 1620,
     1606, 1615, 1625, 1629, 1617, 1631,    0, 1631, 1651, 1619,
     1639, 1629, 1619, 1628, 1655, 1664, 1662, 1662, 1664, 1664,
     1645,    0,    0, 1636, 1649, 1639, 1649, 1637, 1656,    0,

     1637, 1636, 1645, 1642, 1649, 1659, 1660, 1660, 1660,    0,
     1666, 1662, 1654, 1727, 1652, 1656, 1654, 1653, 1654, 1672,
     1671, 1672, 1657, 1674, 1666, 1666, 1678, 1683, 1675, 1665,
     1671, 1678, 1677, 1683, 1676, 1690, 1677, 1689, 1694, 1681,
        0, 1695, 1678, 1679, 1698, 1680, 1687, 1677,    0, 1685,
     1702, 1704, 1701, 1696, 1703, 1686, 1701, 1705, 1697, 1695,
     1690, 1701, 1701, 1697, 1710,    0, 1715, 1699, 1714, 1718,
     1710, 1766, 1709, 1726,    0,    0, 1708, 1724, 1717, 1718,
     1729, 1730, 1717, 1734, 1734, 1720, 1716, 1742,    0,    0,
     1729, 1743, 1740, 1741, 1746, 1744, 1737, 1749, 1746, 1749,

     1753, 1733, 1753, 1748, 1751, 1770, 1755, 1772, 1757, 1780,
     1781, 1787, 1761, 1784, 1756, 1753, 1765, 1752,    0, 1766,
     1755, 1759, 1757, 1764, 1773,    0, 1761, 1766, 1777, 1763,
     1777, 1763, 1780, 1766, 1782, 1768, 1771,    0, 1816, 1821,
     1792, 1820, 1794, 1794, 1776, 1792, 1795, 1781, 1787, 1841,
     1801, 1798, 1862, 1800, 1805, 1802, 1808, 1804, 1798, 1792,
        0, 1807, 1793, 1809, 1801, 1811, 1817, 1800, 1799, 1802,
     1814, 1810,    0,    0, 1819, 1819, 1806, 1811, 1818, 1814,
     1814, 1830, 1822, 1832, 1815, 1831, 1835, 1820, 1836, 1820,
     1834, 1835, 1823, 1833, 3642,    0, 1842, 1839, 1836, 1846,

     1847, 1848, 1829, 1836, 1837, 1831, 1840, 1834, 1835, 1851,
     1853, 1853, 1857, 1847, 1843, 1863, 1849, 1860, 1857, 1867,
     1868,    0, 1864, 1851, 1853, 1872, 1860, 1853, 1861, 1863,
     1868, 1877, 1859, 1866, 1876, 3642, 1876, 1880, 1865, 1880,
     1874, 1873, 1883, 1884, 1878, 1879, 1892, 1889, 1889, 1875,
     1881, 1877, 3642, 1886, 1883, 3642, 1888, 1928, 1929, 1914,
     1881, 1890, 1905, 1917, 1890, 1893, 1896, 1941, 1896, 1912,
     1909, 1899, 1916, 1916, 1918, 1919, 1906, 1909, 1919, 1920,
     1908, 1912, 1905, 1947, 1957, 1959, 1959, 1962, 1917, 1918,
     1924, 1933, 1932, 1940, 1980, 1928, 1925, 1938, 1939, 1942,

     1928, 1935, 1937, 1931, 1946, 1932, 1953, 1949, 1936,    0,
     1942, 1954, 1958, 1952, 1962, 1945, 1943, 1960, 1947, 1962,
     1954, 1954, 1951, 1957, 1959, 1960, 1959, 1976, 1968, 1960,
     1964, 1968, 1977, 1962, 1963, 1980, 1982, 1966, 1969, 1974,
     1970, 1977, 1972, 1977, 1986, 1989, 1981, 1996, 1992, 1993,
     1981, 1995, 1985, 1993, 1998, 1995, 1994, 2006, 1989, 2004,
     2039, 2096, 1992, 2011, 2011, 1992, 1998, 1997, 2008, 2014,
     1998, 2009, 2014, 2018, 2012, 2018, 2010, 2009, 2018, 2026,
     2013, 2033,    0, 2029,    0, 2022, 2027, 2019, 2023, 2025,
     2032, 2040, 2053, 2044, 2072, 2074, 2077, 2068, 2070, 2037,

     3642,    0, 2082, 2053, 2041, 2071, 2046, 2047, 2055, 2053,
     2054,    0, 2097, 2058, 2097, 2084, 2069, 2070, 2077, 2078,
     2079, 2066, 2081, 2109, 2096, 2101, 2098, 2103, 2085, 2075,
     2086,    0, 2067, 2121, 2093, 2075, 2089, 2089, 2091, 2099,
     2098, 2085, 2101, 2092, 2115, 2099, 2100, 2097, 2102, 2104,
     2117, 2110, 2117, 2124, 2119, 2114, 2129, 2130, 2113, 3642,
     2133, 2131, 2135,    0,    0, 3642, 2121, 2128, 2120, 2126,
     2121, 2141, 2134,    0, 2139,    0,    0, 2140, 2146, 2138,
     2148,    0, 2129, 2135, 2131, 2138,    0, 2134, 2150, 2150,
     2138, 2150, 2157, 2140, 2141, 2147, 2143, 2158, 2160, 2156,

     2158, 2162, 2168, 2213, 2214, 2168, 2171, 2165, 2171, 2219,
     2175,    0, 2175, 2178, 2171, 2181, 2226, 2227, 2228, 2184,
        0, 2174, 2179, 2185, 2233, 2190, 2191,    0, 2191, 2238,
     2188, 2189, 2189, 2199,    0, 2192, 2181, 2183, 2185, 2196,
     2192, 2193, 2203, 2193, 2204, 2191, 2203, 2201, 2209, 2206,
     2260, 2199, 2209, 2217, 2220, 2206, 2201, 2216, 2206, 2225,
        0, 2207, 3642, 2208, 2240, 2241, 2270, 2253, 2211, 2213,
     2225, 2216, 2223,    0, 2223, 2225, 2237, 2236, 2222, 2225,
     2224, 2224, 2245, 2228,    0, 2260, 2274, 2276,    0, 2233,
     2269,    0, 2270,    0, 2271, 2247, 2240, 2243, 2258, 2250,

     2246, 2287, 2262, 2258, 2259, 2253, 2265, 2249, 2259, 2255,
     2257, 2265, 2271, 2268, 2269, 2255, 2276, 2257, 2264, 2267,
     2279, 2267, 2268, 2269,    0, 2264, 2285, 2280, 2267, 2294,
     2286, 2277, 2287, 2278, 2269, 2275, 2282, 2283, 2284, 2296,
     2285, 2286, 2297, 2299, 2299,    0, 2287, 2306, 2296, 2300,
     2292, 2291,    0,    0, 2309, 2313, 2295,    0,    0, 2315,
     2302, 2299,    0,    0,    0, 2298,    0,    0, 2319,    0,
     2307,    0,    0, 2318,    0, 2309,    0,    0,    0, 2303,
     2308,    0,    0, 2325,    0, 2323, 2314,    0,    0,    0,
     2319, 2314, 2325,    0, 2318, 2332, 2318, 2329, 2330, 2327,

     2331, 2319, 2340, 2332, 2336, 2335, 2330, 2340, 2326, 2344,
     2391, 2349, 2346, 2334, 2332, 2350, 2336, 2351,    0, 2339,
     2338, 2339, 3642, 3642, 3642, 2371, 2341, 2353, 2361, 2345,
     2346, 2396, 2385, 2409, 2369,    0, 2361, 2346, 2360, 2348,
     2355, 2355, 2367, 2359, 2374, 2390, 2392, 2393,    0, 2373,
     2363, 2406, 2366, 2384, 2369, 2412, 2375, 2378, 2386, 2380,
     2384, 2391, 2375, 2380, 2388, 2378, 2385, 2397, 3642, 2383,
     2394, 2383, 2399, 2393, 3642, 2464, 2400, 2393, 2452, 2401,
     2402,    0,    0, 2391, 2406, 2395, 2411,    0, 2407, 2397,
     2409, 2410, 2402, 2402, 2408, 2417, 2408, 2404, 2410,    0,

     2409, 2423, 2414, 2429, 2422, 2414, 2415,    0, 2426, 2432,
     2435,    0, 2419, 2436, 2418, 2439,    0, 2433, 2424,    0,
     2441, 2430,    0, 2445, 2426, 2446, 2427, 2432,    0, 2432,
     2438, 2453, 2454, 2435, 2442, 2443,    0, 2451,    0, 2454,
        0,    0,    0, 2441, 2448, 2454, 2450, 2444,    0, 2452,
     2462, 2459, 2460, 2498, 2455, 2469, 2468,    0, 2455, 2457,
     2468, 2505, 2494, 2461, 2509, 2477, 2471,    0, 2475, 2483,
     2468, 2487, 2500, 2500, 2501, 2488, 2492, 2479, 2478, 2494,
     2478, 2518, 2495, 2495,    0, 2495, 2498,    0, 2502, 2498,
     2492, 2500, 2499, 2487, 2507,    0, 2491,    0, 2505, 2498,

     2500, 2495, 2513, 2500, 2511, 2505, 2503, 2507, 2520, 2502,
     2501, 2508, 2505, 2511, 2512, 2512, 2513, 2510, 2530,    0,
     2519,    0, 2507, 2520, 2516, 2515, 2521, 2532, 2533,    0,
        0, 2534, 2520, 2536, 2538, 2523, 2520, 2544, 2541, 2543,
        0, 2545, 2548, 2526,    0, 3642, 2532, 2545, 2535, 2535,
     2540, 2549, 2552, 2558, 2603, 2551, 2541, 2559, 2554, 2552,
     2562, 2554, 2564, 2565, 2609, 2549, 3642, 2553, 2554, 2554,
     2555, 2594, 2564, 2571, 2563, 2561, 2565, 2575, 2577, 2568,
     2610,    0, 2598, 2599, 2628, 2610, 2586, 2578, 2579, 2577,
        0, 2588, 3642, 2594, 2584, 2594, 2593, 2593, 2595, 2580,

     2586, 2582, 2588, 2604, 2600, 2601, 3642, 2587, 2590, 2591,
     2605, 2597, 2591, 2594, 2593, 2603,    0,    0, 2609, 2610,
     2599, 2599,    0, 2611, 2600, 2622, 2618, 2624, 2616, 2612,
     2614, 2627, 2629, 2621, 2625, 2631,    0,    0, 2633, 2628,
     2634,    0, 2636,    0, 2628, 2638, 2638, 2631, 2629,    0,
     2623, 2624, 2686, 2630, 3642, 2635, 2627, 2627, 2644, 2649,
     3642, 3642, 3642, 2631, 2693, 2638, 2639, 2650, 2667, 2656,
     2649, 2645,    0, 2642, 2655, 2644, 2645, 2643, 2695, 2696,
     2694, 2654, 2651, 2669, 2670, 2654, 2673, 2653, 2675, 2675,
     2677,    0,    0, 2670, 2661, 2671, 2669, 2661, 2663,    0,

     2671, 2676, 2666,    0,    0, 2668, 2668, 2671, 2669, 2691,
     2692, 2674, 2676, 2675, 2677, 2683, 2684, 2685, 2685, 2682,
     2697, 2700, 2688, 2690,    0, 2706, 2704,    0,    0, 2705,
     2687, 2691, 2691, 2686, 2708, 2695, 2695,    0, 2702, 2717,
        0, 2699, 2719, 2700, 3642, 2717, 2708, 2720, 2705,    0,
     2705, 2721, 2707,    0, 2714,    0, 2729, 2718, 2753, 2754,
     2752, 2731, 2730, 2733, 2723, 2738, 2736, 2726, 2738, 2723,
     2730,    0,    0, 2729,    0, 2731, 2739,    0, 2722, 2740,
        0, 2732, 2746, 2733, 2735, 2736, 2754, 2741, 2752,    0,
     2743, 2739, 2745, 2747,    0, 2748, 2755, 2808,    0, 2762,

     2763,    0, 2762, 2748, 2760, 2765, 2753,    0, 2763, 3642,
     2809,    0, 2771, 2766,    0, 2769, 2768, 2797, 2774, 2768,
     2780, 2777, 2811, 2779, 2802, 2803, 2798, 2770, 2776, 2785,
     2788, 2820, 2785, 2785, 2777, 2795, 2792, 2797, 2799, 2791,
     2786, 2787, 2800, 2799,    0,    0, 2804, 2805, 2793, 2792,
     2791, 2806, 2792, 2808, 2813, 2794, 2806,    0,    0,    0,
     2816, 2799, 2803,    0, 2818, 2814, 2821, 2814, 2801, 2849,
     2824, 2837,    0, 2823, 2825, 2810, 2815, 2813, 2843, 2844,
        0, 2829, 2830, 2823, 2832, 2823, 2834, 2820,    0,    0,
     2837, 2823, 2861, 2824, 2841, 2832, 2846, 2829, 2829, 2830,

     2842, 2843, 2852, 2849,    0, 2850, 2840, 2838, 2844, 2840,
     2855,    0, 2847, 2856, 2843, 2859, 2860, 2848, 2847,    0,
        0, 2848, 2850, 2856, 2871, 2884, 2885, 2861, 2861, 2871,
        0, 2863, 2875,    0,    0, 2860,    0,    0, 3642, 2860,
     2869, 2863, 2878, 2879, 2866, 2883, 2867, 2869, 2870, 2875,
        0, 2884, 2872, 2879, 2891, 2881, 2881, 2894, 2898, 2894,
     2895,    0,    0, 2881, 2930,    0,    0, 2898, 2884, 2891,
     2886, 2896,    0, 2907,    0,    0,    0,    0, 2894, 2910,
     2902,    0,    0, 2903, 2913, 2896, 2908, 2911, 2912, 2918,
     2908, 2900, 2917, 2952, 2905, 2906, 2911,    0, 2906, 2909,

        0, 2916, 2909, 2971, 2916, 2918, 2921, 2930, 2916,    0,
     2918, 2980,    0, 2924, 2935, 2923, 2933, 2928, 2935, 2925,
     2946, 2932,    0, 2930, 2945, 2936, 2931, 2951, 2939, 2946,
     2936, 2993, 2945, 2940, 2946, 2946, 2949, 2943,    0, 2985,
     2952, 2950, 2966, 2948, 2949, 2945, 2963,    0,    0,    0,
     2966, 2963, 2954, 2969,    0, 2969, 2962,    0, 2961, 2997,
        0,    0, 2970, 2960, 2963, 2979, 2963, 2983, 2976, 2983,
     2978, 2999, 2976, 2982, 2990, 2981, 2975, 2976, 2990, 2978,
     2994,    0, 2977,    0, 2985, 3019, 2986, 3025, 2991, 2999,
        0, 2992, 3003, 3018, 2994, 3008, 3006, 2998, 3012, 3008,

        0, 3007, 2997,    0, 3011, 2998,    0, 3043, 3015, 3006,
     3001, 3004, 3018, 3004, 3007, 3021, 3013,    0, 3027, 3025,
     3021, 3022, 3027, 3019, 3020, 3017, 3029,    0, 3028, 3057,
     3036, 3051, 3030,    0, 3061, 3054,    0, 3642, 3106, 3112,
     3118, 3121, 3122, 3128, 3134, 3140
    } ;

static yyconst flex_int16_t yy_def[3447] =
    {   0,
     3438,    1, 3439, 3439, 3440, 3440, 3438, 3438, 3438, 3438,
     3438, 3438, 3441, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3442, 3442,   28, 3438,
     3438, 3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3438, 3438, 3438, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3438, 3438, 3444, 3438, 3438, 3438, 3438, 3441,
     3438, 3441, 3445, 3438, 3438, 3438, 3438, 3438, 3446, 3438,

     3438, 3438, 3438,   28,   28, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3441, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3444, 3438, 3445, 3446, 3438, 3438, 3438, 3438, 3438, 3438,

     3438, 3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3438, 3438, 3438, 3438, 3438, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3438, 3438, 3438, 3438, 3438, 3438, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3438, 3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3438, 3438, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3438,
     3438, 3438, 3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3438, 3443, 3438, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3438, 3438, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3438, 3438, 3438, 3438, 3438, 3438, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3438,
     3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438,
     3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3438, 3438, 3438, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3438, 3438, 3438, 3438, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3438, 3438, 3443, 3438,
     3438, 3443, 3443, 3443, 3443, 3438, 3438, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438,
     3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3438, 3438, 3438, 3438, 3438, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3438, 3438, 3443, 3438, 3443,
     3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438,

     3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443,
     3443, 3443, 3443, 3443, 3438, 3438, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3438, 3438, 3438, 3438,
     3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3438,
     3443, 3438, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443,
     3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443,
     3443, 3443, 3443, 3438, 3438, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3438, 3443, 3443, 3443, 3443, 3438, 3438, 3443,
     3438, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443,
     3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443,
     3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443,
     3443, 3443, 3438, 3438, 3443, 3438, 3443, 3438, 3443, 3443,
     3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438,
     3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,

     3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443,
     3443, 3443, 3443, 3443, 3438, 3438, 3443, 3438, 3443, 3438,
     3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443,
     3443, 3438, 3438, 3443, 3443, 3438, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443,
     3443, 3443, 3443, 3443, 3438, 3438, 3443, 3438, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3438, 3438, 3443, 3443, 3443, 3443, 3443,
     3443, 3438, 3438, 3438, 3438, 3438, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438,

     3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3438, 3438, 3443, 3443, 3443,
     3443, 3443, 3438, 3438, 3438, 3438, 3438, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3438, 3443, 3438, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3438, 3438, 3443, 3443, 3443, 3443, 3443,
     3438, 3438, 3438, 3438, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443,
     3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3438, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3438, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3438, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,

     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443, 3443,
     3443, 3443, 3443, 3443, 3443, 3443, 3443,    0, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438
    } ;

static yyconst flex_int16_t yy_nxt[3735] =
    {   0,
        8,    9,   10,   11,    9,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   25,
       26,   27,   28,   25,   25,   25,   29,   25,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   34,   43,   44,   45,   46,   34,   47,   34,   48,
       49,   50,   51,   52,   53,   34,   34,   34,   54,    8,
       55,   56,   34,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   34,   82,
       83,   84,   86,   86,   91,   86,  114,   86,   86,   86,

      115,   86,   88,   86,   99,   88,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  101,  100,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  101,  101,
      109,  110,  138,  286,  287,  101,  103,  104,  102,  102,
      102,  102,  102,  102,  105,  102,  102,   92,  103,  103,
      116,  120,  134,  121,  152,  103,  154,  106,  107,  952,
      122,  117,  123,  153,  184,  215,  288,  103,  185,  216,
      217,  160,   89,  124,  186,  953,  147,  135,  136,  103,
      103,  118,  125,  289,  187,  140,  103,  244,  126,  139,
      141,  127,  325,  148,  128,  200,   91,  129,  130,  131,

      142,  155,  245,  326,  327,  156,  143,   91,  149,  144,
      145,  146,  150,  161,  162,  163,  188,  328,  151,  368,
      369,  157,  167,  168,  169,  170,  171,  227,  194,  338,
      189,  228,  195,  339,  190,  229,  196,  191,  351,  954,
      201,  230,  197,   88,  192,  198,   88,  193,  202,   92,
      352,  203,  199,  204,  209,  205,  206,  322,  323,  324,
       92,  207,  210,  208,  362,  211,  172,  354,  212,  173,
      174,  213,  355,  440,  218,  441,  356,  363,  175,  176,
      177,  219,  220,  364,  178,  179,  180,  221,  382,  383,
      181,  182,  183,  223,  224,  231,  232,  225,  395,  955,

      233,  396,  226,  376,  234,  276,  277,  239,  240,  377,
      235,  278,  241,   89,  405,  378,  279,  280,  281,  236,
      237,  238,  242,  246,  406,  380,  253,  247,  243,  254,
      248,  381,  373,  374,  249,  282,  407,  250,  375,  283,
      251,  386,  255,  284,  384,  256,  257,  258,  259,  285,
      260,  385,  261,  390,  466,  262,  263,  403,  404,  264,
      391,  387,  265,  467,  266,  269,  392,  267,  268,  270,
      393,  418,  271,  272,  400,  956,  410,  419,  510,  273,
      411,  401,  274,  511,  394,  402,  412,  450,  420,  275,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

      433,  434,  435,  486,  487,  451,  457,  606,  103,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  443,
      458,  461,  607,  462,  957,  444,  101,  296,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  608,  103,
      642,  500,  297,  643,  297,  501,  103,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  468,  296,  421,
      422,  469,  423,  424,  425,  958,  562,  470,  491,  446,
      426,  427,  492,  563,  428,  959,  493,  103,  429,  472,
      430,  447,  448,  481,  473,  494,  449,  503,  505,  497,
      960,  474,  482,  504,  498,  475,  506,  476,  483,  499,

      484,  512,  516,  514,  431,  513,  521,  822,  507,  515,
      823,  517,  522,  595,  596,  609,  597,  518,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  694,  644,
      672,  673,  528,  695,  528,  645,  296,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  296,  634,  648,
      657,  680,  675,  705,  715,  681,  658,  706,  722,  716,
      635,  676,  727,  649,  717,  718,  728,  730,  731,  723,
      746,  724,  890,  950,  961,  747,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  825,  924,  962,  963,
      964,  965,  966,  967,  826,  968,  969,  970,  971,  972,
      925,  973,  974,  827,  975,  976,  977,  978,  979,  980,
      981,  982,  983,  984,  985,  986,  987,  988,  989,  990,
      991,  951,  992,  993,  994,  995,  996,  997,  998,  891,
      999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
     1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
     1020, 1021, 1022, 1023, 1024, 1025, 1028, 1010, 1029, 1030,
     1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042,

     1043, 1044, 1036, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
     1052, 1037, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
     1061, 1063, 1064, 1065, 1026, 1027, 1066, 1067, 1068, 1070,
     1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
     1081, 1082, 1083, 1084, 1085, 1086, 1087, 1069, 1088, 1089,
     1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100,
     1101, 1102, 1103, 1098, 1104, 1105, 1106, 1107, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1062, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,

     1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149,
     1147, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
     1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
     1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
     1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
     1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
     1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
     1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
     1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,

     1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
     1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
     1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1259, 1268,
     1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
     1280, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
     1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
     1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
     1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
     1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
     1329, 1330, 1331, 1332, 1334, 1335, 1336, 1337, 1338, 1339,

     1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1333, 1348,
     1349, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
     1360, 1361, 1362, 1350, 1363, 1364, 1366, 1367, 1368, 1369,
     1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
     1380, 1381, 1382, 1383, 1384, 1385, 1394, 1365, 1386, 1395,
     1396, 1397, 1398, 1399, 1387, 1400, 1401, 1402, 1403, 1404,
     1405, 1388, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
     1414, 1415, 1416, 1417, 1418, 1419, 1420, 1389, 1390, 1421,
     1422, 1423, 1424, 1425, 1426, 1427, 1428, 1391, 1392, 1429,
     1393, 1430, 1431, 1432, 1433, 1434, 1436, 1438, 1439, 1440,

     1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
     1451, 1452, 1453, 1454, 1456, 1437, 1454, 1457, 1455, 1458,
     1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
     1469, 1470, 1471, 1472, 1473, 1474, 1435, 1475, 1476, 1477,
     1478, 1479, 1480, 1481, 1483, 1484, 1485, 1486, 1487, 1488,
     1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1482, 1497,
     1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1508, 1509,
     1510, 1511, 1512, 1513, 1506, 1507, 1514, 1515, 1516, 1517,
     1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
     1528, 1529, 1530, 1531, 1454, 1532, 1533, 1454, 1534, 1455,

     1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
     1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
     1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564,
     1565, 1566, 1569, 1573, 1570, 1574, 1575, 1577, 1578, 1579,
     1567, 1580, 1568, 1576, 1581, 1582, 1583, 1584, 1585, 1586,
     1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
     1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
     1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1571, 1615,
     1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625,
     1626, 1454, 1627, 1633, 1454, 1634, 1455, 1572, 1628, 1629,

     1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1630,
     1644, 1645, 1646, 1652, 1647, 1631, 1648, 1654, 1632, 1655,
     1656, 1649, 1657, 1658, 1659, 1660, 1650, 1651, 1661, 1662,
     1663, 1653, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
     1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681,
     1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
     1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702,
     1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712,
     1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
     1723, 1724, 1725, 1726, 1727, 1729, 1730, 1731, 1732, 1733,

     1734, 1735, 1736, 1728, 1737, 1738, 1739, 1740, 1742, 1743,
     1744, 1745, 1746, 1747, 1748, 1749, 1741, 1692, 1750, 1751,
     1752, 1753, 1754, 1755, 1756, 1758, 1759, 1760, 1761, 1762,
     1763, 1757, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
     1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
     1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1791, 1792,
     1793, 1794, 1795, 1796, 1797, 1798, 1799, 1790, 1800, 1801,
     1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
     1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
     1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,

     1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
     1842, 1845, 1843, 1846, 1847, 1848, 1850, 1851, 1852, 1853,
     1854, 1855, 1856, 1857, 1858, 1859, 1844, 1860, 1849, 1861,
     1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
     1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1862, 1881,
     1882, 1883, 1884, 1885, 1886, 1891, 1892, 1893, 1894, 1895,
     1896, 1887, 1888, 1889, 1897, 1898, 1899, 1900, 1890, 1901,
     1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
     1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
     1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,

     1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
     1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
     1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1966, 1960,
     1961, 1967, 1968, 1969, 1962, 1970, 1971, 1972, 1963, 1973,
     1974, 1975, 1976, 1977, 1964, 1965, 1978, 1979, 1980, 1981,
     1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
     1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
     2002, 2003, 2004, 2005, 2006, 2008, 2010, 2011, 2014, 2015,
     2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2012,
     2013, 2026, 2027, 2007, 2009, 2016, 2028, 2029, 2030, 2031,

     2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
     2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,
     2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061,
     2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071,
     2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
     2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
     2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101,
     2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2111, 2112,
     2113, 2114, 2115, 2110, 2116, 2117, 2118, 2119, 2120, 2122,
     2123, 2124, 2121, 2125, 2126, 2127, 2129, 2130, 2128, 2131,

     2132, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142,
     2143, 2144, 2145, 2146, 2147, 2133, 2148, 2149, 2150, 2151,
     2152, 2153, 2154, 2156, 2157, 2158, 2159, 2160, 2161, 2162,
     2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2155, 2171,
     2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
     2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
     2192, 2193, 2194, 2195, 2196, 2197, 2198, 2200, 2201, 2202,
     2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212,
     2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222,
     2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232,

     2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242,
     2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252,
     2253, 2254, 2255, 2256, 2199, 2257, 2258, 2259, 2260, 2261,
     2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271,
     2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281,
     2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291,
     2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301,
     2302, 2303, 2304, 2305, 2309, 2310, 2311, 2312, 2313, 2314,
     2315, 2316, 2317, 2318, 2306, 2319, 2307, 2320, 2321, 2322,
     2323, 2324, 2325, 2326, 2308, 2327, 2328, 2329, 2330, 2331,

     2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2341, 2342,
     2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352,
     2340, 2355, 2353, 2356, 2357, 2358, 2359, 2360, 2361, 2362,
     2363, 2364, 2365, 2366, 2367, 2354, 2368, 2369, 2370, 2371,
     2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381,
     2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391,
     2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2401, 2402,
     2403, 2404, 2435, 2436, 2437, 2438, 2439, 2405, 2440, 2441,
     2400, 2442, 2443, 2406, 2444, 2445, 2407, 2446, 2447, 2448,
     2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458,

     2459, 2460, 2461, 2462, 2408, 2463, 2409, 2464, 2465, 2410,
     2466, 2467, 2468, 2411, 2412, 2413, 2469, 2414, 2470, 2471,
     2472, 2473, 2474, 2475, 2476, 2415, 2477, 2416, 2417, 2478,
     2479, 2480, 2481, 2482, 2418, 2483, 2484, 2485, 2419, 2486,
     2487, 2488, 2489, 2420, 2490, 2491, 2492, 2493, 2494, 2495,
     2496, 2421, 2497, 2498, 2499, 2502, 2500, 2503, 2504, 2422,
     2505, 2423, 2506, 2424, 2507, 2508, 2425, 2509, 2510, 2426,
     2427, 2428, 2429, 2501, 2430, 2511, 2431, 2512, 2432, 2513,
     2514, 2515, 2433, 2516, 2434, 2517, 2518, 2519, 2520, 2521,
     2522, 2523, 2524, 2526, 2527, 2528, 2529, 2530, 2531, 2532,

     2533, 2534, 2525, 2535, 2536, 2537, 2538, 2539, 2540, 2541,
     2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551,
     2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561,
     2562, 2563, 2564, 2565, 2566, 2567, 2569, 2570, 2571, 2572,
     2574, 2573, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582,
     2584, 2585, 2586, 2568, 2587, 2588, 2590, 2589, 2592, 2593,
     2594, 2595, 2596, 2597, 2598, 2599, 2600, 2583, 2601, 2602,
     2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612,
     2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622,
     2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632,

     2591, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641,
     2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651,
     2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661,
     2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671,
     2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681,
     2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691,
     2692, 2693, 2695, 2696, 2697, 2698, 2699, 2694, 2700, 2701,
     2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711,
     2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721,
     2722, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2723,

     2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741,
     2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751,
     2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761,
     2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771,
     2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781,
     2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791,
     2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801,
     2802, 2803, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813,
     2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823,
     2824, 2825, 2826, 2827, 2828, 2829, 2830, 2832, 2833, 2834,

     2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844,
     2831, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853,
     2854, 2855, 2804, 2856, 2857, 2858, 2859, 2860, 2861, 2862,
     2863, 2864, 2865, 2866, 2867, 2868, 2805, 2869, 2870, 2871,
     2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881,
     2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891,
     2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901,
     2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911,
     2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921,
     2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931,

     2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941,
     2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951,
     2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961,
     2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971,
     2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981,
     2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991,
     2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001,
     3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011,
     3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021,
     3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031,

     3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041,
     3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051,
     3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061,
     3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071,
     3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081,
     3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091,
     3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101,
     3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111,
     3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121,
     3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131,

     3132, 3133, 3134, 3135, 3137, 3138, 3139, 3140, 3136, 3141,
     3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151,
     3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161,
     3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171,
     3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181,
     3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191,
     3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201,
     3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211,
     3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221,
     3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231,

     3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241,
     3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251,
     3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261,
     3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271,
     3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281,
     3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291,
     3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301,
     3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311,
     3312, 3313, 3314, 3315, 3316, 3318, 3319, 3320, 3321, 3322,
     3323, 3324, 3325, 3326, 3327, 3317, 3328, 3329, 3330, 3331,

     3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341,
     3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351,
     3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361,
     3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371,
     3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381,
     3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391,
     3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401,
     3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411,
     3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421,
     3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431,

     3432, 3433, 3434, 3435, 3436, 3437,   85,   85,   85,   85,
       85,   85,   87,   87,   87,   87,   87,   87,   90,   90,
       90,   90,   90,   90,  102,  102,  113,  113,  291,  949,
      948,  291,  291,  291,  293,  293,  947,  293,  293,  293,
      294,  294,  946,  294,  294,  294,  945,  944,  943,  942,
      941,  940,  939,  938,  937,  936,  935,  934,  933,  932,
      931,  930,  929,  928,  927,  926,  923,  922,  921,  920,
      919,  918,  917,  916,  915,  914,  913,  912,  911,  910,
      909,  908,  907,  906,  905,  904,  903,  902,  901,  900,
      899,  898,  897,  896,  895,  894,  893,  892,  889,  888,

      887,  886,  885,  884,  883,  882,  881,  880,  879,  878,
      877,  876,  875,  874,  873,  872,  871,  870,  869,  868,
      867,  866,  865,  864,  863,  862,  861,  860,  859,  858,
      857,  856,  855,  854,  853,  852,  851,  850,  849,  848,
      847,  846,  845,  844,  843,  842,  841,  840,  839,  838,
      837,  836,  835,  834,  833,  832,  831,  830,  829,  828,
      824,  821,  820,  819,  818,  817,  816,  815,  814,  813,
      812,  811,  810,  809,  808,  807,  806,  805,  804,  803,
      802,  801,  800,  799,  798,  797,  796,  795,  794,  793,
      792,  791,  790,  789,  788,  787,  786,  785,  784,  783,

      782,  781,  780,  779,  778,  777,  776,  775,  774,  773,
      772,  771,  770,  769,  768,  767,  766,  765,  764,  763,
      762,  761,  760,  759,  758,  757,  756,  755,  754,  753,
      752,  751,  750,  749,  748,  745,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  735,  734,  733,  732,  729,
      726,  725,  721,  720,  719,  714,  713,  712,  711,  710,
      709,  708,  707,  704,  703,  702,  701,  700,  699,  698,
      697,  696,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  684,  683,  682,  679,  678,  677,  674,  671,  670,
      669,  668,  667,  666,  665,  664,  663,  662,  661,  660,

      659,  656,  655,  654,  653,  652,  651,  650,  647,  646,
      641,  640,  639,  638,  637,  636,  633,  632,  631,  630,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  616,  615,  614,  613,  612,  611,  610,
      605,  604,  603,  602,  601,  600,  599,  598,  594,  593,
      592,  591,  590,  589,  588,  587,  586,  585,  584,  583,
      582,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  545,  544,  543,  542,  541,

      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  527,  526,  525,  524,  523,  520,  519,  509,  508,
      502,  496,  495,  490,  489,  488,  485,  480,  479,  478,
      477,  471,  465,  464,  463,  460,  459,  456,  455,  454,
      453,  452,  445,  442,  439,  438,  437,  436,  432,  417,
      416,  415,  414,  413,  409,  408,  399,  398,  397,  389,
      388,  379,  372,  371,  370,  367,  366,  365,  361,  360,
      359,  358,  357,  353,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  321,  320,  319,  318,  317,  316,

      315,  314,  313,  312,  311,  310,  309,  308,  307,  306,
      305,  304,  303,  302,  301,  300,  299, 3438,  292,  290,
      252,  222,  214,  166,  165,  164,  159,  158,  137,  133,
      132,  119,  112,  111,  108,   97,   96,   95,   94,   93,
     3438,    7, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,

     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438
    } ;

static yyconst flex_int16_t yy_chk[3735] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,   13,    3,   35,    3,    4,    4,

       35,    4,    9,    4,   24,    9,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   25,   24,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   27,   28,
       31,   31,   44,   79,   79,   26,   25,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   13,   27,   28,
       36,   38,   42,   38,   47,   26,   48,   27,   28,  738,
       38,   36,   39,   47,   58,   64,   80,   25,   58,   64,
       64,   51,    9,   39,   58,  739,   46,   42,   42,   27,
       28,   36,   39,   80,   58,   45,   26,   71,   39,   44,
       45,   39,  136,   46,   39,   61,   90,   39,   39,   39,

       45,   48,   71,  136,  137,   48,   45,  138,   46,   45,
       45,   45,   46,   51,   51,   51,   59,  137,   46,  188,
      188,   48,   57,   57,   57,   57,   57,   68,   60,  151,
       59,   68,   60,  151,   59,   68,   60,   59,  173,  740,
       61,   68,   60,   88,   59,   60,   88,   59,   61,   90,
      173,   61,   60,   61,   62,   61,   61,  135,  135,  135,
      138,   61,   62,   61,  184,   62,   57,  175,   62,   57,
       57,   62,  175,  228,   65,  228,  175,  184,   57,   57,
       57,   65,   65,  184,   57,   57,   57,   65,  196,  196,
       57,   57,   57,   67,   67,   69,   69,   67,  204,  741,

       69,  204,   67,  193,   69,   77,   77,   70,   70,  193,
       69,   77,   70,   88,  210,  193,   77,   77,   77,   69,
       69,   69,   70,   72,  210,  195,   74,   72,   70,   74,
       72,  195,  192,  192,   72,   78,  210,   72,  192,   78,
       72,  198,   74,   78,  197,   74,   74,   74,   75,   78,
       75,  197,   75,  202,  250,   75,   75,  209,  209,   75,
      202,  198,   75,  250,   75,   76,  203,   75,   75,   76,
      203,  220,   76,   76,  208,  742,  213,  220,  277,   76,
      213,  208,   76,  277,  203,  208,  213,  233,  220,   76,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

      223,  223,  223,  263,  263,  233,  242,  383,   98,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  230,
      242,  246,  383,  246,  744,  230,  102,  101,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  384,   98,
      417,  271,  103,  417,  103,  271,  102,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  251,  101,  221,
      221,  251,  221,  221,  221,  745,  336,  251,  267,  232,
      221,  221,  267,  336,  221,  746,  267,  102,  221,  253,
      221,  232,  232,  261,  253,  267,  232,  273,  274,  270,
      747,  253,  261,  273,  270,  253,  274,  253,  261,  270,

      261,  278,  283,  282,  221,  278,  286,  594,  274,  282,
      594,  283,  286,  374,  374,  384,  374,  283,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  466,  418,
      447,  447,  296,  466,  296,  418,  295,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  295,  410,  421,
      429,  453,  449,  476,  486,  453,  429,  476,  491,  486,
      410,  449,  494,  421,  487,  487,  494,  496,  496,  491,
      511,  491,  668,  737,  748,  511,  528,  528,  528,  528,

      528,  528,  528,  528,  528,  528,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  596,  707,  749,  750,
      751,  752,  753,  754,  596,  755,  756,  758,  759,  760,
      707,  761,  762,  596,  763,  764,  765,  766,  767,  768,
      769,  770,  771,  772,  773,  774,  775,  776,  777,  778,
      779,  737,  780,  781,  782,  784,  785,  786,  787,  668,
      788,  789,  790,  791,  792,  793,  794,  795,  796,  797,
      798,  799,  800,  801,  802,  803,  804,  805,  806,  807,
      808,  809,  810,  812,  813,  815,  816,  798,  817,  818,
      819,  820,  822,  823,  824,  825,  826,  827,  828,  829,

      830,  831,  824,  832,  833,  835,  836,  837,  838,  839,
      840,  824,  841,  842,  844,  845,  846,  847,  848,  849,
      850,  852,  853,  854,  815,  815,  855,  856,  858,  859,
      860,  861,  863,  864,  865,  866,  867,  868,  869,  870,
      871,  872,  873,  874,  875,  876,  877,  858,  878,  879,
      880,  881,  882,  883,  886,  887,  889,  890,  891,  893,
      894,  895,  896,  890,  897,  898,  899,  901,  902,  904,
      905,  906,  907,  908,  908,  909,  911,  912,  913,  914,
      915,  917,  850,  918,  919,  920,  921,  922,  923,  926,
      927,  928,  929,  930,  931,  932,  933,  934,  935,  937,

      939,  940,  942,  943,  944,  945,  946,  947,  948,  949,
      947,  950,  951,  952,  953,  954,  955,  957,  958,  959,
      960,  963,  964,  965,  966,  967,  968,  970,  972,  973,
      974,  975,  976,  977,  978,  979,  980,  981,  982,  983,
      984,  985,  986,  987,  988,  989,  990,  991,  992,  993,
      994,  995,  996,  997,  998,  999, 1000, 1001, 1002, 1003,
     1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
     1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
     1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034,
     1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,

     1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
     1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067,
     1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1067, 1077,
     1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1088, 1089,
     1090, 1089, 1091, 1092, 1093, 1093, 1094, 1096, 1097, 1098,
     1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1109, 1110,
     1112, 1113, 1114, 1116, 1118, 1119, 1120, 1121, 1122, 1123,
     1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
     1136, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
     1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,

     1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1151, 1167,
     1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
     1178, 1178, 1179, 1168, 1180, 1181, 1182, 1183, 1184, 1185,
     1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1197, 1198, 1199, 1201, 1202, 1203, 1181, 1202, 1204,
     1205, 1206, 1207, 1208, 1202, 1209, 1210, 1211, 1212, 1214,
     1215, 1202, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
     1224, 1225, 1226, 1227, 1229, 1230, 1231, 1202, 1202, 1232,
     1233, 1235, 1236, 1237, 1238, 1240, 1242, 1202, 1202, 1243,
     1202, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,

     1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1267, 1268, 1250, 1267, 1269, 1267, 1270,
     1271, 1272, 1273, 1274, 1276, 1277, 1280, 1281, 1282, 1283,
     1284, 1285, 1286, 1287, 1288, 1290, 1249, 1291, 1292, 1293,
     1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1307, 1308, 1310, 1313, 1314, 1297, 1315,
     1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1326,
     1327, 1328, 1330, 1331, 1323, 1323, 1332, 1333, 1334, 1335,
     1336, 1337, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
     1347, 1348, 1349, 1350, 1351, 1352, 1353, 1351, 1354, 1351,

     1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
     1365, 1366, 1367, 1369, 1369, 1369, 1370, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
     1384, 1386, 1387, 1388, 1387, 1390, 1393, 1394, 1395, 1396,
     1386, 1398, 1386, 1393, 1400, 1401, 1402, 1403, 1404, 1405,
     1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1415, 1416,
     1417, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427, 1428,
     1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1387, 1439,
     1440, 1442, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
     1453, 1454, 1456, 1458, 1454, 1459, 1454, 1387, 1457, 1457,

     1460, 1461, 1464, 1467, 1468, 1469, 1470, 1471, 1472, 1457,
     1473, 1474, 1475, 1479, 1478, 1457, 1478, 1480, 1457, 1481,
     1482, 1478, 1483, 1485, 1486, 1487, 1478, 1478, 1488, 1490,
     1491, 1479, 1493, 1495, 1496, 1497, 1498, 1499, 1500, 1502,
     1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
     1513, 1514, 1515, 1516, 1517, 1518, 1520, 1521, 1522, 1523,
     1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
     1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
     1544, 1545, 1546, 1547, 1551, 1552, 1553, 1554, 1555, 1556,
     1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1572,

     1574, 1576, 1577, 1561, 1578, 1579, 1580, 1581, 1582, 1583,
     1584, 1585, 1586, 1587, 1590, 1591, 1581, 1523, 1592, 1593,
     1594, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
     1603, 1597, 1604, 1606, 1607, 1608, 1609, 1610, 1613, 1614,
     1615, 1617, 1618, 1619, 1620, 1621, 1622, 1622, 1622, 1622,
     1623, 1624, 1626, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
     1635, 1637, 1638, 1639, 1640, 1641, 1642, 1632, 1643, 1644,
     1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
     1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
     1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674,

     1675, 1676, 1677, 1678, 1679, 1680, 1682, 1683, 1685, 1686,
     1689, 1690, 1689, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
     1698, 1699, 1700, 1701, 1702, 1703, 1689, 1704, 1693, 1705,
     1706, 1707, 1708, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
     1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1705, 1726,
     1727, 1728, 1729, 1730, 1731, 1732, 1734, 1735, 1736, 1737,
     1738, 1731, 1731, 1731, 1740, 1741, 1742, 1743, 1731, 1744,
     1746, 1747, 1748, 1749, 1750, 1751, 1754, 1755, 1756, 1757,
     1758, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
     1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1782, 1783,

     1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
     1795, 1796, 1797, 1798, 1799, 1800, 1803, 1804, 1805, 1806,
     1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1814,
     1814, 1816, 1817, 1818, 1814, 1819, 1821, 1822, 1814, 1823,
     1824, 1825, 1826, 1827, 1814, 1814, 1829, 1830, 1831, 1832,
     1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1840, 1842,
     1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
     1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
     1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1860,
     1860, 1872, 1873, 1857, 1858, 1862, 1874, 1875, 1876, 1878,

     1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
     1889, 1890, 1891, 1894, 1895, 1896, 1897, 1898, 1899, 1901,
     1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1911, 1912,
     1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
     1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
     1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1942, 1943,
     1944, 1945, 1946, 1947, 1948, 1950, 1951, 1952, 1953, 1954,
     1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
     1964, 1965, 1967, 1962, 1968, 1969, 1970, 1971, 1972, 1973,
     1974, 1977, 1972, 1978, 1979, 1980, 1981, 1982, 1980, 1983,

     1984, 1985, 1986, 1987, 1988, 1991, 1992, 1993, 1994, 1995,
     1996, 1997, 1998, 1999, 2000, 1984, 2001, 2002, 2003, 2004,
     2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
     2015, 2016, 2017, 2018, 2020, 2021, 2022, 2023, 2007, 2024,
     2025, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035,
     2036, 2037, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
     2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
     2057, 2058, 2059, 2060, 2062, 2063, 2064, 2065, 2066, 2067,
     2068, 2069, 2070, 2071, 2072, 2075, 2076, 2077, 2078, 2079,
     2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,

     2090, 2091, 2092, 2093, 2094, 2097, 2098, 2099, 2100, 2101,
     2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,
     2112, 2113, 2114, 2115, 2053, 2116, 2117, 2118, 2119, 2120,
     2121, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131,
     2132, 2133, 2134, 2135, 2137, 2138, 2139, 2140, 2141, 2142,
     2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
     2154, 2155, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164,
     2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174,
     2175, 2176, 2177, 2178, 2168, 2179, 2168, 2180, 2181, 2182,
     2183, 2184, 2185, 2186, 2168, 2187, 2188, 2189, 2190, 2191,

     2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201,
     2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2211, 2212,
     2199, 2213, 2212, 2214, 2215, 2216, 2217, 2218, 2219, 2220,
     2221, 2222, 2223, 2224, 2225, 2212, 2226, 2227, 2228, 2229,
     2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239,
     2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249,
     2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259,
     2260, 2261, 2263, 2264, 2265, 2266, 2267, 2261, 2268, 2269,
     2257, 2270, 2271, 2261, 2272, 2273, 2261, 2274, 2275, 2276,
     2277, 2278, 2279, 2280, 2281, 2282, 2284, 2286, 2287, 2288,

     2289, 2290, 2291, 2292, 2261, 2293, 2261, 2294, 2295, 2261,
     2296, 2297, 2298, 2261, 2261, 2261, 2299, 2261, 2300, 2303,
     2304, 2305, 2306, 2307, 2308, 2261, 2309, 2261, 2262, 2310,
     2311, 2313, 2314, 2315, 2262, 2316, 2317, 2318, 2262, 2319,
     2320, 2321, 2322, 2262, 2323, 2324, 2325, 2326, 2327, 2328,
     2329, 2262, 2330, 2331, 2333, 2335, 2334, 2336, 2337, 2262,
     2338, 2262, 2339, 2262, 2340, 2341, 2262, 2342, 2343, 2262,
     2262, 2262, 2262, 2334, 2262, 2344, 2262, 2345, 2262, 2346,
     2347, 2348, 2262, 2349, 2262, 2350, 2351, 2352, 2353, 2354,
     2355, 2356, 2357, 2358, 2359, 2361, 2362, 2363, 2367, 2368,

     2369, 2370, 2357, 2371, 2372, 2373, 2375, 2378, 2379, 2380,
     2381, 2383, 2384, 2385, 2386, 2388, 2389, 2390, 2391, 2392,
     2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402,
     2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2413,
     2414, 2413, 2415, 2416, 2417, 2418, 2419, 2420, 2422, 2423,
     2424, 2425, 2426, 2408, 2427, 2429, 2430, 2429, 2431, 2432,
     2433, 2434, 2436, 2437, 2438, 2439, 2440, 2423, 2441, 2442,
     2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452,
     2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2462, 2464,
     2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2475,

     2430, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484,
     2486, 2487, 2488, 2490, 2491, 2493, 2495, 2496, 2497, 2498,
     2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508,
     2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518,
     2519, 2520, 2521, 2522, 2523, 2524, 2526, 2527, 2528, 2529,
     2530, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538,
     2539, 2540, 2541, 2542, 2543, 2544, 2545, 2540, 2547, 2548,
     2549, 2550, 2551, 2552, 2555, 2556, 2557, 2560, 2561, 2562,
     2566, 2569, 2571, 2574, 2576, 2580, 2581, 2584, 2586, 2587,
     2591, 2592, 2593, 2595, 2596, 2597, 2598, 2599, 2600, 2591,

     2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610,
     2611, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2620,
     2621, 2622, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633,
     2634, 2635, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644,
     2645, 2646, 2647, 2648, 2650, 2651, 2652, 2653, 2654, 2655,
     2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665,
     2666, 2667, 2668, 2670, 2671, 2672, 2673, 2674, 2676, 2677,
     2678, 2679, 2680, 2681, 2684, 2685, 2686, 2687, 2689, 2690,
     2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2701,
     2702, 2703, 2704, 2705, 2706, 2707, 2709, 2710, 2711, 2713,

     2714, 2715, 2716, 2718, 2719, 2721, 2722, 2724, 2725, 2726,
     2709, 2727, 2728, 2730, 2731, 2732, 2733, 2734, 2735, 2736,
     2738, 2740, 2679, 2744, 2745, 2746, 2747, 2748, 2750, 2751,
     2752, 2753, 2754, 2755, 2756, 2757, 2679, 2759, 2760, 2761,
     2762, 2763, 2764, 2765, 2766, 2767, 2769, 2770, 2771, 2772,
     2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782,
     2783, 2784, 2786, 2787, 2789, 2790, 2791, 2792, 2793, 2794,
     2795, 2797, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806,
     2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816,
     2817, 2818, 2819, 2821, 2823, 2824, 2825, 2826, 2827, 2828,

     2829, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840,
     2842, 2843, 2844, 2847, 2848, 2849, 2850, 2851, 2852, 2853,
     2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863,
     2864, 2865, 2866, 2868, 2869, 2870, 2871, 2872, 2873, 2874,
     2875, 2876, 2877, 2878, 2879, 2880, 2881, 2883, 2884, 2885,
     2886, 2887, 2888, 2889, 2890, 2892, 2894, 2895, 2896, 2897,
     2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2908,
     2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2919, 2920,
     2921, 2922, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931,
     2932, 2933, 2934, 2935, 2936, 2939, 2940, 2941, 2943, 2945,

     2946, 2947, 2948, 2949, 2951, 2952, 2953, 2954, 2956, 2957,
     2958, 2959, 2960, 2964, 2965, 2966, 2967, 2968, 2969, 2970,
     2971, 2972, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981,
     2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991,
     2994, 2995, 2996, 2997, 2998, 2999, 3001, 3002, 3003, 3006,
     3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016,
     3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3026, 3027,
     3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3039, 3040,
     3042, 3043, 3044, 3046, 3047, 3048, 3049, 3051, 3052, 3053,
     3055, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065,

     3066, 3067, 3068, 3069, 3070, 3071, 3074, 3076, 3069, 3077,
     3079, 3080, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089,
     3091, 3092, 3093, 3094, 3096, 3097, 3098, 3100, 3101, 3103,
     3104, 3105, 3106, 3107, 3109, 3111, 3113, 3114, 3116, 3117,
     3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127,
     3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137,
     3138, 3139, 3140, 3141, 3142, 3143, 3144, 3147, 3148, 3149,
     3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3161, 3162,
     3163, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3174,
     3175, 3176, 3177, 3178, 3179, 3180, 3182, 3183, 3184, 3185,

     3186, 3187, 3188, 3191, 3192, 3193, 3194, 3195, 3196, 3197,
     3198, 3199, 3200, 3201, 3202, 3203, 3204, 3206, 3207, 3208,
     3209, 3210, 3211, 3213, 3214, 3215, 3216, 3217, 3218, 3219,
     3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3232,
     3233, 3236, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247,
     3248, 3249, 3250, 3252, 3253, 3254, 3255, 3256, 3257, 3258,
     3259, 3260, 3261, 3264, 3265, 3268, 3269, 3270, 3271, 3272,
     3274, 3279, 3280, 3281, 3284, 3285, 3286, 3287, 3288, 3289,
     3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3299, 3300,
     3302, 3303, 3304, 3305, 3306, 3294, 3307, 3308, 3309, 3311,

     3312, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322,
     3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333,
     3334, 3335, 3336, 3337, 3338, 3340, 3341, 3342, 3343, 3344,
     3345, 3346, 3347, 3351, 3352, 3353, 3354, 3356, 3357, 3359,
     3360, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371,
     3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381,
     3383, 3385, 3386, 3387, 3388, 3389, 3390, 3392, 3393, 3394,
     3395, 3396, 3397, 3398, 3399, 3400, 3402, 3403, 3405, 3406,
     3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417,
     3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3429,

     3430, 3431, 3432, 3433, 3435, 3436, 3439, 3439, 3439, 3439,
     3439, 3439, 3440, 3440, 3440, 3440, 3440, 3440, 3441, 3441,
     3441, 3441, 3441, 3441, 3442, 3442, 3443, 3443, 3444,  736,
      733, 3444, 3444, 3444, 3445, 3445,  732, 3445, 3445, 3445,
     3446, 3446,  730, 3446, 3446, 3446,  729,  728,  727,  726,
      725,  724,  723,  722,  720,  719,  717,  716,  715,  714,
      713,  712,  711,  710,  709,  708,  706,  705,  704,  703,
      702,  701,  699,  698,  697,  696,  695,  694,  693,  692,
      691,  690,  689,  688,  687,  686,  685,  684,  681,  680,
      679,  676,  675,  674,  673,  672,  671,  669,  667,  666,

      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  640,  638,  637,  636,  635,  633,
      632,  630,  629,  627,  626,  625,  624,  623,  622,  621,
      620,  618,  617,  616,  615,  613,  612,  611,  610,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  597,
      595,  593,  591,  590,  589,  588,  587,  586,  585,  583,
      582,  581,  580,  578,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  555,  554,  553,  552,  551,  550,

      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  536,  535,  534,  533,  532,  531,  530,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  514,  513,  510,  509,  508,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  495,
      493,  492,  490,  489,  488,  485,  483,  482,  481,  480,
      479,  478,  477,  475,  474,  473,  472,  471,  470,  469,
      468,  467,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  452,  451,  450,  448,  446,  445,
      444,  443,  442,  441,  439,  438,  437,  436,  432,  431,

      430,  428,  427,  426,  425,  424,  423,  422,  420,  419,
      416,  415,  414,  413,  412,  411,  409,  408,  406,  405,
      404,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      382,  381,  380,  379,  378,  377,  376,  375,  373,  372,
      371,  370,  366,  365,  364,  363,  362,  361,  360,  359,
      357,  356,  354,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  335,
      334,  333,  332,  331,  330,  329,  326,  325,  321,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,

      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  292,  290,  289,  288,  287,  285,  284,  276,  275,
      272,  269,  268,  266,  265,  264,  262,  260,  259,  255,
      254,  252,  249,  248,  247,  245,  243,  241,  240,  239,
      235,  234,  231,  229,  227,  226,  225,  224,  222,  219,
      217,  216,  215,  214,  212,  211,  207,  206,  205,  201,
      199,  194,  191,  190,  189,  187,  186,  185,  180,  179,
      178,  177,  176,  174,  172,  165,  164,  160,  159,  158,
      157,  156,  155,  153,  152,  150,  149,  148,  147,  143,
      142,  141,  140,  139,  134,  133,  132,  128,  127,  126,

      125,  124,  123,  122,  121,  120,  119,  118,  117,  116,
      115,  114,  108,  107,  106,  105,  104,   92,   89,   81,
       73,   66,   63,   56,   53,   52,   50,   49,   43,   41,
       40,   37,   33,   32,   29,   22,   20,   19,   15,   14,
        7, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,

     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438, 3438,
     3438, 3438, 3438, 3438
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[527] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "feiparser.l"
/* FEI Lexer! */
/* NOTE: To comment this file use C "standard comments"  BUT leave a space before the slash-star */
/* /////////////////////////////////////////////////////////////////////////////// */
/* //                                                                              */
/* // COPYRIGHT (C):      Version of a Creative Commons License,                   */
/* //                     for details contact Boris Jeremic, jeremic@ucdavis.edu   */
/* // PROJECT:            Real ESSI Simulator                                      */
/* // PROGRAMMER:         Jose Abell                                               */
/* // DATE:               Jan 2012                                                 */
/* // UPDATE HISTORY:     Full update history in git repository.                   */
/* // QUALITY ASSURANCE:  Developers have worked really hard to develop            */
/* //                     an extensive verification of developed implementation    */
/* //                     and with that can claim quality and fitness for intended */
/* //                     purpose (modeling and simulation of Real ESSI Problems)  */
/* //                     within confines of verification effort                   */
/* //                                                                              */
/* // LEGACY/DEFUNCT COPYLEFT (C):                                                 */
/* //                     Woody's viral GPL-like license (adapted by BJ):          */
/* //                     ``This    source  code is Copyrighted in                 */
/* //                     worldwide for  an  indefinite  period,  and anybody      */
/* //                     caught  using it without our permission, will be         */
/* //                     mighty good friends of ourn, cause we don't give         */
/* //                     a  darn.  Hack it. Compile it. Debug it. Run it.         */
/* //                     Yodel  it.  Enjoy it. We wrote it, that's all we         */
/* //                     wanted to do.''                                          */
/* //                                                                              */
/* /////////////////////////////////////////////////////////////////////////////   */


#line 36 "feiparser.l"
	#include <iostream>
	#include <fstream>
	#include <string>



	//Old C libraries are used in lexer....
	#include <fenv.h>  // For feenableexcept()
    #include <cmath>
    #include <cerrno>
    #pragma STDC FENV_ACCESS ON
    #include <stacktrace.h>
    #include <cstdlib>
	#include <cstring>
	#include <csignal>
	#include <stdio.h>                         // Provides printf, etc.
	#include <string.h>
	#include <getopt.h>                        // For the command-line argument parser
	/// =================================================================================
	// Please do not erase! Might make it into code someday.
	// #include <readline/readline.h>
	// #include <readline/history.h>
	// =================================================================================

	//Our FEI libraries
	#include "feiast.h"
	#include "dsl_actions.h"
	#include "siunit.h"
	#include "quantity.h"
    //#define __USE_GNU

    


	//From the parser generator
	#include "feiparser.tab.hh"

	//Boost for string to double conversion
	//#include <../boost/boost/lexical_cast.hpp>
	#include <boost/lexical_cast.hpp>

    #ifdef _PARALLEL_PROCESSING
    #include <mpi.h>
    #endif

	int yycolumn = 1;
	#define YY_DECL int yylex(yy::feiparser::semantic_type *yylval,\
							  yy::feiparser::location_type *yylloc)
	//#define YY_USER_ACTION yylloc -> columns (yyleng);
	#define YY_USER_ACTION yylloc->end.line = yylineno; \
	yylloc->end.column = yycolumn+yyleng; \
	yycolumn += yyleng;

	// =================================================================================
	// Please do not erase! Might make it into code someday.
	// This is to replace STDIN with GNU Readline (Caution!!! GPL Licence).
	// #undef YY_INPUT
	// #define YY_INPUT(buf, result, max_size) (result = my_yyinput(buf, max_size))
	// =================================================================================

	//static int my_yyinput(char *buf, int max_size);
	//static char *st_readline_buffer;
	//static int  st_readline_used_len;

	//Simplify the usage of tokens...
	typedef yy::feiparser::token token;

	//Standard namespace
	using namespace std;


	//
	//FILE * ;

	struct bufstack
	{
		struct bufstack *prev;
		YY_BUFFER_STATE bs;
		int lineno;
		char* filename;
		FILE *f;
	} *curbs = 0;

	char* curfilename;

	int newfile(char* fn);
	int newstdin(void);
	int popfile(void);
	int error_behavior(void);
	void welcome_msg();
	void set_known_units();
	void set_variables(char* cstring);


	char initial[] = "STDIN";

	//Command line options flags
	int FLAG_interactive_mode    = 1;
	int FLAG_generate_cpp_output = 0;
	int FLAG_dry_run             = 0;
	int FLAG_execute_apis        = 1;
	int FLAG_inclusion_mode      = 0;
	int FLAG_run_file            = 0;
    int FLAG_binary_output       = 0;
	int FLAG_debug_attach        = 0;

	/* EXTERNS - All defined in feiparser.yy */
	extern const string thePrompt;
	extern string out_cpp_filename;
	extern string prompt;
	extern map<string,Quantity> global_variables;
	extern set<string> locked_global_variables;
	extern int recovery_mode;
	extern void set_model_name(char* cstring);
	extern void set_outcppfile_name(string newfilename);
	extern void wipe_model();
	extern void set_dry_run_mode(int);
	extern void set_profiling_results_filename(char* cstring);
	extern void call_hdf5_flush_next_chance(void);

#ifndef VERSION
#define VERSION "--NOT FROM GIT REPO--"
#endif
/* float exponent */
#line 2623 "feiparser.lex.c"

#define INITIAL 0
#define IFILE 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 164 "feiparser.l"



	// start where previous token ended
	//yylloc -> step();


 /* ================================================================================================= */
 /* ========              BEGIN LEXER                                                       ========= */
 /* ================================================================================================= */
 
 /* The order in this file matters. Patterns which are higher up are matched first */
 
 /* single character ops are directly passed to the parser (more grammatical clarity) */
#line 2827 "feiparser.lex.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3439 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3642 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
#line 179 "feiparser.l"
case 2:
#line 180 "feiparser.l"
case 3:
#line 181 "feiparser.l"
case 4:
#line 182 "feiparser.l"
case 5:
#line 183 "feiparser.l"
case 6:
#line 184 "feiparser.l"
case 7:
#line 185 "feiparser.l"
case 8:
#line 186 "feiparser.l"
case 9:
#line 187 "feiparser.l"
case 10:
#line 188 "feiparser.l"
case 11:
#line 189 "feiparser.l"
case 12:
#line 190 "feiparser.l"
case 13:
#line 191 "feiparser.l"
case 14:
#line 192 "feiparser.l"
case 15:
YY_RULE_SETUP
#line 192 "feiparser.l"
{ return yytext[0]; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 194 "feiparser.l"
{
								yylloc->begin.line = yylineno;
								yylloc->begin.column = yycolumn;

								return yytext[0];
							}
	YY_BREAK
/* assign operate */
case 17:
YY_RULE_SETUP
#line 202 "feiparser.l"
{ return token::PLUSEQUAL; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 203 "feiparser.l"
{ return token::MINUSEQUAL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 204 "feiparser.l"
{ return token::TIMESEQUAL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 205 "feiparser.l"
{ return token::DIVIDEEQUAL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 206 "feiparser.l"
{ return token::MODULUSEQUAL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 207 "feiparser.l"
{ return token::POWEQUAL; }
	YY_BREAK
/* comparison ops */
case 23:
YY_RULE_SETUP
#line 211 "feiparser.l"
{ yylval->fn = 1; return token::CMP; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 212 "feiparser.l"
{ yylval->fn = 2; return token::CMP; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 213 "feiparser.l"
{ yylval->fn = 3; return token::CMP; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 214 "feiparser.l"
{ yylval->fn = 4; return token::CMP; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 215 "feiparser.l"
{ yylval->fn = 5; return token::CMP; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 216 "feiparser.l"
{ yylval->fn = 6; return token::CMP; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 217 "feiparser.l"
{ yylval->fn = 7; return token::CMP; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 218 "feiparser.l"
{ yylval->fn = 8; return token::CMP; }
	YY_BREAK
/* test for units */
case 31:
#line 223 "feiparser.l"
case 32:
#line 224 "feiparser.l"
case 33:
#line 225 "feiparser.l"
case 34:
#line 226 "feiparser.l"
case 35:
#line 227 "feiparser.l"
case 36:
#line 228 "feiparser.l"
case 37:
#line 229 "feiparser.l"
case 38:
#line 230 "feiparser.l"
case 39:
#line 231 "feiparser.l"
case 40:
#line 232 "feiparser.l"
case 41:
#line 233 "feiparser.l"
case 42:
#line 234 "feiparser.l"
case 43:
#line 235 "feiparser.l"
case 44:
YY_RULE_SETUP
#line 235 "feiparser.l"
{yylval->ident = new string(yytext); return token::ISUNITTYPE;}
	YY_BREAK
/* Auto-variables (keywords)  */
case 45:
YY_RULE_SETUP
#line 238 "feiparser.l"
{return token::NUMBER_OF_NODES;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 239 "feiparser.l"
{return token::NUMBER_OF_ELEMENTS;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 240 "feiparser.l"
{return token::CURRENT_TIME;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 241 "feiparser.l"
{return token::NUMBER_OF_SP_CONSTRAINTS;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 242 "feiparser.l"
{return token::NUMBER_OF_MP_CONSTRAINTS;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 243 "feiparser.l"
{return token::NUMBER_OF_LOADS;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 244 "feiparser.l"
{return token::IS_PARALLEL;}
	YY_BREAK
/* Flow control keywords */
case 52:
YY_RULE_SETUP
#line 247 "feiparser.l"
{ return token::IF; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 248 "feiparser.l"
{ return token::THEN; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 249 "feiparser.l"
{ return token::ELSE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 250 "feiparser.l"
{ return token::WHILE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 251 "feiparser.l"
{ return token::DO; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 252 "feiparser.l"
{ return token::LET;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 253 "feiparser.l"
{ return token::IN; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 254 "feiparser.l"
{ return token::EXITSAFEMODE;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 255 "feiparser.l"
{ return token::CONTINUE;}
	YY_BREAK
/* Include statement is handled by the lexer */
case 61:
YY_RULE_SETUP
#line 258 "feiparser.l"
{BEGIN IFILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 259 "feiparser.l"
{
								{
									//This ignores anything up to the newline.
									int c;
									while((c=yyinput()) && c != '\n');
								}
								yylineno++;
								if(newfile(yytext) == 0)
									yyterminate();  /*file not found*/
								yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
								prompt = "";
								BEGIN INITIAL;
								FLAG_inclusion_mode = 1;
							}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 273 "feiparser.l"
{
								cerr << curfilename << ":" << yylineno << ": bad include line." << endl;
								yyterminate();
							}
	YY_BREAK
/* built in functions */
case 64:
#line 281 "feiparser.l"
case 65:
#line 282 "feiparser.l"
case 66:
#line 283 "feiparser.l"
case 67:
#line 284 "feiparser.l"
case 68:
#line 285 "feiparser.l"
case 69:
#line 286 "feiparser.l"
case 70:
#line 287 "feiparser.l"
case 71:
#line 288 "feiparser.l"
case 72:
#line 289 "feiparser.l"
case 73:
#line 290 "feiparser.l"
case 74:
#line 291 "feiparser.l"
case 75:
#line 292 "feiparser.l"
case 76:
#line 293 "feiparser.l"
case 77:
#line 294 "feiparser.l"
case 78:
#line 295 "feiparser.l"
case 79:
#line 296 "feiparser.l"
case 80:
YY_RULE_SETUP
#line 296 "feiparser.l"
{ yylval->ident = new string(yytext); return token::FUNCTION; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 298 "feiparser.l"
{return token::VECTOR;}
	YY_BREAK
/* ================================================================================================= */
/* ========              INITIAL COMMANDS (VERBS)                                          ========= */
/* ================================================================================================= */
case 82:
YY_RULE_SETUP
#line 304 "feiparser.l"
{return token::MODEL;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 305 "feiparser.l"
{return token::ADD;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 306 "feiparser.l"
{return token::DEFINE;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 307 "feiparser.l"
{return token::FIX;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 308 "feiparser.l"
{return token::FREE;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 309 "feiparser.l"
{return token::REMOVE;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 310 "feiparser.l"
{return token::SIMULATE;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 311 "feiparser.l"
{return token::COMPUTE;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 312 "feiparser.l"
{return token::CMD_print;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 313 "feiparser.l"
{return token::CMD_help;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 314 "feiparser.l"
{return token::CMD_whos;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 315 "feiparser.l"
{return token::CMD_check;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 316 "feiparser.l"
{return token::MESH;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 317 "feiparser.l"
{return token::REQUIRE;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 318 "feiparser.l"
{return token::RUNTEST;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 319 "feiparser.l"
{return token::SET;}
	YY_BREAK
/* New loading stage.... should change */
case 98:
YY_RULE_SETUP
#line 323 "feiparser.l"
{return token::NEW;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 324 "feiparser.l"
{return token::LOADING;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 325 "feiparser.l"
{return token::STAGE;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 326 "feiparser.l"
{return token::RESTART;}
	YY_BREAK
/* ================================================================================================= */
/* ========                     ADD                                                        ========= */
/* ================================================================================================= */
/* Things which can be added (nouns). May be several phrases */
case 102:
YY_RULE_SETUP
#line 333 "feiparser.l"
{return token::NODE;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 334 "feiparser.l"
{return token::ELEMENT;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 335 "feiparser.l"
{return token::ELEMENTS;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 336 "feiparser.l"
{return token::MATERIAL;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 337 "feiparser.l"
{return token::LOAD;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 338 "feiparser.l"
{return token::ACCELERATION_FIELD;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 339 "feiparser.l"
{return token::TIMEHISTORY;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 340 "feiparser.l"
{return token::MASS;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 341 "feiparser.l"
{return token::IMPOSEDMOTION;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 342 "feiparser.l"
{return token::UNIFORMACCELERATION;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 343 "feiparser.l"
{return token::DAMPING;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 344 "feiparser.l"
{return token::CONSTRAINT;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 345 "feiparser.l"
{return token::REACTION;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 346 "feiparser.l"
{return token::FORCES;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 347 "feiparser.l"
{return token::DRM;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 348 "feiparser.l"
{return token::SECTION;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 349 "feiparser.l"
{return token::LOADPATTERN;}
	YY_BREAK
/* "penalty displacement"              {return token::PENALTYDISPLACEMENT;} */
case 119:
YY_RULE_SETUP
#line 351 "feiparser.l"
{return token::LOADVALUE;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 352 "feiparser.l"
{return token::DISPLACEMENT;}
	YY_BREAK
/* Element names */
case 121:
YY_RULE_SETUP
#line 355 "feiparser.l"
{return token::EightNodeBrick;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 356 "feiparser.l"
{return token::EightNodeBrickLT;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 357 "feiparser.l"
{return token::EightNodeBrickLTNoOutput;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 358 "feiparser.l"
{return token::TwentyNodeBrick;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 359 "feiparser.l"
{return token::TwentyNodeBrickLT;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 360 "feiparser.l"
{return token::TwentySevenNodeBrick;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 361 "feiparser.l"
{return token::TwentySevenNodeBrickLT;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 362 "feiparser.l"
{return token::EightNodeBrickElastic;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 363 "feiparser.l"
{return token::TwentyNodeBrickElastic;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 364 "feiparser.l"
{return token::TwentySevenNodeBrickElastic;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 365 "feiparser.l"
{return token::EightNodeBrick_upU;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 366 "feiparser.l"
{return token::EightNodeBrick_up;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 367 "feiparser.l"
{return token::TwentyNodeBrick_uPU;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 368 "feiparser.l"
{return token::beam_displacement_based;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 369 "feiparser.l"
{return token::BeamColumnDispFiber3d;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 370 "feiparser.l"
{return token::beam_elastic;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 371 "feiparser.l"
{return token::beam_9dof_elastic;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 372 "feiparser.l"
{return token::beam_elastic_lumped_mass;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 373 "feiparser.l"
{return token::FourNodeShellMITC4;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 374 "feiparser.l"
{return token::FourNodeShellNewMITC4;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 375 "feiparser.l"
{return token::ThreeNodeShellANDES;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 376 "feiparser.l"
{return token::FourNodeShellANDES;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 377 "feiparser.l"
{return token::truss;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 378 "feiparser.l"
{return token::contact;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 379 "feiparser.l"
{return token::FrictionalPenaltyContact;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 380 "feiparser.l"
{return token::variable_node_brick_8_to_27;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 381 "feiparser.l"
{return token::ShearBeamLT;}
	YY_BREAK
/* Element options */
case 148:
YY_RULE_SETUP
#line 385 "feiparser.l"
{return token::porosity;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 386 "feiparser.l"
{return token::rho_s;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 387 "feiparser.l"
{return token::rho_f;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 388 "feiparser.l"
{return token::k_x;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 389 "feiparser.l"
{return token::k_y;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 390 "feiparser.l"
{return token::k_z;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 391 "feiparser.l"
{return token::K_s;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 392 "feiparser.l"
{return token::K_f;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 393 "feiparser.l"
{return token::pressure;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 394 "feiparser.l"
{return token::cross_section;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 395 "feiparser.l"
{return token::shear_modulus;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 396 "feiparser.l"
{return token::torsion_Jx;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 397 "feiparser.l"
{return token::bending_Iz;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 398 "feiparser.l"
{return token::bending_Iy;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 399 "feiparser.l"
{return token::mass_density;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 400 "feiparser.l"
{return token::xz_plane_vector;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 401 "feiparser.l"
{return token::joint_1_offset;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 402 "feiparser.l"
{return token::joint_2_offset;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 403 "feiparser.l"
{return token::direction;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 404 "feiparser.l"
{return token::stiffness;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 405 "feiparser.l"
{return token::normal_stiffness;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 406 "feiparser.l"
{return token::tangential_stiffness;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 407 "feiparser.l"
{return token::normal_damping;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 408 "feiparser.l"
{return token::tangential_damping;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 409 "feiparser.l"
{return token::friction_ratio;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 410 "feiparser.l"
{return token::maximum_gap;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 411 "feiparser.l"
{return token::contact_plane_vector;}
	YY_BREAK
/* section types */
case 175:
YY_RULE_SETUP
#line 415 "feiparser.l"
{return token::MembranePlateFiber;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 416 "feiparser.l"
{return token::ElasticMembranePlate;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 417 "feiparser.l"
{return token::elastic3d;}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 418 "feiparser.l"
{return token::FiberSection;}
	YY_BREAK
/* section options */
case 179:
YY_RULE_SETUP
#line 421 "feiparser.l"
{return token::thickness;}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 422 "feiparser.l"
{return token::number_of_integration_points;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 423 "feiparser.l"
{return token::section_number;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 424 "feiparser.l"
{return token::fiber_cross_section;}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 425 "feiparser.l"
{return token::fiber_location_Y;}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 426 "feiparser.l"
{return token::fiber_location_Z;}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 427 "feiparser.l"
{return token::fiber_location;}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 428 "feiparser.l"
{return token::TorsionConstant_GJ;}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 429 "feiparser.l"
{return token::FIBER;}
	YY_BREAK
/* Material Names*/
case 188:
#line 433 "feiparser.l"
case 189:
YY_RULE_SETUP
#line 433 "feiparser.l"
{return token::linear_elastic_isotropic_3d;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 434 "feiparser.l"
{return token::NonlinearIsotropic3DLT;}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 435 "feiparser.l"
{return token::VonMisesLT;}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 436 "feiparser.l"
{return token::DruckerPragerLT;}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 437 "feiparser.l"
{return token::DruckerPragerNonAssociateLinearHardeningLT;}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 438 "feiparser.l"
{return token::DruckerPragerVonMisesLT;}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 439 "feiparser.l"
{return token::DruckerPragerArmstrongFrederickLT;}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 440 "feiparser.l"
{return token::DruckerPragerNonAssociateArmstrongFrederickLT;}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 441 "feiparser.l"
{return token::sanisand2008;}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 442 "feiparser.l"
{return token::camclay;}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 443 "feiparser.l"
{return token::camclay_accelerated;}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 444 "feiparser.l"
{return token::sanisand2004;}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 445 "feiparser.l"
{return token::linear_elastic_crossanisotropic;}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 446 "feiparser.l"
{return token::uniaxial_elastic_1d;}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 447 "feiparser.l"
{return token::uniaxial_steel01;}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 448 "feiparser.l"
{return token::uniaxial_steel02;}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 449 "feiparser.l"
{return token::uniaxial_concrete02;}
	YY_BREAK
/* LTensor based materials */
case 206:
YY_RULE_SETUP
#line 453 "feiparser.l"
{return token::NDMaterialLT;}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 454 "feiparser.l"
{return token::linear_elastic_isotropic_3d_LT;}
	YY_BREAK
case 208:
#line 456 "feiparser.l"
case 209:
YY_RULE_SETUP
#line 456 "feiparser.l"
{return token::PisanoLT;}
	YY_BREAK
/* Material options */
case 210:
YY_RULE_SETUP
#line 460 "feiparser.l"
{return token::elastic_modulus;}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 461 "feiparser.l"
{return token::elastic_modulus_horizontal;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 462 "feiparser.l"
{return token::elastic_modulus_vertical;}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 463 "feiparser.l"
{return token::viscoelastic_modulus;}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 464 "feiparser.l"
{return token::poisson_ratio;}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 465 "feiparser.l"
{return token::poisson_ratio_h_v;}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 466 "feiparser.l"
{return token::poisson_ratio_h_h;}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 467 "feiparser.l"
{return token::shear_modulus_h_v;}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 468 "feiparser.l"
{return token::von_mises_radius;}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 469 "feiparser.l"
{return token::druckerprager_angle;}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 470 "feiparser.l"
{return token::druckerprager_k;}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 471 "feiparser.l"
{return token::armstrong_frederick_ha;}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 472 "feiparser.l"
{return token::armstrong_frederick_cr;}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 473 "feiparser.l"
{return token::initial_confining_stress;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 474 "feiparser.l"
{return token::plastic_flow_kd;}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 475 "feiparser.l"
{return token::plastic_flow_xi;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 476 "feiparser.l"
{return token::pressure_reference_p0;}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 477 "feiparser.l"
{return token::strain;}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 478 "feiparser.l"
{return token::stress;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 479 "feiparser.l"
{return token::control;}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 480 "feiparser.l"
{
										yylval->value = new Quantity(0.0,ESSIunits::unitless);
										return token::NUMBER;
									}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 484 "feiparser.l"
{
										yylval->value = new Quantity(1.0,ESSIunits::unitless);
										return token::NUMBER;
									}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 488 "feiparser.l"
{return token::isotropic_hardening_rate;}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 489 "feiparser.l"
{return token::kinematic_hardening_rate;}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 490 "feiparser.l"
{return token::initial_void_ratio;}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 491 "feiparser.l"
{return token::initial_shear_modulus;}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 492 "feiparser.l"
{return token::initial_bulk_modulus;}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 493 "feiparser.l"
{return token::reference_void_ratio;}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 494 "feiparser.l"
{return token::critical_stress_ratio_M;}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 495 "feiparser.l"
{return token::minimum_bulk_modulus;}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 496 "feiparser.l"
{return token::initial_mean_pressure;}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 497 "feiparser.l"
{return token::e0;}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 498 "feiparser.l"
{return token::sanisand2008_Pat;}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 499 "feiparser.l"
{return token::sanisand2008_k_c;}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 500 "feiparser.l"
{return token::sanisand2008_K0;}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 501 "feiparser.l"
{return token::sanisand2008_G0;}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 502 "feiparser.l"
{return token::sanisand2008_alpha_cc;}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 503 "feiparser.l"
{return token::sanisand2008_c;}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 504 "feiparser.l"
{return token::sanisand2008_xi;}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 505 "feiparser.l"
{return token::sanisand2008_lambda;}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 506 "feiparser.l"
{return token::sanisand2008_ec_ref;}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 507 "feiparser.l"
{return token::sanisand2008_m;}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 508 "feiparser.l"
{return token::sanisand2008_h0;}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 509 "feiparser.l"
{return token::sanisand2008_ch;}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 510 "feiparser.l"
{return token::sanisand2008_nb;}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 511 "feiparser.l"
{return token::sanisand2008_A0;}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 512 "feiparser.l"
{return token::sanisand2008_nd;}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 513 "feiparser.l"
{return token::sanisand2008_p_r;}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 514 "feiparser.l"
{return token::sanisand2008_rho_c;}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 515 "feiparser.l"
{return token::sanisand2008_theta_c;}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 516 "feiparser.l"
{return token::sanisand2008_X;}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 517 "feiparser.l"
{return token::sanisand2008_z_max;}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 518 "feiparser.l"
{return token::sanisand2008_cz;}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 519 "feiparser.l"
{return token::sanisand2008_p0;}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 520 "feiparser.l"
{return token::sanisand2008_p_in;}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 521 "feiparser.l"
{return token::yield_strength;}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 522 "feiparser.l"
{return token::strain_hardening_ratio;}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 523 "feiparser.l"
{return token::a2;}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 524 "feiparser.l"
{return token::a3;}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 525 "feiparser.l"
{return token::a4;}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 526 "feiparser.l"
{return token::R0;}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 527 "feiparser.l"
{return token::cR1;}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 528 "feiparser.l"
{return token::cR2;}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 529 "feiparser.l"
{return token::compressive_strength;}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 530 "feiparser.l"
{return token::strain_at_compressive_strength;}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 531 "feiparser.l"
{return token::crushing_strength;}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 532 "feiparser.l"
{return token::strain_at_crushing_strength;}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 533 "feiparser.l"
{return token::tensile_strength;}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 534 "feiparser.l"
{return token::tension_softening_stiffness;}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 535 "feiparser.l"
{return token::sanisand2004_Pat;}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 536 "feiparser.l"
{return token::sanisand2004_G0;}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 537 "feiparser.l"
{return token::sanisand2004_p_cut;}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 538 "feiparser.l"
{return token::sanisand2004_Mc;}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 539 "feiparser.l"
{return token::sanisand2004_c;}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 540 "feiparser.l"
{return token::sanisand2004_lambda_c;}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 541 "feiparser.l"
{return token::sanisand2004_xi;}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 542 "feiparser.l"
{return token::sanisand2004_ec_ref;}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 543 "feiparser.l"
{return token::sanisand2004_m;}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 544 "feiparser.l"
{return token::sanisand2004_h0;}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 545 "feiparser.l"
{return token::sanisand2004_ch;}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 546 "feiparser.l"
{return token::sanisand2004_nb;}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 547 "feiparser.l"
{return token::sanisand2004_A0;}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 548 "feiparser.l"
{return token::sanisand2004_nd;}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 549 "feiparser.l"
{return token::sanisand2004_z_max;}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 550 "feiparser.l"
{return token::sanisand2004_cz;}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 551 "feiparser.l"
{return token::strain_increment_size;}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 552 "feiparser.l"
{return token::maximum_strain;}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 553 "feiparser.l"
{return token::number_of_times_reaching_maximum_strain;}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 554 "feiparser.l"
{return token::CONSTITUTIVE;}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 555 "feiparser.l"
{return token::testing;}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 556 "feiparser.l"
{return token::constant;}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 557 "feiparser.l"
{return token::mean;}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 558 "feiparser.l"
{return token::triaxial;}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 559 "feiparser.l"
{return token::drained;}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 560 "feiparser.l"
{return token::undrained;}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 561 "feiparser.l"
{return token::simple;}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 562 "feiparser.l"
{return token::shear;}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 563 "feiparser.l"
{return token::number_of_subincrements;}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 564 "feiparser.l"
{return token::maximum_number_of_iterations;}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 565 "feiparser.l"
{return token::tolerance_1;}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 566 "feiparser.l"
{return token::tolerance_2;}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 567 "feiparser.l"
{return token::Gauss;}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 568 "feiparser.l"
{return token::each;}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 569 "feiparser.l"
{return token::points;}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 570 "feiparser.l"
{return token::point;}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 571 "feiparser.l"
{return token::single;}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 572 "feiparser.l"
{return token::value;}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 573 "feiparser.l"
{return token::Niso3d_K;}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 574 "feiparser.l"
{return token::Niso3d_Kur;}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 575 "feiparser.l"
{return token::Niso3d_n;}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 576 "feiparser.l"
{return token::Niso3d_c;}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 577 "feiparser.l"
{return token::Niso3d_phi0;}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 578 "feiparser.l"
{return token::Niso3d_dphi;}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 579 "feiparser.l"
{return token::Niso3d_Rf;}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 580 "feiparser.l"
{return token::Niso3d_K0;}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 581 "feiparser.l"
{return token::Niso3d_Kb;}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 582 "feiparser.l"
{return token::Niso3d_m;}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 583 "feiparser.l"
{return token::Niso3d_pa;}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 584 "feiparser.l"
{return token::Niso3d_K2;}
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 585 "feiparser.l"
{return token::Niso3d_B;}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 586 "feiparser.l"
{return token::Niso3d_Et;}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 587 "feiparser.l"
{return token::Niso3d_Ei;}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 588 "feiparser.l"
{return token::Niso3d_Er;}
	YY_BREAK
/* Pisano Model options  */
case 333:
YY_RULE_SETUP
#line 592 "feiparser.l"
{return token::M_in;}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 593 "feiparser.l"
{return token::kd_in;}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 594 "feiparser.l"
{return token::xi_in;}
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 595 "feiparser.l"
{return token::h_in;}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 596 "feiparser.l"
{return token::m_in;}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 597 "feiparser.l"
{return token::beta_min;}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 598 "feiparser.l"
{return token::n_in;}
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 599 "feiparser.l"
{return token::a_in;}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 600 "feiparser.l"
{return token::elastic_modulus_1atm;}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 601 "feiparser.l"
{return token::eplcum_cr_in;}
	YY_BREAK
/* Load options */
case 343:
#line 605 "feiparser.l"
case 344:
#line 606 "feiparser.l"
case 345:
#line 607 "feiparser.l"
case 346:
#line 608 "feiparser.l"
case 347:
#line 609 "feiparser.l"
case 348:
#line 610 "feiparser.l"
case 349:
#line 611 "feiparser.l"
case 350:
#line 612 "feiparser.l"
case 351:
YY_RULE_SETUP
#line 612 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::FORCE;
									}
	YY_BREAK
/* Acceleration field options*/
case 352:
YY_RULE_SETUP
#line 618 "feiparser.l"
{return token::ax;}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 619 "feiparser.l"
{return token::ay;}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 620 "feiparser.l"
{return token::az;}
	YY_BREAK
/* Time-History types */
case 355:
YY_RULE_SETUP
#line 623 "feiparser.l"
{return token::TH_PATH_SERIES;}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 624 "feiparser.l"
{return token::TH_PATH_TIME_SERIES;}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 625 "feiparser.l"
{return token::TH_LINEAR;}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 626 "feiparser.l"
{return token::TH_FROM_REACTIONS;}
	YY_BREAK
/* Element load types */
case 359:
YY_RULE_SETUP
#line 629 "feiparser.l"
{return token::self_weight;}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 630 "feiparser.l"
{return token::surface;}
	YY_BREAK
/* Time-History options */
case 361:
YY_RULE_SETUP
#line 633 "feiparser.l"
{return token::startTime;}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 634 "feiparser.l"
{return token::endTime;}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 635 "feiparser.l"
{return token::Period;}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 636 "feiparser.l"
{return token::Phase;}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 637 "feiparser.l"
{return token::Amplitude;}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 638 "feiparser.l"
{return token::frequency;}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 639 "feiparser.l"
{return token::frequency1;}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 640 "feiparser.l"
{return token::frequency2;}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 641 "feiparser.l"
{return token::frequency3;}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 642 "feiparser.l"
{return token::frequency4;}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 643 "feiparser.l"
{return token::MaxTime;}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 644 "feiparser.l"
{return token::MAGNITUDES;}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 645 "feiparser.l"
{return token::MAGNITUDE;}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 646 "feiparser.l"
{return token::initial_velocity;}
	YY_BREAK
/* Mass options */
case 375:
YY_RULE_SETUP
#line 649 "feiparser.l"
{return token::mx;}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 650 "feiparser.l"
{return token::my;}
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 651 "feiparser.l"
{return token::mz;}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 652 "feiparser.l"
{return token::Imx;}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 653 "feiparser.l"
{return token::Imy;}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 654 "feiparser.l"
{return token::Imz;}
	YY_BREAK
/* Damping model types */
case 381:
YY_RULE_SETUP
#line 657 "feiparser.l"
{return token::DAMPING_RAYLEIGH;}
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 658 "feiparser.l"
{return token::DAMPING_CAUGHEY3;}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 659 "feiparser.l"
{return token::DAMPING_CAUGHEY4;}
	YY_BREAK
/* Damping model options */
case 384:
YY_RULE_SETUP
#line 662 "feiparser.l"
{return token::a0;}
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 663 "feiparser.l"
{return token::a1;}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 664 "feiparser.l"
{return token::stiffness_to_use;}
	YY_BREAK
case 387:
#line 666 "feiparser.l"
case 388:
#line 667 "feiparser.l"
case 389:
YY_RULE_SETUP
#line 667 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::stiffness_to_use_opt;
									}
	YY_BREAK
/* Constraint types */
case 390:
YY_RULE_SETUP
#line 673 "feiparser.l"
{return token::equaldof;}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 674 "feiparser.l"
{return token::equaldof;}
	YY_BREAK
/* Constraint options */
case 392:
YY_RULE_SETUP
#line 677 "feiparser.l"
{return token::master;}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 678 "feiparser.l"
{return token::slave;}
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 679 "feiparser.l"
{return token::dof_to_constrain;}
	YY_BREAK
/* DRM OPtions */
case 395:
YY_RULE_SETUP
#line 682 "feiparser.l"
{return token::scale_factor;}
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 683 "feiparser.l"
{return token::displacement_scale_unit;}
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 684 "feiparser.l"
{return token::velocity_scale_unit;}
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 685 "feiparser.l"
{return token::acceleration_scale_unit;}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 686 "feiparser.l"
{return token::number_of_steps;}
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 687 "feiparser.l"
{return token::number_of_boundary_nodes;}
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 688 "feiparser.l"
{return token::number_of_exterior_nodes;}
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 689 "feiparser.l"
{return token::number_of_drm_elements;}
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 690 "feiparser.l"
{return token::element_file;}
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 691 "feiparser.l"
{return token::boundary_nodes_file;}
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 692 "feiparser.l"
{return token::exterior_nodes_file;}
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 693 "feiparser.l"
{return token::displacement_file;}
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 694 "feiparser.l"
{return token::acceleration_file;}
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 695 "feiparser.l"
{return token::hdf5_file;}
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 696 "feiparser.l"
{return token::velocity_file;}
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 697 "feiparser.l"
{return token::force_file;}
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 698 "feiparser.l"
{return token::series_file;}
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 699 "feiparser.l"
{return token::time_series_file;}
	YY_BREAK
/* ================================================================================================= */
/* ========                     DEFINE                                                     ========= */
/* ================================================================================================= */
/* Defineable things */
case 413:
YY_RULE_SETUP
#line 707 "feiparser.l"
{return token::ALGORITHM;}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 708 "feiparser.l"
{return token::CONVERGENCE_TEST;}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 709 "feiparser.l"
{return token::INTEGRATION;}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 710 "feiparser.l"
{return token::SOLVER;}
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 711 "feiparser.l"
{return token::DYNAMICINTEGRATOR;}
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 712 "feiparser.l"
{return token::STATICINTEGRATOR;}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 713 "feiparser.l"
{return token::OUTPUT;}
	YY_BREAK
/* Constitutive algorithm options*/
case 420:
#line 717 "feiparser.l"
case 421:
#line 718 "feiparser.l"
case 422:
#line 719 "feiparser.l"
case 423:
#line 720 "feiparser.l"
case 424:
#line 721 "feiparser.l"
case 425:
#line 722 "feiparser.l"
case 426:
#line 723 "feiparser.l"
case 427:
#line 724 "feiparser.l"
case 428:
YY_RULE_SETUP
#line 724 "feiparser.l"
{yylval->ident = new string(yytext); return token::CONSTITUTIVE_ALGNAME;}
	YY_BREAK
/* Algorithm options*/
case 429:
#line 728 "feiparser.l"
case 430:
#line 729 "feiparser.l"
case 431:
#line 730 "feiparser.l"
case 432:
#line 731 "feiparser.l"
case 433:
#line 732 "feiparser.l"
case 434:
#line 733 "feiparser.l"
case 435:
YY_RULE_SETUP
#line 733 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::ALGNAME;
									 }
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 738 "feiparser.l"
{return token::yield_function_relative_tolerance;}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 739 "feiparser.l"
{return token::stress_relative_tolerance;}
	YY_BREAK
/* Test options */
case 438:
#line 743 "feiparser.l"
case 439:
#line 744 "feiparser.l"
case 440:
#line 745 "feiparser.l"
case 441:
#line 746 "feiparser.l"
case 442:
#line 747 "feiparser.l"
case 443:
YY_RULE_SETUP
#line 747 "feiparser.l"
{
										        yylval->ident = new string(yytext);
										        return token::TESTNAME;
									         }
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 751 "feiparser.l"
{return token::tolerance;}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 752 "feiparser.l"
{return token::maximum_iterations;}
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 753 "feiparser.l"
{return token::verbose_level;}
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 754 "feiparser.l"
{return token::minimum_time_step;}
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 755 "feiparser.l"
{return token::maximum_time_step;}
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 756 "feiparser.l"
{return token::number_of_iterations;}
	YY_BREAK
/* define solver options */
case 450:
#line 760 "feiparser.l"
case 451:
#line 761 "feiparser.l"
case 452:
#line 762 "feiparser.l"
case 453:
#line 763 "feiparser.l"
case 454:
YY_RULE_SETUP
#line 763 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::SOLVERNAME;
									}
	YY_BREAK
/* define static and dynamic integrator options */
case 455:
YY_RULE_SETUP
#line 769 "feiparser.l"
{return token::DYNAMICINTEGRATOR_NEWMARK;}
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 770 "feiparser.l"
{return token::DYNAMICINTEGRATOR_HHT;}
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 771 "feiparser.l"
{return token::STATICINTEGRATOR_DISPLACEMENT;}
	YY_BREAK
/* SIMULATE*/
case 458:
YY_RULE_SETUP
#line 775 "feiparser.l"
{return token::STATIC;}
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 776 "feiparser.l"
{return token::DYNAMIC;}
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 777 "feiparser.l"
{return token::TRANSIENT;}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 778 "feiparser.l"
{return token::VARIABLETRANSIENT;}
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 779 "feiparser.l"
{return token::EIGEN;}
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 780 "feiparser.l"
{return token::USING;}
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 781 "feiparser.l"
{return token::time_step;}
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 782 "feiparser.l"
{return token::number_of_modes;}
	YY_BREAK
/* OUTPUT */
case 466:
YY_RULE_SETUP
#line 785 "feiparser.l"
{return token::BINARY;}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 786 "feiparser.l"
{return token::TEXT;}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 787 "feiparser.l"
{return token::ENABLE;}
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 788 "feiparser.l"
{return token::DISABLE;}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 789 "feiparser.l"
{return token::COMPRESSION;}
	YY_BREAK
/* ================================================================================================= */
/* ========                    AUXILLIARY WORDS                                            ========= */
/* ================================================================================================= */
case 471:
YY_RULE_SETUP
#line 796 "feiparser.l"
{return token::AT;}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 797 "feiparser.l"
{return token::ALL;}
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 798 "feiparser.l"
{return token::AND;}
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 799 "feiparser.l"
{return token::TEXTDOFS;}
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 800 "feiparser.l"
{return token::FACTOR;}
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 801 "feiparser.l"
{return token::INCREMENT;}
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 802 "feiparser.l"
{return token::NAME;}
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 803 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 804 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 805 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 806 "feiparser.l"
{return token::of;}
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 807 "feiparser.l"
{return token::STEPS;}
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 808 "feiparser.l"
{return token::TO;}
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 809 "feiparser.l"
{return token::TYPE;}
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 810 "feiparser.l"
{return token::USE;}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 811 "feiparser.l"
{return token::WITH;}
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 812 "feiparser.l"
{return token::NODES;}
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 813 "feiparser.l"
{return token::DOMAIN_;}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 814 "feiparser.l"
{return token::dof;}
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 815 "feiparser.l"
{return token::RESPONSE;}
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 816 "feiparser.l"
{return token::FILE;}
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 817 "feiparser.l"
{return token::FROM;}
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 818 "feiparser.l"
{return token::EVERY;}
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 819 "feiparser.l"
{return token::LEVEL;}
	YY_BREAK
/* Greek */
case 495:
YY_RULE_SETUP
#line 822 "feiparser.l"
{return token::alpha;}
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 823 "feiparser.l"
{return token::beta;}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 824 "feiparser.l"
{return token::gamma;}
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 825 "feiparser.l"
{return token::lambda;}
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 826 "feiparser.l"
{return token::kappa;}
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 827 "feiparser.l"
{return token::delta;}
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 830 "feiparser.l"
{return token::INTEGRATIONPOINTS;}
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 831 "feiparser.l"
{return token::IntegrationRule;}
	YY_BREAK
/* DOFS */
case 503:
#line 836 "feiparser.l"
case 504:
#line 837 "feiparser.l"
case 505:
#line 838 "feiparser.l"
case 506:
#line 839 "feiparser.l"
case 507:
#line 840 "feiparser.l"
case 508:
#line 841 "feiparser.l"
case 509:
#line 842 "feiparser.l"
case 510:
#line 843 "feiparser.l"
case 511:
#line 844 "feiparser.l"
case 512:
YY_RULE_SETUP
#line 844 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::DOF;
									}
	YY_BREAK
/*Other language commands*/
case 513:
#line 851 "feiparser.l"
case 514:
#line 852 "feiparser.l"
case 515:
YY_RULE_SETUP
#line 852 "feiparser.l"
{
									yylval->ident = new string(yytext);
									return token::BYE;
								}
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 856 "feiparser.l"
{void show_einstein(); show_einstein();}
	YY_BREAK
/* ================================================================================================= */
/* ========                     NON KEYWORDS                                               ========= */
/* ================================================================================================= */
/* names */
case 517:
YY_RULE_SETUP
#line 866 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::IDENT;
									}
	YY_BREAK
/*numbers*/
case 518:
#line 873 "feiparser.l"
case 519:
YY_RULE_SETUP
#line 873 "feiparser.l"
{
										yylval->value = new Quantity(atof(yytext), ESSIunits::unitless);
										return token::NUMBER;
									}
	YY_BREAK
/* End-of-file discards current file and returns to the previous, otherwise to the interactive prompt */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IFILE):
case YY_STATE_EOF(COMMENT):
#line 878 "feiparser.l"
{
										if (popfile()==0)
										{
											if(FLAG_interactive_mode == 1)
											{
												newstdin();
												yyrestart(yyin);
												//yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
												prompt = thePrompt;
												//cout << prompt;
											}
											else
											{
												cout << endl << "You forgot to say \"bye\"... " << endl;
												wipe_model();
												exit(0);
											}

										}
										if (strncmp(curfilename, initial, 5) == 0) //I dont like strncmp :(
										{
											prompt = thePrompt;
											//cout << prompt;
										}
										yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
									}
	YY_BREAK
/* comments */
case 520:
YY_RULE_SETUP
#line 906 "feiparser.l"

	YY_BREAK
case 521:
YY_RULE_SETUP
#line 907 "feiparser.l"

	YY_BREAK
/* ignore white space, tabs and carriage return*/
case 522:
YY_RULE_SETUP
#line 911 "feiparser.l"
//{yylloc -> step();}
	YY_BREAK
/* ignore newline*/
/*\n                                  {yylloc -> lines(1);} */
case 523:
/* rule 523 can match eol */
YY_RULE_SETUP
#line 915 "feiparser.l"
{
										yycolumn = 1;
									}
	YY_BREAK
/* Match text strings */
case 524:
/* rule 524 can match eol */
YY_RULE_SETUP
#line 920 "feiparser.l"
{
										std::string* thisString = new std::string(yytext);
										yylval->ident = thisString;
										return token::STRING;
									}
	YY_BREAK
/* catch-all of the rest and report (only useless characters like ? get to this point */
case 525:
YY_RULE_SETUP
#line 927 "feiparser.l"
{ cout << "Failed to parse the character at line " << yylineno << " : " << *yytext << endl; }
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 929 "feiparser.l"
ECHO;
	YY_BREAK
#line 5438 "feiparser.lex.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3439 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3439 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3438);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 929 "feiparser.l"




int newfile(char* fn) {
	FILE *f = fopen(fn, "r");

	bufstack *bs = (bufstack*) malloc(sizeof( bufstack)) ;

	if (!f)     {perror(fn); return 0 ;}
	if (!bs)    {perror("Out of memory."); exit(1);}

	if (curbs) curbs->lineno = yylineno;
	bs->prev = curbs;

	bs->bs = yy_create_buffer(f,YY_BUF_SIZE);
	bs -> f = f;
	bs -> filename = fn;
	bs -> lineno = 1;
	yy_switch_to_buffer(bs->bs);
	curbs = bs;
	yylineno = 1;
	curfilename = fn;

	cout << "Including: \"" << fn << "\"" << endl << endl;

	return 1;
}



int newstdin()
{

	FILE *f = stdin;

	bufstack *bs = (bufstack *) malloc(sizeof( bufstack)) ;


	if (!f)
	{
		perror("Could not open STDIN!");
		return 0 ;
	}
	if (!bs)
	{
		perror("Out of memory.");
		exit(1);
	}

	if (curbs)
	{
		curbs->lineno = yylineno;
	}
	bs->prev = curbs;
	bs->bs = yy_create_buffer(f,YY_BUF_SIZE);
	bs -> f = f;
	bs -> lineno = 1;
	bs -> filename = initial;

	yy_switch_to_buffer(bs->bs);
	curbs = bs;


	yylineno = 1;
	curfilename = initial;

	cout << "Input: STDIN" << endl << endl;
	prompt = thePrompt;
	//cout << prompt ;
	return 1;
}

int popfile(void)
{
	bufstack *bs = curbs;
	bufstack *prevbs;

	if (!bs)
	{
		return 0;
	}

	fclose(bs->f);
	yy_delete_buffer(bs->bs);

	prevbs = bs-> prev;
	free(bs);

	if (!prevbs)
	{
		return 0;
	}

	yy_switch_to_buffer(prevbs->bs);
	curbs = prevbs;

	cout << "Done including: \"" << curfilename << "\" (" << yylineno << " lines included)." << endl;
	cout << "Continuing with \"" << curbs->filename << "\" at line " << curbs->lineno << "." << endl;

	cout << endl << prompt;

	yylineno = curbs->lineno;
	curfilename = curbs->filename;

	return 1;
}

int error_behavior()
{
	//while (popfile() != 0); // Discard everything!

	//Start new interactive mode
	if ( FLAG_interactive_mode == 1 )
	{
		newstdin();
		yyrestart(yyin);

		prompt = thePrompt;
		//if (recovery_mode == 1)
		//    prompt = "(safe) " + thePrompt;
	}
	else
	{
		exit(-1);
	}

	return 0;
}


void print_usage()
{
	cout <<
		 "RealESSI Simulator: UCDavis Earthquake-Soil-Structure-Interaction Simulator \n"
		 "              -          -    -         -                     \n"
		 "Usage: essi [-cfhnsmbe FILENAME]\n"
		 "  -c --cpp-output                : Output cpp version of the analysis done. \n"
		 "  -f --filename [FILENAME]       : Include and run FILENAME. \n"
		 "  -h --help                      : Print this message. \n"
		 "  -n --no-interactive            : Disable interactive mode. \n"
		 "  -s --set-variable              : Set a variable from the command line. \n"
		 "  -d --dry-run                   : Do not execute ESSI API calls. Just parse. \n"
		 "  -m --model-name [NAME]         : Set the model name from the command line. \n"
		 "  -p --profile-report [FILENAME] : Set the filename for the profiler report (and activate lightweight profiling)\n"
		 " \n\n"
		 "Example to set a variable name from command line:\n"
		 "    essi -s a=10,b=20,c=30\n"
		 "Runs ESSI with variables a, b, and c set to 10, 20 and 30 respectively.\n"
		 "At this time, only ESSIunits::unitless variables can be set. \n"
		 "\n\n";

}





#ifdef _PARALLEL_PROCESSING
  #include "../ModifiedOpenSeesServices/domain/domain/partitioned/PartitionedDomain.h"
  #include "../ModifiedOpenSeesServices/graph/partitioner/GraphPartitioner.h"
  #include <../ModifiedOpenSeesServices/actor/objectBroker/FEM_ObjectBroker.h>
  #include <../ModifiedOpenSeesServices/actor/machineBroker/MachineBroker.h>
  #include <../ModifiedOpenSeesServices/actor/machineBroker/MPI_MachineBroker.h>

  extern PartitionedDomain theDomain;
  extern int OPS_PARALLEL_PROCESSING;
  extern int OPS_NUM_SUBDOMAINS;
  extern bool OPS_PARTITIONED;
  extern FEM_ObjectBroker *OPS_OBJECT_BROKER;
  extern MachineBroker  *OPS_MACHINE;
  extern GraphPartitioner  *OPS_GRAPH_PARTITIONER;
  static MPI_MachineBroker *theMachineBroker = 0;
#endif


int start_parser(int argc, char**argv)
{

	//Allegedly, this forces cout to be non-buffered. Always flushes!!
	std::cout<<std::unitbuf; 

	
	//Welcome message
	welcome_msg();

	// Generate previously known units list
	set_known_units();

	//Parse Command Line Parameters
	int c;
	char *filename_from_command_line = 0;

	while (1)
	{
		static struct option long_options[] =
		{
			{"cpp-output",       no_argument,       0, 'c'},
			{"file",             required_argument, 0, 'f'},
			{"help",             no_argument,       0, 'h'},
			{"model-name",       required_argument, 0, 'm'},
			{"no-interactive",   no_argument,       0, 'n'},
			{"set-variable",     required_argument, 0, 's'},
			{"no-cpp-output",    no_argument,       0, 'x'},
			{"dry-run",          no_argument,       0, 'd'},
            {"profile-report",   required_argument, 0, 'p'},
			{"debug-attach",     no_argument      , 0, 'a'},
			{0, 0, 0, 0}
		};

		/* getopt_long stores the option index here. */
		int option_index = 0;

		//This is the command line option parser
		c = getopt_long(argc, argv, "cf:hns:xm:dp:a", long_options, &option_index);

		/* Detect the end of the options. */
		if (c == -1)
		{
			break;
		}

		switch (c)
		{

			case 'c':  // -c --cpp-output: Create .cpp output
				FLAG_generate_cpp_output = 1;
				break;
			case 'f': // -f --file: Take input from file
				filename_from_command_line = optarg;
				FLAG_run_file = 1;
				break;
			case 'h': // -h --help: print usage
				print_usage();
				return (0);
				break;
			case 'n': // -n --no-interactive: disable interactive mode
				FLAG_interactive_mode = 0;
				break;
			case 's': // -s --set-variable: Set a variable from the command line
				set_variables(optarg);
				break;
			case 'x': // -x --no-cpp-output: disable cpp output (default)
				FLAG_generate_cpp_output = 0;
				break;
			case 'd': // -d --dry-run: do not call API... just make parser call and produce cpp output if so enabled
				FLAG_dry_run = 1;
				set_dry_run_mode(FLAG_dry_run);
				break;
			case 'm': // -m --model-name: Set model name from the command line
				set_model_name(optarg);
				break;
			case 'b': //  -b --binary-output: The output generated will be in binary instead of plain text.
				FLAG_binary_output = 1;
				break;
			case 'p': // -p --profile-report: Set the filename for the profiler report (and activate profiling)
				//cout << "Setting report file to:" << optarg << endl;
				set_profiling_results_filename(optarg);
				break;
            case 'a': // Debugger attach loop
                FLAG_debug_attach = 1;
                break;
			default:
				print_usage();
				return (0);
		}
	}

	if (optind < argc)
	{
		cout << "Unexpected option" << endl << endl;
		print_usage();
		return (0);
	}

	if (FLAG_interactive_mode)
	{
		newstdin();
	}

	if (FLAG_run_file)
	{
		newfile(filename_from_command_line);
		set_outcppfile_name(string(filename_from_command_line));
		prompt = "";
	}

    if(FLAG_debug_attach)
    {       
            int i = 0;
            char hostname[256];
            gethostname(hostname, sizeof(hostname));
            printf("PID %d on %s ready for attach\n", getpid(), hostname);
            fflush(stdout);
            while (0 == i)
                sleep(5);
    }

#ifdef _PARALLEL_PROCESSING
	//Kill other processes in case of dry run... parallel is not needed.
	if(FLAG_dry_run)
	{
		theMachineBroker->shutdown();
	}
#endif

	// Parse flag
	int exitflag = -1;

	//Construct a parser object
	yy::feiparser parser;

	// Start parsing!
	cout << prompt;
	exitflag = parser.parse();

	//Exit
	return exitflag;
}




/*  SIGNAL HANDLING  */


void signalHandler(int signum)
{
    #ifdef _PARALLEL_PROCESSING
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    cout << "(" << rank << ") ";
    #endif
	if(signum == SIGINT)
	{
		cout << "Caught SIGINT! Program ending." << endl;
	}
	else if(signum == SIGABRT)
	{
		cout << "Caught SIGABRT! Program ending." << endl;
	}
	else if(signum == SIGSEGV)
	{
		cout << "Caught SIGSEGV! Program ending." << endl;
	}
	else if(signum == SIGTERM)
	{
		cout << "Caught SIGTERM! Program ending." << endl;
	}
	else if(signum == SIGILL)
	{
		cout << "Caught SIGILL! Program ending." << endl;
	}
	else if(signum == SIGFPE)
	{
		cout << "Caught SIGFPE! Program ending." << endl;
        int exceptions;
        exceptions = fetestexcept(FE_INVALID | FE_DIVBYZERO| FE_OVERFLOW);
        if(exceptions & FE_INVALID)
        {
            cout << "   Floating point error -- (FE_INVALID) - Undefined operation (0/0, 0/1, sqrt(-1), inf - int, etc.)\n" << endl;
        }
        if(exceptions & FE_DIVBYZERO)
        {
            cout << "   Floating point error -- (FE_DIVBYZERO) - 0/0\n" << endl;
        }
        if(exceptions & FE_OVERFLOW)
        {
            cout << "   Floating point error -- (FE_OVERFLOW) - Result is larger than the largest representable number at current accuracy. \n" << endl;
        }
        if(exceptions & FE_UNDERFLOW)
        {
            cout << "   Floating point error -- (FE_UNDERFLOW) - Result too small (but not zero) to be represented as a number at current accuracy. \n" << endl;
        }

	}
	else if(signum == SIGUSR1 || signum == SIGUSR2)
	{
		cout << "HDF5 set to flush, please wait...\n\n";
		call_hdf5_flush_next_chance();
		return; // Do not quit on these signals.
	}
    print_stacktrace();
	exit(signum);
}

 /* END SIGNALS */

int main(int argc, char**argv)
{
    //feclearexcept(FE_ALL_EXCEPT);
    //feenableexcept(FE_INVALID   | 
    //FE_DIVBYZERO | 
    //FE_OVERFLOW);

	signal(SIGINT, signalHandler);
	signal(SIGABRT, signalHandler);
	signal(SIGSEGV, signalHandler);
	signal(SIGTERM, signalHandler);
	signal(SIGILL, signalHandler);
	signal(SIGFPE, signalHandler);
	signal(SIGUSR1, signalHandler);
    signal(SIGUSR2, signalHandler);


	int exitflag = -1;

#ifdef _PARALLEL_PROCESSING
	// In parallel processing, a few things have to be setup before starting.

   FEM_ObjectBroker theBroker;
   MPI_MachineBroker theMachine(&theBroker, argc, argv);
   theMachineBroker = &theMachine;
   int rank = theMachine.getPID();
   int np = theMachine.getNP();

   if (rank != 0) //If this is the main machine
   {

		exitflag = theMachine.runActors();
   } 
   else  // Or if it is a slave node
   {
		OPS_OBJECT_BROKER       = &theBroker;
		OPS_MACHINE             = &theMachine;
		OPS_PARALLEL_PROCESSING = np;
		OPS_NUM_SUBDOMAINS      = np - 1;
		OPS_PARTITIONED         = false;

		exitflag = start_parser(argc, argv);
	}

	//this got moved to the wipe_model() API call...... 
	theDomain.clearAll();
	theMachine.shutdown();

	cout << "Process # " << rank << " ended with exitflag = " << exitflag << endl;
#else
	exitflag = start_parser(argc, argv);
#endif


	return exitflag;
}
  


int smaller(int a, int b)
{
	if (a >= b)
	{
		return b;
	}
	else
	{
		return a;
	}
}

// =================================================================================
// Please do not erase! Might make it into the code some day. (Jose Abell)
//
// This code replaces standard input as the main input mechanism, and implements
// a smarter prompt, which has auto replace, code history, etc.
//
// Buggy and unstable as it is. (To make it work, the is a macro that needs to be enabled on top of
// this file)
//
//static int my_yyinput(char *buf, int max_size)
//{
//    int   len;
//
//    if (st_readline_buffer == NULL)
//    {
//        st_readline_used_len = 0;
//        st_readline_buffer = readline(prompt.c_str());
//
//        if (st_readline_buffer == NULL)
//            return 0;
//        else
//        {
//            //strncat(st_readline_buffer, " ", 1);
//        }
//    }
//
//    len = smaller(strlen(st_readline_buffer) - st_readline_used_len, max_size);
//
//    if (len == 0)
//    {
//        strncat(st_readline_buffer, " ", 1);
//        len = 1;
//    }
//
//    strncpy(buf, &st_readline_buffer[st_readline_used_len], len);
//    add_history(st_readline_buffer);
//
//    st_readline_used_len += len;
//    if (st_readline_buffer[st_readline_used_len] == '\0')
//    {
//        free(st_readline_buffer);
//        st_readline_buffer = NULL;
//    }
//
//    return len;
//}
//// =================================================================================

#include <ctime>
void welcome_msg()
{
	time_t rawtime;
	struct tm *timeinfo;
	char timestring[80];
	time ( &rawtime );
	timeinfo = localtime ( &rawtime );
	strftime (timestring, 80, "%b %d %Y at %H:%M:%S", timeinfo);
	cout << "                                                               " << endl;
	cout << "                                                               " << endl;
	cout << "  The Finite Element Interpreter                               " << endl;
	cout << "                                                               " << endl;
	cout << "  Real ESSI                                                  " << endl;
	cout << "  Earthquake Soil Structure Interaction Simulator            " << endl;
	cout << "                                                             " << endl;
	#ifdef _PARALLEL_PROCESSING
	cout << " Parallel processing mode. Main machine!                     " << endl;
	#else
	cout << "  Sequential processing mode.                                " << endl;
	#endif
	cout << "                                                             " << endl;
	cout << "Version : " << VERSION << endl;
	cout << "Compiled: " << __DATE__ << " at " << __TIME__  << endl;
	cout << "Time Now: " << timestring  << endl;
	cout << "                                                               " << endl;
	cout << "Static startup tips:                                           " << endl;
	cout << " * Remember: Every command ends with a semicolon ';'.          " << endl;
	cout << " * Type 'quit;' or 'exit;' to finish.                          " << endl;
	cout << " * Run 'essi -h' to see available command line options.        " << endl;
	cout << "                                                               " << endl;
}

void set_known_units()
{
	//Base units*/
    global_variables["m"] = Quantity(1.0, ESSIunits::m);
    global_variables["kg"] = Quantity(1.0, ESSIunits::kg);
    global_variables["s"] = Quantity(1.0, ESSIunits::s);

    // Length
    global_variables["cm"] = Quantity(1.0, ESSIunits::cm);
    global_variables["mm"] = Quantity(1.0, ESSIunits::mm);
    global_variables["Km"] = Quantity(1.0, ESSIunits::km);

    //Time
    global_variables["Hz"] = Quantity(1.0, ESSIunits::Hz);
    global_variables["ms"] = Quantity(1.0, ESSIunits::ms);
    global_variables["ns"] = Quantity(1.0, ESSIunits::ns);

    //Force
    global_variables["N"] = Quantity(1.0, ESSIunits::N);
    global_variables["kN"] = Quantity(1.0, ESSIunits::kN);

    //Pressure
    global_variables["Pa"] = Quantity(1.0, ESSIunits::Pa);
    global_variables["kPa"] = Quantity(1.0, ESSIunits::kPa);
    global_variables["MPa"] = Quantity(1.0, ESSIunits::MPa);
    global_variables["GPa"] = Quantity(1.0, ESSIunits::GPa);

    //Imperial units
    global_variables["pound"] = Quantity(4.448221615255 , ESSIunits::N);
    global_variables["inch"] = Quantity(0.0254 , ESSIunits::m);
    global_variables["feet"] = Quantity(0.3048 , ESSIunits::m);
    global_variables["yard"] = Quantity(0.9144 , ESSIunits::m);
    global_variables["mile"] = Quantity(1.60935e3 , ESSIunits::m);
    global_variables["psi"] = Quantity(6894.757293178 , ESSIunits::Pa);
	global_variables["ksi"] = Quantity(6894757.293178 , ESSIunits::Pa);
	global_variables["kip"] = Quantity(4448.221615255 , ESSIunits::N);
	
    //Constants
	global_variables["g"] = ESSIunits::g;  // gravitational acceleration on Earth at sea level and 45degrees of latitude
	global_variables["pi"] = Quantity(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986, ESSIunits::unitless); // pi to a useless ammount of significant digits

	// Put these variables in the locked list.... cuz we own this!
	map<string, Quantity>::const_iterator it;
	for (it = global_variables.begin();
			it != global_variables.end();
			it++)
	{
		locked_global_variables.insert(it->first);
	}
}

void set_variables(char *cstring)
{
	string variables(cstring);

	cout << endl << "The following variables are being set from the command line:" << endl << endl;

	while (1)
	{
		size_t i1 = variables.find("=");
		size_t i2 = variables.find(",");

		if (i1 == string::npos)
		{
			break;
		}

		string var_name(variables.substr(0, i1));
		string var_value(variables.substr(i1 + 1, i2 - i1 - 1));

		if (i2 == string::npos)
		{
			variables = "";
		}
		else
		{
			variables = variables.substr(i2 + 1);
		}

		cout << var_name << " = " << var_value << endl;

		double value = boost::lexical_cast<double>(var_value);
		global_variables[var_name] = Quantity(value, ESSIunits::unitless); // :) love boost!
	}
	cout << endl << endl;
}




























void show_einstein()
{

	cout << " "                                                                                 << endl;
	cout << "                    .+~                :xx++::"                                    << endl;
	cout << "                   :`. -          .!!X!~\"?!`~!~!. :-:."                           << endl;
	cout << "                  <             .!!!H\":.~ ::+!~~!!!~ `%X."                        << endl;
	cout << "                  '             ~~!M!!>!!X?!!!!!!!!!!...!~."                       << endl;
	cout << "                              <!:!MM!~:XM!!!!!!.:!..~ !.  `<"                      << endl;
	cout << "                  <: `   :~ .:<~!!M!XXHM!!!X!XXHtMMHHHX!  ~ ~"                     << endl;
	cout << "                ~~~~<' ~!!!:!!!!!XM!!M!!!XHMMMRMSXXX!!!!!!:  <`"                   << endl;
	cout << "                  `<  <::!!!!!X!X?M!!M!!XMMMMXXMMMM?!!!!!!?!:~<"                   << endl;
	cout << "               : '~~~<!!!XMMH!!XMXMXHHXXXXM!!!!MMMMSXXXX!!!!!!!~"                  << endl;
	cout << "            :    ::`~!!!MMMMXXXtMMMMMMMMMMMHX!!!!!!HMMMMMX!!!!!: ~"                << endl;
	cout << "               '~:~!!!!!MMMMMMMMMMMMMMMMMMMMMMXXX!!!M??MMMM!!X!!i:"                << endl;
	cout << "               <~<!!!!!XMMMMMMMMMMMM8M8MMMMM8MMMMMXX!!!!!!!!X!?t?!:"               << endl;
	cout << "               ~:~~!!!!?MMMMMM@M@RMRRR$@@MMRMRMMMMMMXSX!!!XMMMX<?X!"               << endl;
	cout << "             :XX <!!XHMMMM88MM88BR$M$$$$8@8RN88MMMMMMMMHXX?MMMMMX!!!"              << endl;
	cout << "           .:X! <XMSM8M@@$$$$$$$$$$$$$$$$$$$B8R$8MMMMMMMMMMMMMMMMX!X"              << endl;
	cout << "          :!?! !?XMMMMM8$$$$8$$$$$$$$$$$$$$BBR$$MMM@MMMMMMMMMMMMMM!!X"             << endl;
	cout << "        ~<!!~ <!!XMMMB$$$$$$$$$$$$$$$$$$$$$$$$MMR$8MR$MMMMMMMMMMMMM!?!:"           << endl;
	cout << "        :~~~ !:X!XMM8$$$$$$$$$$$$$$$$$$$$$$$RR$$MMMMR8NMMMMMMMMMMMMM<!`-"          << endl;
	cout << "    ~:<!:~`~':!:HMM8N$$$$$$$$$$$$$$$$$$$$$$$$$8MRMM8R$MRMMMMMMMMRMMMX!"            << endl;
	cout << "  !X!``~~   :~XM?SMM$B$$$$$$$$$$$$$$$$$$$$$$BR$$MMM$@R$M$MMMMMM$MMMMX?L"           << endl;
	cout << " X~.      : `!!!MM#$RR$$$$$$$$$$$$$$$$$R$$$$$R$M$MMRRRM8MMMMMMM$$MMMM!?:"          << endl;
	cout << " ! ~ <~  !! !!~`` :!!MR$$$$$$$$$$RMM!?!??RR?#R8$M$MMMRM$RMMMM8MM$MMM!M!:>"         << endl;
	cout << ": ' >!~ '!!  !   .!XMM8$$$$$@$$$R888HMM!!XXHWX$8$RM$MR5$8MMMMR$$@MMM!!!< ~"        << endl;
	cout << "!  ' !  ~!! :!:XXHXMMMR$$$$$$$$$$$$$$$$8$$$$8$$$MMR$M$$$MMMMMM$$$MMM!!!!"          << endl;
	cout << " ~<!!!  !!! !!HMMMMMMMM$$$$$$$$$$$$$$$$$$$$$$$$$$MMM$M$$MM8MMMR$$MMXX!!!!/:`"      << endl;
	cout << "  ~!!!  !!! !XMMMMMMMMMMR$$$$$$$$$$$$R$RRR$$$$$$$MMMM$RM$MM8MM$$$M8MMMX!!!!:"      << endl;
	cout << "  !~ ~  !!~ XMMM%!!!XMMX?M$$$$$$$$B$MMSXXXH?MR$$8MMMM$$@$8$M$B$$$$B$MMMX!!!!"      << endl;
	cout << "  ~!    !! 'XMM?~~!!!MMMX!M$$$$$$MRMMM?!%MMMH!R$MMMMMM$$$MM$8$$$$$$MR@M!!!!!"      << endl;
	cout << "  <>    !!  !Mf x@#\"~!t?M~!$$$$$RMMM?Xb@!~`??MS$M@MMM@RMRMMM$$$$$$RMMMMM!!!!"     << endl;
	cout << "  !    '!~ <!!:!?M   !@!M<XM$$R5M$8MMM$! -XXXMMRMBMMM$RMMM@$R$BR$MMMMXX?!X!!"      << endl;
	cout << "  !    '!  !!X!!!?::xH!HM:MM$RM8M$RHMMMX...XMMMMM$RMMRRMMMMMMM8MMMMMMMMX!!X!"      << endl;
	cout << "  !     ~  !!?:::!!!MXMR~!MMMRMM8MMMMMS!!M?XXMMMMM$$M$M$RMMMM8$RMMMMMMMM%X!!"      << endl;
	cout << "  ~     ~  !~~X!!XHMMM?~ XM$MMMMRMMMMMM@MMMMMMMMMM$8@MMMMMMMMRMMMMM?!MMM%HX!"      << endl;
	cout << "           !!!!XSMMXXMM .MMMMMMMM$$$BB8MMM@MMMMMMMR$RMMMMMMMMMMMMMMMXX!?H!XX"      << endl;
	cout << "           XHXMMMMMMMM!.XMMMMMMMMMR$$$8M$$$$$M@88MMMMMMMMMMMMMMM!XMMMXX!!!XM"      << endl;
	cout << "      ~   <!MMMMMMMMRM:XMMMMMMMMMM8R$$$$$$$$$$$$$$$NMMMMMMMM?!MM!M8MXX!!/t!M"      << endl;
	cout << "      '   ~HMMMMMMMMM~!MM8@8MMM!MM$$8$$$$$$$$$$$$$$8MMMMMMM!!XMMMM$8MR!MX!MM"      << endl;
	cout << "          'MMMMMMMMMM'MM$$$$$MMXMXM$$$$$$$$$$$$$$$$RMMMMMMM!!MMM$$$$MMMMM<!M"      << endl;
	cout << "          'MMMMMMMMM!'MM$$$$$RMMMMMM$$$$$$$$$$$$$$$MMM!MMMX!!MM$$$$$M$$M$M!M"      << endl;
	cout << "           !MMMMMM$M! !MR$$$RMM8$8MXM8$$$$$$$$$$$$NMMM!MMM!!!?MRR$$RXM$$MR!M"      << endl;
	cout << "           !M?XMM$$M.< !MMMMMMSUSRMXM$8R$$$$$$$$$$#$MM!MMM!X!t8$M$MMMHMRMMX$"      << endl;
	cout << "    ,-,   '!!!MM$RMSMX:.?!XMHRR$RM88$$$8M$$$$$R$$$$8MM!MMXMH!M$$RMMMMRNMMX!$"      << endl;
	cout << "   -'`    '!!!MMMMMMMMMM8$RMM8MBMRRMR8RMMM$$$$8$8$$$MMXMMMMM!MR$MM!M?MMMMMM$"      << endl;
	cout << "          'XX!MMMMMMM@RMM$MM@$$BM$$$M8MMMMR$$$$@$$$$MM!MMMMXX$MRM!XH!!??XMMM"      << endl;
	cout << "          `!!!M?MHMMM$RMMMR@$$$$MR@MMMM8MMMM$$$$$$$WMM!MMMM!M$RMM!!.MM!%M?~!"      << endl;
	cout << "           !!!!!!MMMMBMM$$RRMMMR8MMMMMRMMMMM8$$$$$$$MM?MMMM!f#RM~    `~!!!~!"      << endl;
	cout << "           ~!!HX!!~!?MM?MMM??MM?MMMMMMMMMRMMMM$$$$$MMM!MMMM!!"                     << endl;
	cout << "           '!!!MX!:`~~`~~!~~!!!!XM!!!?!?MMMM8$$$$$MMMMXMMM!!"                      << endl;
	cout << "            !!~M@MX.. <!!X!!!!XHMHX!!``!XMMMB$MM$$B$M!MMM!!"                       << endl;
	cout << "            !!!?MRMM!:!XHMHMMMMMMMM!  X!SMMX$$MM$$$RMXMMM~"                        << endl;
	cout << "             !M!MMMM>!XMMMMMMMMXMM!!:!MM$MMMBRM$$$$8MMMM~"                         << endl;
	cout << "             `?H!M$R>'MMMM?MMM!MM6!X!XM$$$MM$MM$$$$MX$f"                           << endl;
	cout << " _______      `MXM$8X MMMMMMM!!MM!!!!XM$$$MM$MM$$$RX@\""                           << endl;
	cout << "/       \\_/|   ~M?$MM !MMMMXM!!MM!!!XMMM$$$8$XM$$RM!`"                            << endl;
	cout << "|Go AGS! _/    !XMMM !MMMMXX!XM!!!HMMMM$$$$RH$$M!~"                                << endl;
	cout << "\\_______/       'M?MM `?MMXMM!XM!XMMMMM$$$$$RM$$#"                                << endl;
	cout << "                 `>MMk ~MMHM!XM!XMMM$$$$$$BRM$M\""                                 << endl;
	cout << "                  ~`?M. !M?MXM!X$$@M$$$$$$RMM#"                                    << endl;
	cout << "                    `!M  !!MM!X8$$$RM$$$$MM#`"                                     << endl;
	cout << "                      !% `~~~X8$$$$8M$$RR#`"                                       << endl;
	cout << "                       !!x:xH$$$$$$$R$R*`"                                         << endl;
	cout << "                        ~!?MMMMRRRM@M#`       -Sushil-"                            << endl;
	cout << "                         `~???MMM?M\"`"                                            << endl;
	cout << "                             ``~~"                                                 << endl;
}


