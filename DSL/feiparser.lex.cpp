#line 2 "feiparser.lex.c"

#line 4 "feiparser.lex.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 458
#define YY_END_OF_BUFFER 459
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2911] =
    {   0,
        0,    0,    0,    0,    0,    0,  459,  457,  454,  455,
      454,    8,  457,  416,    4,   29,   10,   15,    3,    1,
        9,    2,  457,    5,  451,  451,  451,  451,  451,   16,
       24,    7,   23,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,   13,   14,
        6,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  444,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,   11,   30,   12,
       53,   54,  458,    0,    0,    0,  456,    0,  453,   21,
       19,   17,   18,  451,  452,   20,  450,  451,    0,  451,

      451,    0,    0,    0,   28,   25,   26,   27,  449,  449,
      449,  449,  449,  449,  296,  297,  298,  449,  449,  449,
      449,  449,    0,  449,  449,  449,  449,  299,  300,  301,
      449,  415,  449,  243,  449,  449,  441,  442,  443,  449,
       22,  336,  337,  240,  241,  242,  449,  449,  449,  449,
      449,  449,  449,  407,  305,  306,  307,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,   47,
      449,  449,  214,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,   43,  449,   49,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  327,  328,  329,  449,  449,
      449,  449,  417,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  438,  439,  440,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      419,  449,  449,  449,  449,  449,  435,  436,  437,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,   53,    0,  453,  452,  450,    0,    0,  451,    0,
        0,    0,    0,    0,  449,  449,  449,  449,  449,  449,
      449,  330,  331,  332,  449,  449,  137,  136,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

       73,  449,  408,  449,  449,  409,  449,  449,  449,  449,
      449,  449,  449,  447,  244,  245,  449,  449,  449,  449,
      449,   55,  449,  449,  449,  449,  449,  449,  449,  449,
      425,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,   66,  449,  449,   75,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  133,  134,  135,  449,  449,  449,  449,   48,
      449,  449,   71,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,   85,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,   56,  449,  449,  449,  449,  449,  449,
      449,  449,   57,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  421,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,    0,    0,  450,    0,    0,
        0,    0,    0,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  290,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,   61,  449,  449,  449,  449,   62,

       63,  449,  449,  428,  449,  449,   68,  449,  449,  449,
      449,  449,   58,  449,  449,  449,  449,  449,  449,  449,
      449,    0,  410,  449,  449,  449,  449,  285,  449,  449,
      449,  449,   45,  449,  449,  446,  449,   69,  449,  449,
      449,   76,  449,  449,  449,  449,  293,   80,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,   92,  449,  294,  449,   95,  449,  449,
      449,  449,  274,   83,  449,  449,  449,  413,  449,   89,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  445,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,   59,  449,  449,   65,  449,  449,  449,  449,
      449,  449,  449,  449,  449,   60,  449,  449,  406,   44,
      449,  449,  449,  449,  449,  449,  449,  420,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
       81,  422,  449,  449,  449,  449,  449,  449,  449,  449,
      449,    0,    0,    0,    0,    0,    0,  449,  449,  449,
      449,  449,  284,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  427,  449,

      449,   64,  449,  449,  449,  449,  449,   82,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  432,
      449,  449,    0,  449,  449,  449,  449,  401,  449,  449,
      449,  449,  449,    0,  449,  449,   70,  449,  449,  449,
      449,  429,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  431,  291,  449,  449,  449,    0,  449,   67,
      449,  449,  449,  449,  449,  449,  449,   72,  449,  449,
      423,  449,  449,  449,  449,  449,  449,  449,  317,  449,
      287,  449,  449,  449,   79,  449,  449,  449,  449,  449,

      449,  449,  132,  131,  449,    0,  449,  449,  449,  449,
      279,  449,  449,  449,  345,  449,   87,  449,  449,  418,
      449,  449,  449,  449,  449,  449,  449,  449,    0,  449,
      449,  449,  449,  449,  125,  449,  449,  449,  402,  289,
      449,  449,  449,  449,  449,  449,   46,  449,  354,  355,
      292,  449,  356,  357,  449,  358,  359,    0,    0,    0,
        0,    0,    0,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  379,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  405,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,   74,  449,  449,    0,  424,
      449,  449,  449,  449,  449,  449,  449,    0,  449,    0,
      449,  411,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,   35,  449,  449,  449,  449,  449,   32,
      449,   34,  449,  449,  449,  449,  449,  430,  310,    0,
        0,  449,  449,  449,  344,  449,  449,  449,  449,  449,
      378,  449,  449,  414,  373,  449,  449,  449,  449,  316,
      182,  286,  449,  449,  449,  449,  449,   77,  449,  449,
      449,  449,  449,    0,  449,  449,  449,  449,  449,  278,
      449,  288,  370,  449,  397,  449,  200,  201,  449,  449,

      449,  449,  449,  449,    0,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,    0,    0,    0,    0,    0,    0,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  394,
      449,  449,  449,  449,  393,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  168,  449,  449,  449,  449,
      128,  449,  202,  449,  449,  449,  449,   97,  449,  449,
        0,    0,  276,  449,  398,  449,  449,   90,  449,    0,
      449,    0,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,   37,  449,  449,

      449,  449,  449,  449,  449,  449,  449,    0,    0,   86,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  126,  449,  449,  449,  449,  449,  449,
       84,  449,   88,  449,  449,    0,  449,  100,  449,  449,
      449,  449,  449,    0,  449,  449,  313,  449,  449,  449,
      272,  449,    0,  449,  449,  449,  449,  449,  449,  392,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,    0,    0,    0,    0,    0,    0,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  333,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  295,  449,  449,  273,  449,  449,  449,   51,
      449,  449,  449,  449,  449,  449,    0,    0,  449,    0,
      449,  449,  449,  315,    0,  343,    0,  203,  449,  449,
      449,  449,  204,    0,    0,   52,  449,  449,  449,  449,
      449,  449,   38,   33,  449,   39,   36,  449,  449,  449,
      449,  449,    0,    0,  449,  449,   91,  324,  449,  449,
      449,  449,  449,  449,  391,  449,  449,    0,  449,  185,
      449,  130,  138,  449,  449,  426,    0,  449,    0,  449,
      449,  449,  449,   78,  449,    0,  449,  449,  449,  449,
      449,  449,  449,  449,    0,  449,  449,  449,  449,  449,

      275,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,    0,    0,    0,    0,    0,  449,  449,  449,
      449,  449,  302,  303,  304,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  368,  318,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  148,  449,    0,    0,  449,    0,  448,  449,
      449,  342,    0,  449,  319,  449,  449,    0,  412,  449,
      449,  449,  449,  449,  449,  449,  449,   42,  449,  449,
      449,  449,  449,  449,    0,    0,  326,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,    0,  449,  449,  449,  449,  449,    0,  449,    0,
      449,  449,  449,  449,  449,    0,  149,  449,  449,  449,
      449,  449,  449,  157,    0,  449,  403,  383,  449,  399,
      277,  449,    0,  449,  449,  449,  449,  449,  449,  449,
      449,  449,    0,    0,    0,    0,  106,  334,  335,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      389,  449,  449,  449,  449,  449,  449,  143,  142,  449,
      449,  449,   98,  449,  449,  449,  449,  449,  449,    0,
        0,  449,    0,  449,  449,    0,  365,  320,  321,  322,
      323,  449,  449,    0,  449,  449,  449,  449,  449,  449,

      449,  449,   40,  449,  449,  449,  449,  449,    0,  103,
      325,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      361,  449,  449,  449,  449,    0,  449,  449,  449,  390,
      449,    0,  449,    0,  449,  449,  449,  449,  314,    0,
      449,  449,  449,  449,  449,  449,  449,    0,  449,  449,
      141,  449,  449,  449,    0,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  108,  109,
        0,    0,    0,    0,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

        0,    0,  449,    0,  449,  449,    0,  449,  449,    0,
      449,  449,  449,  449,  449,  449,  449,   41,  449,  449,
      449,  449,  449,    0,  449,  153,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  308,
      449,    0,  449,  449,  449,  449,    0,  449,  104,  449,
      312,  366,  449,    0,  449,  449,  449,  449,  449,  449,
      449,    0,  449,  282,  283,  449,  449,  449,    0,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,    0,    0,    0,    0,    0,    0,    0,  107,
        0,    0,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  118,  449,
      449,  271,  449,    0,  449,  449,  449,  449,    0,    0,
      449,    0,  449,  360,    0,  449,  449,    0,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      101,  144,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,    0,  449,  449,
      449,  449,    0,  170,  167,  347,  449,    0,  449,  449,
      449,  449,  449,  449,  449,  449,   94,  449,  449,  449,
      449,    0,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,    0,    0,  110,    0,    0,

        0,    0,    0,    0,  115,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,    0,  449,  449,
      449,  449,  449,  449,  449,  449,    0,  449,  139,  449,
      449,    0,    0,  449,    0,  449,    0,  449,  449,    0,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,    0,  449,  190,
      449,  449,    0,  449,  449,  140,    0,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,    0,
      449,  364,  449,  385,  449,  449,  449,  449,  449,  449,

      449,  449,  449,    0,    0,    0,    0,    0,    0,    0,
        0,  114,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  381,  449,    0,  449,  449,  449,  449,  449,
      449,  449,  449,  449,    0,  449,  449,  449,  449,  449,
        0,    0,  449,    0,  449,   50,  152,  311,   96,  449,
      449,  449,  449,  449,  449,   31,  449,  146,  147,  449,
      449,  449,  449,  269,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,    0,  449,  449,  449,
      449,  105,  449,  449,  449,  449,  256,  449,  449,  449,
      260,  449,  449,  449,  449,  449,  449,  449,  449,  233,

      449,  220,  449,  449,  449,  449,  224,  449,  449,  449,
      449,  449,  449,  449,    0,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,    0,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  238,    0,
      116,    0,    0,    0,    0,    0,    0,  449,  449,  449,
      449,  449,  434,  449,  449,  376,  449,  449,    0,  449,
      449,  449,  449,  449,  449,  449,  449,  449,    0,  449,
      449,  449,  449,  449,    0,    0,  449,  449,  449,  449,
        0,  186,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  377,  449,  449,  449,

      449,  404,  351,  449,  449,  449,    0,  449,  449,  449,
      449,  264,  253,  255,  449,  262,  267,  449,  261,  449,
      263,  265,  449,  258,  449,  228,  218,  217,  449,  449,
      226,  235,  449,  225,  449,  449,  227,  229,  236,  449,
      449,  449,  221,  449,  449,    0,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,    0,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  145,    0,
        0,  123,  124,  121,    0,    0,  449,  449,  382,  449,
      449,  449,  449,  449,  449,    0,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  369,  449,  449,  449,  449,

      449,  346,    0,  449,  449,  449,  449,    0,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  150,  449,  449,  449,  449,  449,
      309,    0,  449,  449,  449,  449,  252,  449,  449,  449,
      449,  215,  449,  449,  216,  449,  449,  230,  449,  449,
      449,  449,    0,  338,  449,  449,  449,  449,  449,  250,
      449,  367,  449,  178,  179,  180,    0,  449,  449,  449,
      194,  449,  449,  449,  449,  449,    0,    0,    0,    0,
      340,  449,  449,  339,  449,  449,  449,  449,    0,  363,
      449,  449,  119,  449,  449,  449,  449,  449,  449,  248,

      449,  362,  449,    0,  449,  449,  449,  449,    0,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  387,  449,  386,  449,  449,  449,  449,
      449,    0,  449,  192,  191,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  237,  449,  449,  449,  193,  372,
      449,  449,  449,  449,  449,  449,  449,    0,  449,  449,
      449,  449,  449,  449,  449,  449,    0,    0,    0,  111,
      449,  449,  449,  449,  449,  449,   93,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,    0,  449,  449,
      449,  449,  371,  449,  449,  449,  449,  449,  449,  207,

      433,  449,  449,  449,  449,  384,  449,  449,  449,  449,
      449,  449,  449,    0,  449,  449,  449,  449,  449,  254,
      266,  449,  449,  449,  231,  449,  234,  449,  449,  449,
      449,  449,  449,  449,  400,  449,  449,  449,  449,  449,
      449,  449,  449,  112,  113,  122,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  169,  449,  449,  449,
      449,  449,    0,  195,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      352,  449,  449,  449,    0,  449,  449,  449,  259,  449,
      449,  223,  222,  449,  449,  449,  449,  449,  449,  449,

      181,  449,  349,  449,  449,  449,  449,  449,  449,  449,
      395,  449,  155,  449,  449,  449,  449,  449,  449,  246,
      154,  449,  396,  449,    0,  449,  449,  449,  449,  449,
      209,  449,  449,  449,  449,  449,  449,  449,  449,  212,
      449,  388,  449,  449,  102,  449,  449,  210,  449,  449,
      232,  449,  449,  449,  449,  151,  449,  449,  189,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,    0,  449,  449,  449,  449,
      449,  449,  213,  208,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  199,  257,  219,  449,  449,  449,  268,

      449,  449,  449,  449,  449,  449,  449,  156,  449,  449,
      449,  449,  197,  196,  449,  449,  449,  449,    0,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      353,  449,  449,  449,  449,  449,  239,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  350,  117,  449,
      211,  348,   99,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  280,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  341,  449,  449,  120,
      449,  449,  449,  449,  188,  198,  205,  206,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  374,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  375,  449,  449,  449,  449,  187,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  159,
      380,  449,  449,  449,  449,  158,  449,  449,  449,  449,
      249,  251,  129,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  281,  449,  449,  449,  161,  163,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  184,  449,  449,  449,  449,  449,  183,  449,
      449,  247,  449,  449,  449,  449,  449,  449,  175,  177,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  171,  173,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      164,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  160,  449,
      449,  449,  270,  449,  449,  449,  449,  449,  449,  449,
      449,  162,  165,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  176,  449,  449,  449,

      449,  449,  449,  172,  174,  127,  449,  449,  166,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   24,   25,   26,   27,    1,   28,   29,
       30,   31,    1,    1,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       46,   48,   49,   50,   51,   52,   53,   54,   46,   46,
       55,   56,   57,   58,   59,    1,   60,   61,   62,   63,

       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   85,   86,   87,   88,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[89] =
    {   0,
        1,    2,    3,    1,    2,    1,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    1,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2918] =
    {   0,
        0,    0,   87,   93,    0,    0, 3139, 3140,   97, 3140,
     3140, 3140,   84, 3132, 3107, 3140, 3140, 3140, 3106, 3105,
     3140, 3104,   84,   83,   95,  122,  147,  174,  201, 3140,
       93, 3103, 3102,    0,   70,   54,   69, 3071, 3062,   60,
     3070,  119,  170,   87, 3051,   74,   53, 3059, 3140, 3140,
     3096,  247,   92,  183,  211,  213,  223, 3065,   98,  112,
     3050,  144,  188,  253,  218,   98,  275, 3043,  223,  286,
      303,  300,  287,  113,  174,  146, 3063, 3140, 3140, 3140,
        0, 3140, 3140,  204, 3048,  180, 3140, 3117,    0, 3140,
     3140, 3140, 3140,  369,    0, 3140,  387,  405,  423,  435,

      462, 3045, 3044, 3043, 3140, 3140, 3140, 3140,    0, 3036,
     3038, 3054, 3049, 3047,    0,    0,    0, 3031, 3039,  132,
      134,  110,  267, 3031, 3040, 3035, 3043,    0,    0,    0,
     3023, 3027, 3029,    0, 3018, 3064,    0,    0,    0, 3021,
     3140,    0,    0,    0,    0,    0,  177, 3036,  174, 3023,
     3034, 3024, 3027, 3034,    0,    0,    0,  220, 3020, 3028,
      243, 3019, 3022, 3025,  256,  301, 3016,   64,  199,  117,
      181, 3014,    0, 3024,  238,  280, 3022, 3004,  247,  240,
     3000, 3008, 3004,  300, 3008, 3011, 3007,    0, 3002,  336,
      458, 3008,  316, 3000, 3015, 3000, 3000, 2992, 2997,  316,

     3001,  387,  281, 2995, 3004,    0,    0,    0, 2994, 2983,
      339, 2992,    0, 2984,  226,  344, 3002, 2983,  395,  400,
     2992,  439, 2985,    0,    0,    0,  394, 2998,  435, 2993,
      346, 2996, 2984, 2977,  432, 2976, 2979,  440,  370, 2979,
      326,  454, 2975, 2984,  167,  372,    0,    0,    0,  448,
      450, 2970, 2974,  456, 2967, 2973, 2985, 2984, 2970, 2977,
     2968,    0, 2977,    0,    0,  516,  534,  543,  552, 2964,
     2963, 2973, 2972, 2971, 2967, 2955, 2953, 2953, 2958, 2950,
     2966,    0,    0,    0, 2947, 2961,    0,    0, 2945, 2950,
     2961, 2953,  307, 2948, 2954, 2947, 2970, 2949, 2951, 2936,

        0, 2939,    0, 2945, 2940,    0, 2932, 2936, 2935, 2935,
     2943, 2945, 2944,    0,    0,    0, 2941, 2931, 2939, 2925,
      450, 2932, 2919, 2919, 2918, 2920, 2926, 2914, 2928, 2916,
      468, 2930, 2921, 2926, 2927, 2919, 2921, 2906, 2905, 2910,
     2917, 2921, 2919, 2899, 2906, 2898, 2896,    0, 2900, 2911,
      269, 2910, 2899, 2898, 2896, 2893,  473,  474, 2888, 2902,
      518, 2891, 2900, 2890, 2888, 2897, 2900, 2882,  514, 2884,
     2878, 2883,    0,    0,    0, 2880, 2886, 2889, 2891,    0,
     2887, 2887, 2929, 2875, 2874,  398, 2882,  524, 2872, 2877,
     2875,  452, 2878, 2862, 2876, 2867, 2877, 2862, 2876, 2868,

     2874, 2865, 2854, 2871,  511, 2856, 2851, 2855, 2862, 2847,
     2861, 2850, 2843,  511, 2863, 2853, 2856, 2848, 2839, 2852,
     2848, 2855,  516,  527, 2833, 2832, 2833,  521, 2836, 2845,
      537, 2844,  536, 2830, 2828, 2827, 2832, 2842, 2839, 2838,
     2823, 2827, 2839, 2820, 2833, 2821, 2818, 2834,    0, 2820,
     2812, 2823, 2816, 2828, 2826,  540, 2816, 2808, 2818,  545,
     2816, 2808,  546, 2811,  547, 2810,  597,  606, 2817, 2816,
     2814, 2813, 2812, 2808, 2810, 2794, 2806, 2791, 2792, 2805,
     2800, 2801, 2807,    0, 2788, 2799, 2803, 2788, 2802, 2792,
     2795, 2798, 2798, 2785,    0, 2778, 2794, 2785, 2773,    0,

     2830, 2791, 2781, 2789, 2770, 2775,    0, 2775, 2767, 2764,
      574, 2778,    0, 2773, 2762, 2772, 2770, 2764, 2776, 2773,
     2763, 2754,    0, 2764, 2758, 2760, 2757,    0, 2755, 2748,
     2747, 2761,    0, 2745, 2752, 2817, 2753,    0, 2746, 2742,
     2754,    0, 2737, 2737, 2756, 2754,    0,    0, 2745, 2734,
     2731, 2746, 2741, 2742, 2739, 2742, 2742, 2731, 2739, 2725,
     2728, 2722, 2735, 2726, 2720, 2725, 2718, 2715, 2733, 2719,
     2719, 2727, 2729,  580, 2769,    0, 2719, 2727, 2721, 2707,
     2704, 2710,    0,    0, 2709, 2709, 2714,    0, 2704, 2699,
     2716, 2711, 2694, 2702, 2713, 2700, 2696, 2705, 2695, 2688,

     2688, 2687, 2686, 2684, 2694,    0, 2684, 2679, 2691, 2684,
      575,  572, 2679, 2751, 2691, 2686, 2694, 2688, 2674, 2679,
     2678, 2677,    0, 2683, 2682,    0, 2681, 2665, 2675, 2664,
     2676, 2672, 2661, 2678, 2673,    0, 2668, 2667,    0,    0,
     2664,  599, 2656, 2664, 2653, 2647, 2651,    0, 2668, 2667,
     2643, 2659, 2660, 2663, 2660, 2647, 2646, 2647, 2650, 2653,
        0, 2657, 2632, 2641, 2640, 2641, 2628, 2637, 2646, 2625,
     2634, 2626, 2641, 2640, 2654, 2653, 2668, 2636, 2626, 2630,
     2613, 2628,    0, 2618, 2634, 2616, 2658, 2631, 2622, 2612,
     2615,  498, 2616, 2618, 2623, 2611, 2619, 2614,    0, 2602,

     2603,    0,  581, 2606, 2606, 2593, 2616,    0, 2611,  578,
     2612, 2600, 2598, 2594, 2608, 2610, 2600, 2594, 2602,    0,
     2586, 2604, 2589, 2589, 2597, 2596, 2591,    0, 2594, 2589,
     2583, 2587,  253, 2576, 2591, 2575,    0, 2592, 2586, 2581,
     2571,    0, 2585, 2582, 2582, 2571, 2579, 2558, 2562,   95,
      124,  236,  279,  358,  369,  400,  425,  545,  534,  531,
      562,  580,    0,    0,  580,  581,  566,  572,  579,    0,
      575,  593,  580,  591,  592,  581,  582,    0,  595,  591,
      606,  595,  590,  589,  598,  592,  593,  610,    0,  600,
      597,  602,  609,  598,    0,  608,  616,  617,  605,  610,

      607,  608,    0,    0,  626,  622,  629,  615,  608,  613,
      633,  629,  634,  631,    0,  619,    0,  638,  636,    0,
      626,  627,  623,  640,  630,  633,  632,  633,  641,  631,
      650,  637,  644,  645,    0,  652,  647,  648,    0,    0,
      656,  650,  641,  656,  653,  644,    0,  650,    0,    0,
        0,  664,    0,    0,  666,    0,    0,  663,  694,  695,
      662,  663,  654,  648,  654,  672,  676,  673,  678,  667,
      679,  666,  668,  678,  673,    0,  676,  672,  682,  681,
      678,  675,  673,  672,  672,  679,  691,  687,  685,  691,
      690,    0,  675,  682,  688,  683,  703,  685,  685,  695,

      701,  708,  691,  697,  705,    0,  704,  711,  769,  770,
      713,  700,  716,  711,  718,  702,  710,  720,  710,  725,
      718,    0,  722,  715,  715,  726,  723,  729,  729,  730,
      724,  736,  733,    0,  761,  731,  734,  737,  723,    0,
      725,    0,  724,  733,  731,  787,  730,    0,  751,  751,
      752,  747,  734,  751,    0,  756,  745,  746,  747,  756,
        0,  756,  763,  764,    0,  760,  761,  758,  743,    0,
      785,    0,  756,  751,  754,  768,  760,    0,  770,  757,
      757,  773,  765,  765,  775,  768,  778,  784,  772,    0,
      766,    0,    0,  767,  842,  784,  790,    0,  786,  772,

      788,  780,  788,  791,  788,  793,  785,  786,  796,  801,
      792,  790,  804,  794,  787,  803,  797,  791,  806,  797,
      800,  796,  811,  799,  800,  814,  815,  812,  859,  824,
      825,  845,  827,  848,  829,  810,  818,  827,  829,    0,
      815,  833,  846,  829,    0,  838,  838,  832,  837,  828,
      828,  825,  844,  846,  833,  848,  830,  830,  830,  843,
      853,  849,    0,  850,  844,  852,  851,    0,  844,  855,
      858,  844,    0,  847,  918,  851,  866,  867,  863,  854,
      864,  865,  852,  864,  871,  861,  875,  857,  932,  936,
      866,  881,  863,  871,  871,  867,  863,    0,  881,  869,

      886,  887,  884,  894,  895,  887,  892,  878,  887,    0,
      896,  887,  890,  898,  904,  905,  902,  898,  889,  894,
      898,  893,  899,  967,  923,  915,  891,  912,  899,  916,
        0,  915,    0,  975,  918,  905,  923,    0,  916,  920,
      912,  923,  920,  921,  912,  931,    0,  924,  934,  935,
        0,  917,  918,  920,  936,  939,  943,  930,  933,    0,
      941,  935,  943,  924,  950,  950,  947,  934,  954,  950,
      936, 1014,  949,  950,  949,  951,  961,  947,  946,  978,
      984,  956,  947,  953,  985,  967,  964,  978,  979,  964,
      980,  994,    0,  980,  964,  972,  981,  980,  982,  973,

      971, 1010,    0,  991,  984,    0,  974,  981,  980,    0,
      983,  998,  996, 1000,  987,  989,  988,  999,  987,  997,
     1038,  995, 1003,    0, 1004,    0, 1006,    0, 1000,  988,
     1014, 1012,    0, 1003, 1074, 3140,  998, 1021, 1010, 1002,
     1007, 1001,    0,    0, 1009,    0,    0, 1025, 1014, 1015,
     1028, 1020, 1013, 1014, 1031, 1018,    0,    0, 1032, 1036,
     1042, 1032, 1025, 1041,    0, 1039, 1044, 1046, 1047,    0,
     1036,    0, 1055, 1041, 1053,    0, 1053, 1098, 1058, 1059,
     1056, 1055, 1061,    0, 1053, 1053, 1049, 1049, 1069, 1057,
     1071, 1054, 1055, 1056, 1056, 1068, 1062, 1074, 1098, 1061,

        0, 1078, 1083, 1138, 1085, 1074, 1068, 1069, 1089, 1087,
     1091, 1074, 1090, 1091, 1083, 1084, 1086, 1094, 1091, 1080,
     1096, 1099,    0,    0,    0, 1096, 1084, 1090, 1097, 1119,
     1122, 1097, 1098, 1135, 1097, 1104,    0,    0, 1114, 1115,
     1104, 1097, 1093, 1117, 1099, 1113, 1103, 1112, 1122, 1107,
     1107, 1109,    0, 1124, 1116, 1127, 1131, 1119, 3140, 1119,
     1126, 3140, 1190, 1132, 1178, 1125, 1124, 1130,    0, 1125,
     1132, 1143, 1141, 1135, 1136, 1143, 1150,    0, 1149, 1155,
     1150, 1151, 1158, 1158, 1155, 1156, 1143, 1154, 1163, 1145,
     1145, 1147, 1159, 1148, 1161, 1157, 1167, 1164, 1174, 1170,

     1176, 1168, 1163, 1178, 1162, 1177, 1182, 1168, 1224, 1180,
     1166, 1179, 1176, 1168, 1185, 1171, 1192, 1193, 1176, 1192,
     1184, 1177, 1183,    0, 1184, 1195,    0, 1201, 1178,    0,
        0, 1200, 1184, 1192, 1201, 1203, 1189, 1210, 1202, 1197,
     1193, 1211, 1206, 1210, 1222, 1223, 1240,    0,    0, 1216,
     1213, 1209, 1220, 1220, 1216, 1211, 1220, 1228, 1233, 1234,
        0, 1222, 1222, 1232, 1234, 1240, 1233,    0,    0, 1240,
     1239, 1223,    0, 1245, 1242, 1228, 1240, 1230, 1237, 1233,
     1232, 1247, 1235, 1252, 1245, 1245,    0,    0,    0,    0,
        0, 1258, 1251, 1241, 1250, 1249, 1263, 1260, 1257, 1253,

     1253, 1264,    0, 1262, 1265, 1266, 1265, 1255, 1257, 3140,
        0, 1256, 1261, 1273, 1266, 1262, 1268, 1270, 1270, 1279,
        0, 1279, 1282, 1268, 1269, 1270, 1272, 1272, 1288,    0,
     1272, 1278, 1337, 1279, 1284, 1280, 1298, 1292,    0, 1300,
     1286, 1304, 1304, 1291, 1310, 1293, 1306, 1295, 1295, 1354,
        0, 1302, 1306, 1299, 1302, 1306, 1313, 1320, 1302, 1316,
     1308, 1308, 1319, 1320, 1325, 1317, 1327, 1319, 1334, 1351,
     1363, 1364, 1347, 1334, 1334, 1339, 1337, 1338, 1338, 1356,
     1326, 1346, 1325, 1349, 1339, 1332, 1342, 1339, 1346, 1356,
     1357, 1356, 1362, 1358, 1350, 1419, 1348, 1352, 1350, 1349,

     1350, 1368, 1367, 1368, 1353, 1370, 1361, 1357, 1363, 1370,
     1369, 1375, 1368, 1382, 1380, 1385, 1372,    0, 1386, 1369,
     1370, 1389, 1371, 1378, 1368,    0, 1376, 1393, 1395, 1392,
     1387, 1394, 1377, 1395, 1384, 1383, 1389, 1385, 1398,    0,
     1403, 1393, 1410, 1402, 1406, 1398, 1411, 1451, 3140, 1398,
        0,    0, 1396, 1412, 1405, 1406, 1417, 1418, 1406, 1421,
     1407, 1403, 1429,    0,    0, 1416, 1430, 1427, 1432, 1430,
     1423, 1435, 1432, 1435, 1438, 1425, 1427, 1428, 1425, 1422,
     1442, 1439, 1442, 1457, 1444, 1464, 1465, 1471, 1448, 3140,
     1442, 1439, 1450, 1439, 1445, 1440, 1454, 1440, 1457, 1444,

     1445, 1461, 1464, 1463, 1523, 1465, 1470, 1467, 1473, 1462,
     1456,    0, 1471, 1457, 1473, 1465, 1475, 1481, 1464, 1463,
     1466, 1478, 1474,    0, 1483, 1479, 1475, 1475, 1491, 1483,
     1493, 1476, 1495, 1480, 1496, 1480, 1494, 1495, 1483, 1493,
     3140,    0, 1502, 1499, 1496, 1506, 1507, 1508, 1489, 1496,
     1498, 1507, 1509, 1509, 1513, 1503, 1499, 1506, 1518, 1505,
     1516, 1513, 1519, 1525, 1526,    0, 1508, 1510, 1529, 1517,
     1510, 1518, 1520, 1514, 1521, 1531, 3140, 1531, 1535, 1520,
     1535, 1527, 1537, 1538, 1532, 1533, 1546, 1543, 1528, 1544,
     1545, 1545, 1547, 1533, 1534, 1543, 1540, 3140, 1545, 1582,

     1583, 1569, 1538, 1561, 1571, 1550, 1564, 1561, 1567, 1554,
     1557, 1566, 1566, 1557, 1560, 1569, 1557, 1570, 1571, 1574,
     1560, 1567, 1569, 1577, 1563, 1584, 1580, 1567,    0, 1573,
     1585, 1588, 1583, 1593, 1576, 1574, 1591, 1582, 1579, 1585,
     1587, 1587, 1586, 1603, 1587, 1591, 1595, 1604, 1589, 1590,
     1607, 1609, 1593, 1596, 1601, 1597, 1604, 1599, 1604, 1615,
     1621, 1604, 1618, 1608, 1616, 1621, 1618, 1627, 1613, 1630,
     1613, 1628, 1614, 1661, 1715, 1635, 1635, 1616, 1622, 1620,
     1632, 1637, 1634, 1637, 1631, 1638, 1630, 1630, 1639, 1633,
     1653,    0, 1649,    0, 1642, 1647, 1639, 1645, 1658, 1655,

     1643, 1647, 1655, 1664, 1675, 1667, 1693, 1694, 1697, 1691,
     1659, 3140, 1674, 1666, 1667, 1691, 1678, 1679, 1686, 1689,
     1676, 1686,    0, 1685, 1684, 1686, 1693, 1692, 1679, 1695,
     1680, 1684, 1686, 1683, 1687, 1688, 1701, 1694, 1702, 1709,
     1704, 1699, 1721, 1714, 1698, 3140,    0,    0, 3140, 1704,
     1712, 1706, 1712, 1733, 1727,    0, 1733,    0,    0, 1735,
     1742, 1734, 1744,    0, 1725, 1731, 1727, 1734, 1730, 1745,
     1750, 1733, 1734, 1740, 1736, 1751, 1754, 1742, 1752, 1756,
     1762, 3140, 1803, 1804, 1762, 1765, 1759, 1765, 1809, 1769,
        0, 1769, 1772, 1765, 1775, 1816, 1817, 1818, 1778,    0,

     1768, 1773, 1779, 1823, 1784, 1785,    0, 1785, 1828, 1782,
     1783, 1783, 1793, 1786, 1775, 1777, 1779, 1790, 1786, 1787,
     1796, 1783, 1795, 1793, 1801, 1798, 1848, 1800, 1808, 1811,
     1797, 1792, 1799, 1814, 1798, 1814, 1811, 1801,    0, 1801,
     3140, 1802, 1832, 1833, 1860, 1844, 1806, 1808, 1824, 1810,
     1830, 1813,    0, 1843, 1856,    0, 1821, 1831, 1832, 1826,
     1838, 1822, 1832, 1828, 1830, 1843, 1840, 1841, 1827, 1848,
     1829, 1836, 1839, 1851, 1839, 1840, 1841, 1837, 1848, 1853,
     1839, 1860, 1857, 1848, 1858, 1849, 1845, 1852, 1853, 1854,
     1866, 1855, 1856, 1867, 1869, 1869,    0, 1857, 1865, 1863,

     1859,    0,    0, 1877, 1881, 1863, 1878, 1872, 1885, 1872,
     1869,    0,    0,    0, 1868,    0,    0, 1889,    0, 1877,
        0,    0, 1888,    0, 1879,    0,    0,    0, 1873, 1878,
        0,    0, 1895,    0, 1893, 1884,    0,    0,    0, 1889,
     1884, 1895,    0, 1888, 1902, 1888, 1899, 1900, 1897, 1901,
     1889, 1904, 1903, 1898, 1908, 1894, 1912, 1955, 1913, 1901,
     1899, 1917, 1903, 1907, 1904, 1925, 1906, 1922,    0, 1908,
     1909, 3140, 3140, 3140, 1939, 1922, 1913, 1933,    0, 1909,
     1916, 1916, 1928, 1918, 1925, 1928, 1936, 1930, 1934, 1941,
     1925, 1930, 1927, 1934, 1946, 3140, 1932, 1943, 1932, 1948,

     1942, 3140, 2009, 1949, 1942, 1944, 1941, 1945, 1953, 1941,
     1956, 1945, 1961, 1957, 1947, 1959, 1960, 1952, 1952, 1958,
     1967, 1958, 1955, 1961,    0, 1973, 1975, 1971, 1963, 1964,
        0, 1970, 1959, 1977, 1983, 1986,    0, 1970, 1987, 1969,
     1990,    0, 1984, 1975,    0, 1992, 1981,    0, 1996, 1977,
     1997, 1978, 1983,    0, 1983, 1989, 2004, 2005, 1992,    0,
     2000,    0, 2003,    0,    0,    0, 1995, 2001, 1997, 1991,
        0, 2004, 2005, 2004, 2004, 2003, 2009, 2010, 2045, 2018,
        0, 2034, 2011,    0, 2015, 2023, 2026, 2024, 2024,    0,
     2024, 2027,    0, 2031, 2027, 2028, 2027, 2015, 2035,    0,

     2019,    0, 2033, 2026, 2028, 2021, 2037, 2037, 2026, 2030,
     2041, 2035, 2048, 2030, 2029, 2036, 2033, 2039, 2040, 2040,
     2041, 2038, 2058,    0, 2047,    0, 2047, 2056, 2047, 2058,
     2059, 2060, 2057,    0,    0, 2062, 2048, 2064, 2066, 2051,
     2048, 2072, 2069, 2071,    0, 2073, 2076, 2054,    0, 3140,
     2060, 2073, 2063, 2063, 2078, 2084, 2125, 2066, 2084, 2079,
     2077, 2087, 2088, 2083, 2068, 2091, 2092, 2093, 2133, 3140,
     2086, 2084, 2094, 2096, 2121, 2098, 3140, 2104, 2094, 2104,
     2103, 2104, 2089, 2095, 2091, 2097, 2113, 2109, 2110, 2098,
     2104, 2113, 3140, 2101, 2102, 2100, 2103, 2102, 2112,    0,

        0, 2118, 2119, 2108, 2108,    0, 2120, 2109, 2126, 2113,
     2119, 2121, 2134, 2122, 2123, 2138, 2130, 2134, 2140,    0,
        0, 2142, 2137, 2143,    0, 2145,    0, 2137, 2147, 2147,
     2140, 2131, 2132, 2190, 3140, 2142, 2134, 2134, 2156, 2157,
     2144, 2159, 2155, 3140, 3140, 3140, 2160, 2144, 2157, 2146,
     2151, 2166, 2146, 2168, 2168, 2170,    0, 2163, 2154, 2164,
     2162, 2154, 2156,    0, 2162, 2177, 2176, 2171, 2161, 2163,
     2163, 2166, 2164, 2186, 2187, 2169, 2171, 2170, 2172, 2178,
        0, 2174, 2189, 2192, 2176, 2190, 2182, 2184,    0, 2200,
     2198,    0,    0, 2199, 2181, 2185, 2185, 2180, 2188, 2188,

        0, 2209,    0, 2191, 2203, 2204, 2208, 2198, 2215, 2196,
        0, 2203,    0, 2215, 2216, 2206, 2218, 2203, 2210,    0,
        0, 2209,    0, 2211, 2219, 2212, 2209, 2210, 2205, 2223,
        0, 2215, 2229, 2216, 2218, 2219, 2237, 2224, 2235,    0,
     2221,    0, 2228, 2235, 3140, 2244, 2285,    0, 2243, 2244,
        0, 2243, 2229, 2241, 2246,    0, 2243, 2286,    0, 2253,
     2254, 2243, 2245, 2255, 2254, 2255, 2243, 2254, 2254, 2246,
     2264, 2261, 2266, 2268, 2260, 2255, 2262, 2263, 2261, 2259,
     2272, 2271,    0,    0, 2276, 2277, 2265, 2264, 2263, 2263,
     2263, 2275, 2278,    0,    0,    0, 2286, 2269, 2273,    0,

     2283, 2290, 2273, 2274, 2292, 2293, 2287,    0, 2277, 2292,
     2293, 2279,    0,    0, 2296, 2282, 2317, 2283, 2300, 2302,
     2303, 2282, 2294, 2308, 2291, 2291, 2292, 2304, 2305, 2314,
        0, 2297, 2303, 2313, 2300, 2315,    0, 2315, 2302, 2319,
     2320, 2305, 2307, 2322, 2309, 2316, 2327,    0,    0, 2312,
        0,    0, 3140, 2332, 2333, 2334, 2315, 2324, 2318, 2333,
     2334, 2321, 2338, 2322,    0, 2336, 2330, 2325, 2332, 2333,
     2333, 2344, 2345, 2342, 2332, 2350,    0, 2349, 2344,    0,
     2348, 2349, 2342, 2358,    0,    0,    0,    0, 2345, 2361,
     2353, 2363, 2359, 2347, 2359, 2362, 2368, 2355, 2356, 2368,

     2363, 2362, 2360,    0, 2374, 2375, 2365, 2366, 2359, 2417,
     2366, 2369, 2365, 2379, 2365, 2367, 2425, 2379, 2380, 2390,
     2388,    0, 2372, 2375, 2376, 2394,    0, 2378, 2393, 2384,
     2398, 2399, 2387, 2394, 2384, 2438, 2391, 2392, 2399, 2408,
        0, 2405, 2406, 2392, 2397, 2413, 2395, 2391, 2404, 2410,
        0,    0,    0, 2411, 2412, 2419, 2437, 2417, 2418, 2404,
     2409, 2442,    0, 2418, 2419, 2409, 2430, 2431, 2414, 2442,
     2431, 2421, 2422, 2428, 2430, 2449, 2428, 2416, 2435, 2443,
     2444, 2442,    0, 2444, 2439, 2440, 2447, 2448,    0, 2431,
     2448,    0, 2451, 2452, 2451, 2452, 2444, 2445, 2460,    0,

     2448, 2458, 2460, 2461, 2451, 2454, 2460, 2461, 2468, 2470,
     2471, 2467, 2468, 2465, 2470, 2476, 2477, 2475, 2460, 2476,
     2469, 2470, 2469, 2466, 2484, 2485, 2484, 2468, 2480, 2485,
     2486, 2485, 2492, 2491, 2492, 2491, 2479, 2479, 2481, 2482,
     2501, 2482, 2500, 2501, 2493, 2505, 2491, 2507, 2508, 2509,
     2506, 2507, 2508, 2509, 2506, 2504, 2497, 2498, 2516, 2516,
     2509, 2510, 2505, 2510, 2524, 2521, 2522, 2525,    0, 2524,
     2525, 2530,    0, 2529, 2529, 2530, 2530, 2518, 2519, 2518,
     2534,    0,    0, 2528, 2540, 2541, 2538, 2531, 2540, 2526,
     2527, 2544, 2544, 2532, 2546, 2547,    0, 2539, 2553, 2551,

     2552, 2537, 2538,    0,    0,    0, 2554, 2556,    0, 3140,
     2619, 2623, 2627, 2628, 2632, 2636, 2640
    } ;

static yyconst flex_int16_t yy_def[2918] =
    {   0,
     2910,    1, 2911, 2911, 2912, 2912, 2910, 2910, 2910, 2910,
     2910, 2910, 2913, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2910,
     2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2910, 2910,
     2915, 2910, 2910, 2910, 2910, 2913, 2910, 2913, 2916, 2910,
     2910, 2910, 2910, 2910, 2917, 2910, 2910, 2910, 2910, 2910,

     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2913, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2915, 2910, 2916, 2917, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2910, 2910, 2910, 2910, 2910, 2910, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2910, 2910,
     2910, 2910, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2910,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910,
     2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2910, 2910, 2910, 2910, 2910, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2910, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910,
     2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2910, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2910, 2910, 2910, 2910, 2910, 2910, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2910, 2910, 2914, 2910,
     2914, 2914, 2914, 2914, 2910, 2914, 2910, 2914, 2914, 2914,
     2914, 2914, 2914, 2910, 2910, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2910, 2910, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2910, 2914,
     2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2910, 2910, 2910, 2910, 2910, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2910, 2914, 2910, 2910, 2914,
     2914, 2910, 2910, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2910, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2910,
     2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2910, 2910, 2910, 2910, 2910, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910,
     2910, 2914, 2910, 2914, 2914, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2910,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914,
     2914, 2910, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2910,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2910,
     2910, 2910, 2910, 2910, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2910, 2910, 2914, 2910, 2914, 2914, 2910, 2914, 2914, 2910,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2910, 2914, 2914, 2914, 2914, 2910, 2914, 2910, 2914,
     2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2910, 2910,
     2914, 2910, 2914, 2914, 2910, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2910, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914,
     2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2910, 2910, 2910, 2910, 2910,

     2910, 2910, 2910, 2910, 2910, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914,
     2914, 2910, 2910, 2914, 2910, 2914, 2910, 2914, 2914, 2910,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2910, 2914, 2914, 2914, 2910, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914,
     2910, 2910, 2914, 2910, 2914, 2910, 2914, 2914, 2910, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914,
     2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914,
     2914, 2914, 2914, 2914, 2910, 2910, 2914, 2914, 2914, 2914,
     2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914,

     2914, 2910, 2910, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2910, 2910, 2910, 2910,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2910, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2910, 2910, 2910, 2910,
     2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914,
     2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2910, 2910, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2910, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2910, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2910, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,
     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,

     2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914, 2914,    0,
     2910, 2910, 2910, 2910, 2910, 2910, 2910
    } ;

static yyconst flex_int16_t yy_nxt[3229] =
    {   0,
        8,    9,   10,   11,    9,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   25,
       26,   27,   28,   25,   25,   29,   25,   30,   31,   32,
       33,   34,   34,   35,   34,   36,   37,   38,   39,   40,
       34,   41,   42,   43,   44,   34,   45,   46,   34,   34,
       47,   34,   48,   34,   49,    8,   50,   51,   34,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   82,   82,
       87,   82,  134,   82,   82,   82,  136,   82,   84,   82,

       95,   84,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   97,   96,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  105,  106,  112,  123,  113,  114,  327,  110,
       99,  120,  121,  135,  328,  137,  138,  139,   97,   88,
      100,   98,   98,   98,   98,   98,  101,   98,   98,  111,
      131,  115,  116,  117,  934,  158,  186,   99,   99,  159,
      132,  187,  213,   97,   85,   98,   98,   98,   98,   98,
       98,   98,   98,   98,  287,  160,  188,  214,  124,  254,
      255,  331,   99,  189,  190,   99,   87,  288,  332,  191,
       97,  102,   98,   98,   98,   98,   98,   98,   98,   98,

       98,  285,  193,  194,  259,   84,  195,  935,   84,   99,
       99,  196,  286,  260,  282,  283,  284,   97,  103,   98,
       98,   98,   98,   98,   98,   98,   98,   98,  125,  447,
      161,  173,  256,  126,  448,   88,   99,   99,  299,  302,
      333,  257,  162,  127,  303,  104,  163,  197,  304,  164,
      300,  198,  128,  129,  130,  199,  165,  918,  258,  166,
      334,  200,  315,  316,   99,  142,  143,  144,  145,  146,
      167,   85,  174,   87,  168,  329,  330,  209,  169,  310,
      175,  210,  180,  176,  170,  177,  222,  171,  178,  223,
      181,  211,  311,  182,  172,  179,  183,  212,  312,  184,

      346,  347,  399,  337,  400,  224,  225,  226,  147,  148,
      338,  201,  202,  936,  344,  919,  203,  149,  150,  151,
      204,  345,   88,  152,  153,  154,  205,  320,  321,  155,
      156,  157,  542,  322,  215,  206,  207,  208,  216,  339,
      389,  217,  218,  340,  543,  227,  250,  228,  219,  229,
      251,  220,  230,  231,  252,  937,  232,  341,  390,  233,
      253,  234,  237,  351,  235,  236,  238,  352,  323,  239,
      240,  244,  245,  353,  324,  382,  241,  246,  487,  242,
      325,  383,  247,  248,  249,  488,  243,   94,   94,   94,
       94,   94,   94,   94,   94,   94,  440,  358,  373,  374,

      375,  395,  441,  359,   99,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  360,  396,  401,  423,  424,  938,
      402,   97,  267,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   99,  437,  939,  449,  268,  438,  268,  450,
       99,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      267,   97,  385,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  405,  407,  386,  387,  416,  408,   99,  388,
       99,  406,  522,  409,  417,  578,  579,  940,   97,  270,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  361,
      362,  428,  363,  364,  365,  429,  419,   99,   99,  430,

      366,  367,  941,  411,  368,  420,  271,  369,  431,  370,
      412,  421,  434,  442,  413,  586,  414,  435,  451,  587,
      453,  443,  436,  457,  452,   99,  454,  510,  511,  458,
      512,  371,  877,  444,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  549,  551,  523,  550,  467,  878,  467,
      552,  267,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  267,
      555,  564,  581,  600,  768,  610,  627,  565,  601,  611,
      620,  582,  622,  623,  556,  621,  632,  628,  658,  629,

      633,  635,  636,  829,  663,  667,  670,  887,  942,  943,
      944,  659,  664,  668,  671,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  711,  801,  945,  803,  895,  946,  947,
      948,  712,  949,  888,  889,  896,  950,  769,  802,  804,
      713,  952,  951,  953,  897,  954,  955,  830,  956,  957,
      958,  959,  960,  961,  962,  963,  964,  965,  966,  967,
      968,  969,  970,  971,  972,  973,  974,  975,  976,  977,
      978,  979,  980,  981,  982,  983,  984,  985,  986,  987,
      988,  989,  990,  991,  992,  993,  994,  995,  996,  997,

      998,  999, 1000, 1001, 1003, 1004, 1002, 1005, 1006, 1007,
     1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
     1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
     1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
     1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
     1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
     1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
     1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
     1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,

     1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
     1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
     1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
     1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
     1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
     1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158,
     1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1155, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
     1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
     1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,

     1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
     1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
     1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
     1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1237, 1238,
     1235, 1239, 1236, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
     1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
     1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
     1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
     1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
     1288, 1291, 1292, 1293, 1294, 1295, 1296, 1289, 1290, 1297,

     1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
     1308, 1309, 1310, 1311, 1312, 1235, 1313, 1314, 1235, 1315,
     1236, 1316, 1317, 1318, 1319, 1269, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
     1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
     1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
     1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
     1364, 1365, 1366, 1367, 1368, 1235, 1369, 1375, 1235, 1376,
     1236, 1370, 1371, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
     1384, 1385, 1372, 1386, 1387, 1388, 1394, 1389, 1373, 1390,

     1396, 1374, 1397, 1398, 1391, 1399, 1400, 1401, 1402, 1392,
     1393, 1403, 1404, 1405, 1395, 1406, 1407, 1408, 1409, 1410,
     1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
     1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
     1431, 1432, 1433, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
     1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
     1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
     1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
     1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
     1482, 1483, 1484, 1485, 1486, 1487, 1434, 1488, 1489, 1490,

     1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
     1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
     1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
     1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530,
     1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
     1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550,
     1551, 1552, 1555, 1553, 1556, 1557, 1559, 1560, 1561, 1562,
     1566, 1563, 1564, 1567, 1568, 1569, 1565, 1554, 1558, 1570,
     1571, 1572, 1573, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
     1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1574, 1590,

     1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
     1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
     1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620,
     1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630,
     1631, 1632, 1633, 1634, 1635, 1640, 1641, 1642, 1643, 1636,
     1644, 1645, 1646, 1637, 1647, 1648, 1649, 1650, 1651, 1638,
     1639, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660,
     1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
     1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
     1681, 1682, 1683, 1684, 1686, 1687, 1690, 1691, 1693, 1694,

     1695, 1696, 1697, 1698, 1699, 1700, 1701, 1688, 1689, 1685,
     1702, 1703, 1704, 1692, 1705, 1706, 1707, 1708, 1709, 1710,
     1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
     1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730,
     1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
     1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
     1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
     1761, 1762, 1763, 1764, 1766, 1767, 1765, 1768, 1769, 1770,
     1772, 1773, 1771, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
     1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,

     1791, 1792, 1793, 1794, 1795, 1796, 1798, 1799, 1800, 1801,
     1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
     1812, 1797, 1813, 1814, 1815, 1816, 1817, 1818, 1820, 1821,
     1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
     1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
     1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
     1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
     1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
     1872, 1819, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
     1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,

     1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
     1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
     1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
     1921, 1922, 1923, 1924, 1925, 1926, 1928, 1929, 1930, 1931,
     1932, 1933, 1934, 1935, 1936, 1937, 1938, 1941, 1927, 1939,
     1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
     1952, 1953, 1940, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
     1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
     1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
     1981, 1982, 1983, 2014, 2015, 2016, 2017, 2018, 1984, 2019,

     2020, 2021, 2022, 2023, 1985, 2024, 2025, 1986, 2026, 2027,
     2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
     2038, 2039, 1987, 2040, 1988, 2041, 2042, 1989, 2043, 2044,
     2045, 1990, 1991, 1992, 2046, 1993, 2047, 2048, 2049, 2050,
     2051, 2052, 2053, 1994, 2054, 1995, 1996, 2055, 2056, 2057,
     2058, 2059, 1997, 2060, 2061, 2062, 1998, 2063, 2064, 2065,
     2066, 1999, 2067, 2068, 2069, 2070, 2071, 2072, 2000, 2073,
     2074, 2075, 2076, 2081, 2001, 2082, 2002, 2083, 2003, 2084,
     2077, 2004, 2085, 2086, 2005, 2006, 2007, 2008, 2078, 2009,
     2079, 2010, 2087, 2011, 2088, 2080, 2089, 2012, 2090, 2013,

     2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2101,
     2102, 2103, 2104, 2105, 2106, 2107, 2108, 2100, 2109, 2110,
     2111, 2112, 2113, 2114, 2115, 2116, 2118, 2119, 2120, 2121,
     2123, 2122, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131,
     2133, 2134, 2135, 2117, 2136, 2137, 2139, 2138, 2141, 2142,
     2143, 2144, 2145, 2146, 2147, 2148, 2149, 2132, 2150, 2151,
     2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
     2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
     2172, 2173, 2174, 2175, 2176, 2177, 2140, 2178, 2179, 2180,
     2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190,

     2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200,
     2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210,
     2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2220, 2221,
     2222, 2223, 2224, 2219, 2225, 2226, 2227, 2228, 2229, 2230,
     2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240,
     2241, 2242, 2243, 2244, 2245, 2246, 2247, 2249, 2250, 2251,
     2252, 2253, 2254, 2255, 2256, 2248, 2257, 2258, 2259, 2260,
     2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270,
     2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280,
     2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290,

     2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300,
     2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310,
     2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321,
     2322, 2323, 2324, 2311, 2325, 2326, 2327, 2328, 2329, 2330,
     2331, 2332, 2333, 2334, 2336, 2337, 2338, 2339, 2340, 2341,
     2342, 2343, 2344, 2345, 2346, 2347, 2348, 2335, 2349, 2350,
     2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360,
     2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370,
     2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380,
     2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390,

     2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400,
     2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410,
     2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420,
     2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430,
     2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440,
     2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450,
     2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460,
     2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470,
     2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480,
     2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490,

     2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500,
     2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510,
     2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520,
     2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530,
     2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540,
     2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550,
     2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560,
     2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570,
     2572, 2573, 2574, 2575, 2571, 2576, 2577, 2578, 2579, 2580,
     2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590,

     2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600,
     2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610,
     2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620,
     2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630,
     2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640,
     2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650,
     2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660,
     2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670,
     2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680,
     2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690,

     2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700,
     2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710,
     2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720,
     2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730,
     2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740,
     2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750,
     2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760,
     2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770,
     2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781,
     2782, 2783, 2784, 2785, 2786, 2787, 2771, 2788, 2789, 2790,

     2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800,
     2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810,
     2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820,
     2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830,
     2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840,
     2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850,
     2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860,
     2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870,
     2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880,
     2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890,

     2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900,
     2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909,   81,
       81,   81,   81,   83,   83,   83,   83,   86,   86,   86,
       86,  109,  262,  933,  932,  262,  264,  264,  931,  264,
      265,  265,  930,  265,  929,  928,  927,  926,  925,  924,
      923,  922,  921,  920,  917,  916,  915,  914,  913,  912,
      911,  910,  909,  908,  907,  906,  905,  904,  903,  902,
      901,  900,  899,  898,  894,  893,  892,  891,  890,  886,
      885,  884,  883,  882,  881,  880,  879,  876,  875,  874,
      873,  872,  871,  870,  869,  868,  867,  866,  865,  864,

      863,  862,  861,  860,  859,  858,  857,  856,  855,  854,
      853,  852,  851,  850,  849,  848,  847,  846,  845,  844,
      843,  842,  841,  840,  839,  838,  837,  836,  835,  834,
      833,  832,  831,  828,  827,  826,  825,  824,  823,  822,
      821,  820,  819,  818,  817,  816,  815,  814,  813,  812,
      811,  810,  809,  808,  807,  806,  805,  800,  799,  798,
      797,  796,  795,  794,  793,  792,  791,  790,  789,  788,
      787,  786,  785,  784,  783,  782,  781,  780,  779,  778,
      777,  776,  775,  774,  773,  772,  771,  770,  767,  766,
      765,  764,  763,  762,  761,  760,  759,  758,  757,  756,

      755,  754,  753,  752,  751,  750,  749,  748,  747,  746,
      745,  744,  743,  742,  741,  740,  739,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  714,  710,  709,  708,  707,  706,  705,  704,  703,
      702,  701,  700,  699,  698,  697,  696,  695,  694,  693,
      692,  691,  690,  689,  688,  687,  686,  685,  684,  683,
      682,  681,  680,  679,  678,  677,  676,  675,  674,  673,
      672,  669,  666,  665,  662,  661,  660,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  645,

      644,  643,  642,  641,  640,  639,  638,  637,  634,  631,
      630,  626,  625,  624,  619,  618,  617,  616,  615,  614,
      613,  612,  609,  608,  607,  606,  605,  604,  603,  602,
      599,  598,  597,  596,  595,  594,  593,  592,  591,  590,
      589,  588,  585,  584,  583,  580,  577,  576,  575,  574,
      573,  572,  571,  570,  569,  568,  567,  566,  563,  562,
      561,  560,  559,  558,  557,  554,  553,  548,  547,  546,
      545,  544,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,
      521,  520,  519,  518,  517,  516,  515,  514,  513,  509,

      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  466,  465,
      464,  463,  462,  461,  460,  459,  456,  455,  446,  445,
      439,  433,  432,  427,  426,  425,  422,  418,  415,  410,
      404,  403,  398,  397,  394,  393,  392,  391,  384,  381,
      380,  379,  378,  377,  376,  372,  357,  356,  355,  354,
      350,  349,  348,  343,  342,  336,  335,  326,  319,  318,
      317,  314,  313,  309,  308,  307,  306,  305,  301,  298,

      297,  296,  295,  294,  293,  292,  291,  290,  289,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272, 2910,
      263,  261,  221,  192,  185,  141,  140,  133,  122,  119,
      118,  108,  107,   93,   92,   91,   90,   89, 2910,    7,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,

     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910
    } ;

static yyconst flex_int16_t yy_chk[3229] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
       13,    3,   46,    3,    4,    4,   47,    4,    9,    4,

       24,    9,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   25,   24,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   31,   31,   36,   42,   36,   37,  168,   35,
       25,   40,   40,   46,  168,   47,   47,   47,   26,   13,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   35,
       44,   37,   37,   37,  750,   53,   59,   26,   25,   53,
       44,   59,   66,   27,    9,   27,   27,   27,   27,   27,
       27,   27,   27,   27,  122,   53,   60,   66,   42,   74,
       74,  170,   27,   60,   60,   26,   86,  122,  170,   60,
       28,   27,   28,   28,   28,   28,   28,   28,   28,   28,

       28,  121,   62,   62,   76,   84,   62,  751,   84,   28,
       27,   62,  121,   76,  120,  120,  120,   29,   28,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   43,  245,
       54,   56,   75,   43,  245,   86,   29,   28,  147,  149,
      171,   75,   54,   43,  149,   29,   54,   63,  149,   54,
      147,   63,   43,   43,   43,   63,   54,  733,   75,   54,
      171,   63,  161,  161,   29,   52,   52,   52,   52,   52,
       55,   84,   56,  123,   55,  169,  169,   65,   55,  158,
       56,   65,   57,   56,   55,   56,   69,   55,   56,   69,
       57,   65,  158,   57,   55,   56,   57,   65,  158,   57,

      180,  180,  215,  175,  215,   69,   69,   69,   52,   52,
      175,   64,   64,  752,  179,  733,   64,   52,   52,   52,
       64,  179,  123,   52,   52,   52,   64,  165,  165,   52,
       52,   52,  351,  165,   67,   64,   64,   64,   67,  176,
      203,   67,   67,  176,  351,   70,   73,   70,   67,   70,
       73,   67,   70,   70,   73,  753,   70,  176,  203,   70,
       73,   70,   71,  184,   70,   70,   71,  184,  166,   71,
       71,   72,   72,  184,  166,  200,   71,   72,  293,   71,
      166,  200,   72,   72,   72,  293,   71,   94,   94,   94,
       94,   94,   94,   94,   94,   94,  241,  190,  193,  193,

      193,  211,  241,  190,   94,   97,   97,   97,   97,   97,
       97,   97,   97,   97,  190,  211,  216,  231,  231,  754,
      216,   98,   97,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   94,  239,  755,  246,   99,  239,   99,  246,
       98,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       97,  100,  202,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  219,  220,  202,  202,  227,  220,   98,  202,
      100,  219,  331,  220,  227,  386,  386,  756,  101,  100,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  191,
      191,  235,  191,  191,  191,  235,  229,  101,  100,  235,

      191,  191,  757,  222,  191,  229,  101,  191,  235,  191,
      222,  229,  238,  242,  222,  392,  222,  238,  250,  392,
      251,  242,  238,  254,  250,  101,  251,  321,  321,  254,
      321,  191,  692,  242,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  357,  358,  331,  357,  267,  692,  267,
      358,  266,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  266,
      361,  369,  388,  405,  574,  414,  428,  369,  405,  414,
      423,  388,  424,  424,  361,  423,  431,  428,  456,  428,

      431,  433,  433,  642,  460,  463,  465,  703,  758,  759,
      760,  456,  460,  463,  465,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  511,  611,  761,  612,  710,  762,  765,
      766,  511,  767,  703,  703,  710,  768,  574,  611,  612,
      511,  769,  768,  771,  710,  772,  773,  642,  774,  775,
      776,  777,  779,  780,  781,  782,  783,  784,  785,  786,
      786,  787,  788,  790,  791,  792,  793,  794,  796,  797,
      798,  799,  800,  801,  802,  805,  806,  807,  808,  809,
      810,  811,  812,  813,  814,  816,  818,  819,  821,  822,

      823,  824,  825,  826,  827,  828,  826,  829,  830,  831,
      832,  833,  834,  836,  837,  838,  841,  842,  843,  844,
      845,  846,  848,  852,  855,  858,  859,  860,  861,  862,
      863,  864,  865,  866,  867,  868,  869,  870,  871,  872,
      873,  874,  875,  877,  878,  879,  880,  881,  882,  883,
      884,  885,  886,  887,  888,  889,  890,  891,  893,  894,
      895,  896,  897,  898,  899,  900,  901,  902,  903,  904,
      905,  907,  908,  909,  910,  911,  912,  913,  914,  915,
      916,  917,  918,  919,  920,  921,  923,  924,  925,  926,
      927,  928,  929,  930,  931,  932,  933,  935,  936,  937,

      938,  939,  941,  943,  944,  945,  946,  946,  947,  949,
      950,  951,  952,  953,  954,  956,  957,  958,  959,  960,
      962,  963,  964,  966,  967,  968,  969,  971,  973,  974,
      975,  976,  977,  979,  980,  981,  982,  983,  984,  985,
      986,  987,  988,  989,  991,  994,  995,  996,  997,  999,
     1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
     1020, 1006, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
     1029, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
     1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049,

     1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
     1060, 1061, 1062, 1064, 1065, 1066, 1067, 1069, 1070, 1071,
     1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
     1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
     1090, 1093, 1090, 1094, 1095, 1096, 1097, 1099, 1100, 1101,
     1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112,
     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1134,
     1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
     1146, 1148, 1149, 1150, 1152, 1153, 1154, 1146, 1146, 1155,

     1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166,
     1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1172, 1175,
     1172, 1176, 1177, 1178, 1179, 1124, 1180, 1181, 1182, 1183,
     1183, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
     1192, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1204, 1205, 1207, 1208, 1209, 1211, 1212, 1213, 1214, 1215,
     1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1225, 1227,
     1229, 1230, 1231, 1232, 1234, 1235, 1237, 1239, 1235, 1240,
     1235, 1238, 1238, 1241, 1242, 1245, 1248, 1249, 1250, 1251,
     1252, 1253, 1238, 1254, 1255, 1256, 1260, 1259, 1238, 1259,

     1261, 1238, 1262, 1263, 1259, 1264, 1266, 1267, 1268, 1259,
     1259, 1269, 1271, 1273, 1260, 1274, 1275, 1277, 1278, 1279,
     1280, 1281, 1282, 1283, 1285, 1286, 1287, 1288, 1289, 1290,
     1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
     1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
     1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
     1322, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
     1335, 1336, 1339, 1340, 1341, 1342, 1343, 1343, 1344, 1345,
     1346, 1347, 1348, 1349, 1350, 1351, 1352, 1354, 1355, 1356,
     1357, 1358, 1360, 1361, 1363, 1364, 1304, 1365, 1365, 1365,

     1365, 1366, 1367, 1368, 1370, 1371, 1372, 1373, 1374, 1375,
     1376, 1377, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
     1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
     1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
     1417, 1418, 1419, 1420, 1421, 1422, 1423, 1425, 1426, 1428,
     1429, 1432, 1433, 1432, 1434, 1435, 1436, 1437, 1438, 1439,
     1440, 1439, 1439, 1441, 1442, 1443, 1439, 1432, 1435, 1444,
     1445, 1446, 1447, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
     1457, 1458, 1459, 1460, 1462, 1463, 1464, 1465, 1447, 1466,

     1467, 1470, 1471, 1472, 1474, 1475, 1476, 1477, 1478, 1479,
     1480, 1481, 1482, 1483, 1484, 1485, 1486, 1492, 1493, 1494,
     1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1504, 1505,
     1506, 1507, 1508, 1509, 1512, 1513, 1514, 1515, 1516, 1517,
     1518, 1519, 1520, 1522, 1523, 1524, 1525, 1526, 1527, 1523,
     1528, 1529, 1531, 1523, 1532, 1533, 1534, 1535, 1536, 1523,
     1523, 1537, 1538, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
     1547, 1548, 1549, 1550, 1550, 1552, 1553, 1554, 1555, 1556,
     1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
     1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,

     1577, 1578, 1579, 1580, 1581, 1582, 1583, 1572, 1572, 1570,
     1584, 1585, 1586, 1574, 1587, 1588, 1589, 1590, 1591, 1592,
     1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
     1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
     1613, 1614, 1615, 1616, 1617, 1619, 1620, 1621, 1622, 1623,
     1624, 1625, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
     1635, 1636, 1637, 1638, 1638, 1639, 1641, 1642, 1643, 1644,
     1645, 1646, 1647, 1648, 1650, 1653, 1648, 1654, 1655, 1656,
     1657, 1658, 1656, 1659, 1660, 1661, 1662, 1663, 1666, 1667,
     1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,

     1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
     1688, 1689, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
     1699, 1683, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
     1708, 1709, 1710, 1711, 1713, 1714, 1715, 1716, 1717, 1718,
     1719, 1720, 1721, 1722, 1723, 1725, 1726, 1727, 1728, 1729,
     1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
     1740, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
     1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
     1762, 1705, 1763, 1764, 1765, 1767, 1768, 1769, 1770, 1771,
     1772, 1773, 1774, 1775, 1776, 1778, 1779, 1780, 1781, 1782,

     1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
     1793, 1794, 1795, 1796, 1797, 1799, 1800, 1801, 1802, 1803,
     1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
     1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
     1824, 1825, 1826, 1827, 1828, 1830, 1831, 1832, 1819, 1831,
     1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
     1843, 1844, 1831, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
     1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
     1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
     1872, 1873, 1874, 1876, 1877, 1878, 1879, 1880, 1874, 1881,

     1882, 1883, 1884, 1885, 1874, 1886, 1887, 1874, 1888, 1889,
     1890, 1891, 1893, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
     1902, 1903, 1874, 1904, 1874, 1905, 1906, 1874, 1907, 1908,
     1909, 1874, 1874, 1874, 1910, 1874, 1911, 1913, 1914, 1915,
     1916, 1917, 1918, 1874, 1919, 1874, 1875, 1920, 1921, 1922,
     1924, 1925, 1875, 1926, 1927, 1928, 1875, 1929, 1930, 1931,
     1932, 1875, 1933, 1934, 1935, 1936, 1937, 1938, 1875, 1939,
     1940, 1941, 1942, 1944, 1875, 1945, 1875, 1950, 1875, 1951,
     1943, 1875, 1952, 1953, 1875, 1875, 1875, 1875, 1943, 1875,
     1943, 1875, 1954, 1875, 1955, 1943, 1957, 1875, 1960, 1875,

     1961, 1962, 1963, 1965, 1966, 1967, 1968, 1969, 1970, 1971,
     1972, 1973, 1974, 1975, 1976, 1977, 1978, 1970, 1979, 1980,
     1981, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1992,
     1993, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002,
     2003, 2004, 2005, 1987, 2006, 2008, 2009, 2008, 2010, 2011,
     2012, 2013, 2014, 2015, 2016, 2017, 2018, 2002, 2019, 2020,
     2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
     2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2040, 2042,
     2043, 2044, 2045, 2046, 2047, 2048, 2009, 2049, 2050, 2051,
     2052, 2054, 2055, 2057, 2058, 2059, 2060, 2061, 2062, 2063,

     2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073,
     2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
     2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
     2094, 2095, 2096, 2091, 2098, 2099, 2100, 2101, 2104, 2105,
     2106, 2107, 2108, 2109, 2110, 2111, 2115, 2118, 2120, 2123,
     2125, 2129, 2130, 2133, 2135, 2136, 2140, 2141, 2142, 2144,
     2145, 2146, 2147, 2148, 2149, 2140, 2150, 2151, 2152, 2153,
     2154, 2155, 2156, 2157, 2158, 2158, 2159, 2160, 2161, 2162,
     2163, 2164, 2165, 2166, 2167, 2168, 2170, 2171, 2175, 2176,
     2177, 2178, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187,

     2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2197, 2198,
     2199, 2200, 2201, 2203, 2204, 2205, 2206, 2207, 2208, 2209,
     2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219,
     2220, 2221, 2222, 2209, 2223, 2224, 2226, 2227, 2228, 2229,
     2230, 2232, 2233, 2234, 2235, 2236, 2238, 2239, 2240, 2241,
     2243, 2244, 2246, 2247, 2249, 2250, 2251, 2234, 2252, 2253,
     2255, 2256, 2257, 2258, 2259, 2261, 2263, 2267, 2268, 2269,
     2270, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280,
     2282, 2283, 2285, 2286, 2287, 2288, 2289, 2291, 2292, 2294,
     2295, 2296, 2297, 2298, 2299, 2301, 2303, 2304, 2305, 2306,

     2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316,
     2317, 2318, 2319, 2320, 2321, 2322, 2323, 2325, 2327, 2328,
     2329, 2330, 2331, 2332, 2333, 2336, 2337, 2338, 2339, 2340,
     2341, 2342, 2343, 2344, 2346, 2347, 2348, 2351, 2352, 2353,
     2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363,
     2364, 2365, 2366, 2367, 2368, 2369, 2371, 2372, 2373, 2374,
     2375, 2376, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385,
     2386, 2387, 2388, 2389, 2390, 2391, 2392, 2394, 2395, 2396,
     2397, 2398, 2399, 2402, 2403, 2404, 2405, 2407, 2408, 2409,
     2410, 2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419,

     2422, 2423, 2424, 2426, 2428, 2429, 2430, 2431, 2432, 2433,
     2434, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2447,
     2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2458,
     2459, 2460, 2461, 2462, 2463, 2465, 2466, 2467, 2468, 2469,
     2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479,
     2480, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2490, 2491,
     2494, 2495, 2496, 2497, 2498, 2499, 2500, 2502, 2504, 2505,
     2506, 2507, 2508, 2509, 2510, 2512, 2514, 2515, 2516, 2517,
     2518, 2519, 2522, 2524, 2517, 2525, 2526, 2527, 2528, 2529,
     2530, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2541,

     2543, 2544, 2546, 2547, 2549, 2550, 2552, 2553, 2554, 2555,
     2557, 2558, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567,
     2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577,
     2578, 2579, 2580, 2581, 2582, 2585, 2586, 2587, 2588, 2589,
     2590, 2591, 2592, 2593, 2597, 2598, 2599, 2601, 2602, 2603,
     2604, 2605, 2606, 2607, 2609, 2610, 2611, 2612, 2615, 2616,
     2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626,
     2627, 2628, 2629, 2630, 2632, 2633, 2634, 2635, 2636, 2638,
     2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2650,
     2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663,

     2664, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674,
     2675, 2676, 2678, 2679, 2681, 2682, 2683, 2684, 2689, 2690,
     2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700,
     2701, 2702, 2703, 2705, 2706, 2707, 2708, 2709, 2710, 2711,
     2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721,
     2723, 2724, 2725, 2726, 2728, 2729, 2730, 2731, 2732, 2733,
     2734, 2735, 2736, 2737, 2738, 2739, 2740, 2742, 2743, 2744,
     2745, 2746, 2747, 2748, 2749, 2750, 2754, 2755, 2756, 2757,
     2758, 2759, 2760, 2761, 2762, 2764, 2765, 2766, 2767, 2768,
     2769, 2770, 2771, 2772, 2773, 2774, 2757, 2775, 2776, 2777,

     2778, 2779, 2780, 2781, 2782, 2784, 2785, 2786, 2787, 2788,
     2790, 2791, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2801,
     2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811,
     2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821,
     2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831,
     2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841,
     2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851,
     2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861,
     2862, 2863, 2864, 2865, 2866, 2867, 2868, 2870, 2871, 2872,
     2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2884, 2885,

     2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895,
     2896, 2898, 2899, 2900, 2901, 2902, 2903, 2907, 2908, 2911,
     2911, 2911, 2911, 2912, 2912, 2912, 2912, 2913, 2913, 2913,
     2913, 2914, 2915,  749,  748, 2915, 2916, 2916,  747, 2916,
     2917, 2917,  746, 2917,  745,  744,  743,  741,  740,  739,
      738,  736,  735,  734,  732,  731,  730,  729,  727,  726,
      725,  724,  723,  722,  721,  719,  718,  717,  716,  715,
      714,  713,  712,  711,  709,  707,  706,  705,  704,  701,
      700,  698,  697,  696,  695,  694,  693,  691,  690,  689,
      688,  687,  686,  685,  684,  682,  681,  680,  679,  678,

      677,  676,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  666,  665,  664,  663,  662,  660,  659,  658,  657,
      656,  655,  654,  653,  652,  651,  650,  649,  647,  646,
      645,  644,  643,  641,  638,  637,  635,  634,  633,  632,
      631,  630,  629,  628,  627,  625,  624,  622,  621,  620,
      619,  618,  617,  616,  615,  614,  613,  610,  609,  608,
      607,  605,  604,  603,  602,  601,  600,  599,  598,  597,
      596,  595,  594,  593,  592,  591,  590,  589,  587,  586,
      585,  582,  581,  580,  579,  578,  577,  575,  573,  572,
      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,

      561,  560,  559,  558,  557,  556,  555,  554,  553,  552,
      551,  550,  549,  546,  545,  544,  543,  541,  540,  539,
      537,  536,  535,  534,  532,  531,  530,  529,  527,  526,
      525,  524,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  512,  510,  509,  508,  506,  505,  504,  503,  502,
      501,  499,  498,  497,  496,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  483,  482,  481,  480,  479,
      478,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      466,  464,  462,  461,  459,  458,  457,  455,  454,  453,
      452,  451,  450,  448,  447,  446,  445,  444,  443,  442,

      441,  440,  439,  438,  437,  436,  435,  434,  432,  430,
      429,  427,  426,  425,  422,  421,  420,  419,  418,  417,
      416,  415,  413,  412,  411,  410,  409,  408,  407,  406,
      404,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  391,  390,  389,  387,  385,  384,  383,  382,
      381,  379,  378,  377,  376,  372,  371,  370,  368,  367,
      366,  365,  364,  363,  362,  360,  359,  356,  355,  354,
      353,  352,  350,  349,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  332,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  320,

      319,  318,  317,  313,  312,  311,  310,  309,  308,  307,
      305,  304,  302,  300,  299,  298,  297,  296,  295,  294,
      292,  291,  290,  289,  286,  285,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  263,  261,
      260,  259,  258,  257,  256,  255,  253,  252,  244,  243,
      240,  237,  236,  234,  233,  232,  230,  228,  223,  221,
      218,  217,  214,  212,  210,  209,  205,  204,  201,  199,
      198,  197,  196,  195,  194,  192,  189,  187,  186,  185,
      183,  182,  181,  178,  177,  174,  172,  167,  164,  163,
      162,  160,  159,  154,  153,  152,  151,  150,  148,  140,

      136,  135,  133,  132,  131,  127,  126,  125,  124,  119,
      118,  114,  113,  112,  111,  110,  104,  103,  102,   88,
       85,   77,   68,   61,   58,   51,   48,   45,   41,   39,
       38,   33,   32,   22,   20,   19,   15,   14,    7, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,

     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910,
     2910, 2910, 2910, 2910, 2910, 2910, 2910, 2910
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[459] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "feiparser.l"
/* FEI Lexer! */
/* NOTE: To comment this file use C "standard comments"  BUT leave a space before the slash-star */


#line 9 "feiparser.l"
    #include <iostream>
    #include <fstream>
    #include <string>

    //Old C libraries are used in lexer....
    #include <cstdlib>
    #include <cstring>
    #include <stdio.h>                         // Provides printf, etc.
    #include <string.h>
    #include <getopt.h>                        // For the command-line argument parser
    // =================================================================================
    // Please do not erase! Might make it into code someday.
    // #include <readline/readline.h>
    // #include <readline/history.h>
    // =================================================================================

    //Our FEI libraries
    #include "feiast.h"
    #include "dsl_actions.h"
    #include "siunit.h"
    #include "quantity.h"

    //From the parser generator
    #include "feiparser.tab.hh"

    //Boost for string to double conversion
    //#include <../boost/boost/lexical_cast.hpp>
    #include <boost/lexical_cast.hpp>


    int yycolumn = 1;
    #define YY_DECL int yylex(yy::feiparser::semantic_type *yylval,\
                              yy::feiparser::location_type *yylloc)
    //#define YY_USER_ACTION yylloc -> columns (yyleng);
    #define YY_USER_ACTION yylloc->end.line = yylineno; \
    yylloc->end.column = yycolumn+yyleng; \
    yycolumn += yyleng;

    // =================================================================================
    // Please do not erase! Might make it into code someday.
    // This is to replace STDIN with GNU Readline (Caution!!! GPL Licence).
    // #undef YY_INPUT
    // #define YY_INPUT(buf, result, max_size) (result = my_yyinput(buf, max_size))
    // =================================================================================

    //static int my_yyinput(char *buf, int max_size);
    //static char *st_readline_buffer;
    //static int  st_readline_used_len;

    //Simplify the usage of tokens...
    typedef yy::feiparser::token token;

    //Standard namespace
    using namespace std;

    //
    //FILE * ;

    struct bufstack
    {
        struct bufstack *prev;
        YY_BUFFER_STATE bs;
        int lineno;
        char* filename;
        FILE *f;
    } *curbs = 0;

    char* curfilename;

    int newfile(char* fn);
    int newstdin(void);
    int popfile(void);
    int error_behavior(void);
    void welcome_msg();
    void set_known_units();
    void set_variables(char* cstring);


    char initial[] = "STDIN";

    //Command line options flags
    int FLAG_interactive_mode = 1;
    int FLAG_generate_cpp_output = 0;
    int FLAG_execute_apis = 1;
    int FLAG_inclusion_mode = 0;
    int FLAG_run_file = 0;
    int FLAG_binary_output = 0;

    /* EXTERNS - All defined in feiparser.yy */
    extern const string thePrompt;
    extern string out_cpp_filename;
    extern string prompt;
    extern map<string,Quantity> global_variables;
    extern set<string> locked_global_variables;
    extern int recovery_mode;
    extern void set_model_name(char* cstring);
    extern void set_outcppfile_name(string newfilename);


/* float exponent */
#line 2282 "feiparser.lex.c"

#define INITIAL 0
#define IFILE 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 113 "feiparser.l"



    // start where previous token ended
    //yylloc -> step();


 /* ================================================================================================= */
 /* ========              BEGIN LEXER                                                       ========= */
 /* ================================================================================================= */
 
 /* The order in this file matters. Patterns which are higher up are matched first */
 
 /* single character ops are directly passed to the parser (more grammatical clarity) */
#line 2486 "feiparser.lex.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2911 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3140 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
#line 128 "feiparser.l"
case 2:
#line 129 "feiparser.l"
case 3:
#line 130 "feiparser.l"
case 4:
#line 131 "feiparser.l"
case 5:
#line 132 "feiparser.l"
case 6:
#line 133 "feiparser.l"
case 7:
#line 134 "feiparser.l"
case 8:
#line 135 "feiparser.l"
case 9:
#line 136 "feiparser.l"
case 10:
#line 137 "feiparser.l"
case 11:
#line 138 "feiparser.l"
case 12:
#line 139 "feiparser.l"
case 13:
#line 140 "feiparser.l"
case 14:
#line 141 "feiparser.l"
case 15:
YY_RULE_SETUP
#line 141 "feiparser.l"
{ return yytext[0]; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 143 "feiparser.l"
{
                                yylloc->begin.line = yylineno;
                                yylloc->begin.column = yycolumn;

                                return yytext[0];
                            }
	YY_BREAK
/* assign operate */
case 17:
YY_RULE_SETUP
#line 151 "feiparser.l"
{ return token::PLUSEQUAL; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 152 "feiparser.l"
{ return token::MINUSEQUAL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 153 "feiparser.l"
{ return token::TIMESEQUAL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 154 "feiparser.l"
{ return token::DIVIDEEQUAL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 155 "feiparser.l"
{ return token::MODULUSEQUAL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 156 "feiparser.l"
{ return token::POWEQUAL; }
	YY_BREAK
/* comparison ops */
case 23:
YY_RULE_SETUP
#line 160 "feiparser.l"
{ yylval->fn = 1; return token::CMP; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 161 "feiparser.l"
{ yylval->fn = 2; return token::CMP; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 162 "feiparser.l"
{ yylval->fn = 3; return token::CMP; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 163 "feiparser.l"
{ yylval->fn = 4; return token::CMP; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 164 "feiparser.l"
{ yylval->fn = 5; return token::CMP; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 165 "feiparser.l"
{ yylval->fn = 6; return token::CMP; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 166 "feiparser.l"
{ yylval->fn = 7; return token::CMP; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 167 "feiparser.l"
{ yylval->fn = 8; return token::CMP; }
	YY_BREAK
/* test for units */
case 31:
#line 172 "feiparser.l"
case 32:
#line 173 "feiparser.l"
case 33:
#line 174 "feiparser.l"
case 34:
#line 175 "feiparser.l"
case 35:
#line 176 "feiparser.l"
case 36:
#line 177 "feiparser.l"
case 37:
#line 178 "feiparser.l"
case 38:
#line 179 "feiparser.l"
case 39:
#line 180 "feiparser.l"
case 40:
#line 181 "feiparser.l"
case 41:
#line 182 "feiparser.l"
case 42:
YY_RULE_SETUP
#line 182 "feiparser.l"
{yylval->ident = new string(yytext); return token::ISUNITTYPE;}
	YY_BREAK
/* Flow control keywords */
case 43:
YY_RULE_SETUP
#line 185 "feiparser.l"
{ return token::IF; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 186 "feiparser.l"
{ return token::THEN; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 187 "feiparser.l"
{ return token::ELSE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 188 "feiparser.l"
{ return token::WHILE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 189 "feiparser.l"
{ return token::DO; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 190 "feiparser.l"
{ return token::LET;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 191 "feiparser.l"
{ return token::IN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 192 "feiparser.l"
{ return token::EXITSAFEMODE;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 193 "feiparser.l"
{ return token::CONTINUE;}
	YY_BREAK
/* Include statement is handled by the lexer */
case 52:
YY_RULE_SETUP
#line 196 "feiparser.l"
{BEGIN IFILE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 197 "feiparser.l"
{
                                {
                                    //This ignores anything up to the newline.
                                    int c;
                                    while((c=yyinput()) && c != '\n');
                                }
                                yylineno++;
                                if(newfile(yytext) == 0)
                                    yyterminate();  /*file not found*/
                                yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
                                prompt = "";
                                BEGIN INITIAL;
                                FLAG_inclusion_mode = 1;
                            }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 211 "feiparser.l"
{
                                cerr << curfilename << ":" << yylineno << ": bad include line." << endl;
                                yyterminate();
                            }
	YY_BREAK
/* built in functions */
case 55:
#line 219 "feiparser.l"
case 56:
#line 220 "feiparser.l"
case 57:
#line 221 "feiparser.l"
case 58:
#line 222 "feiparser.l"
case 59:
#line 223 "feiparser.l"
case 60:
#line 224 "feiparser.l"
case 61:
#line 225 "feiparser.l"
case 62:
#line 226 "feiparser.l"
case 63:
#line 227 "feiparser.l"
case 64:
#line 228 "feiparser.l"
case 65:
#line 229 "feiparser.l"
case 66:
#line 230 "feiparser.l"
case 67:
#line 231 "feiparser.l"
case 68:
#line 232 "feiparser.l"
case 69:
#line 233 "feiparser.l"
case 70:
#line 234 "feiparser.l"
case 71:
YY_RULE_SETUP
#line 234 "feiparser.l"
{ yylval->ident = new string(yytext); return token::FUNCTION; }
	YY_BREAK
/* ================================================================================================= */
/* ========              INITIAL COMMANDS (VERBS)                                          ========= */
/* ================================================================================================= */
case 72:
YY_RULE_SETUP
#line 241 "feiparser.l"
{return token::MODEL;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 242 "feiparser.l"
{return token::ADD;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 243 "feiparser.l"
{return token::DEFINE;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 244 "feiparser.l"
{return token::FIX;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 245 "feiparser.l"
{return token::FREE;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 246 "feiparser.l"
{return token::REMOVE;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 247 "feiparser.l"
{return token::SIMULATE;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 248 "feiparser.l"
{return token::CMD_print;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 249 "feiparser.l"
{return token::CMD_help;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 250 "feiparser.l"
{return token::CMD_whos;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 251 "feiparser.l"
{return token::CMD_check;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 252 "feiparser.l"
{return token::MESH;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 253 "feiparser.l"
{return token::REQUIRE;}
	YY_BREAK
/* New loading stage.... should change */
case 85:
YY_RULE_SETUP
#line 257 "feiparser.l"
{return token::NEW;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 258 "feiparser.l"
{return token::LOADING;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 259 "feiparser.l"
{return token::STAGE;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 260 "feiparser.l"
{return token::RESTART;}
	YY_BREAK
/* ================================================================================================= */
/* ========                     ADD                                                        ========= */
/* ================================================================================================= */
/* Things which can be added (nouns). May be several phrases */
case 89:
YY_RULE_SETUP
#line 267 "feiparser.l"
{return token::NODE;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 268 "feiparser.l"
{return token::ELEMENT;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 269 "feiparser.l"
{return token::MATERIAL;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 270 "feiparser.l"
{return token::LOAD;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 271 "feiparser.l"
{return token::ACCELERATION_FIELD;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 272 "feiparser.l"
{return token::TIMEHISTORY;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 273 "feiparser.l"
{return token::MASS;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 274 "feiparser.l"
{return token::IMPOSEDMOTION;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 275 "feiparser.l"
{return token::DAMPING;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 276 "feiparser.l"
{return token::CONSTRAINT;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 277 "feiparser.l"
{return token::DRM;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 278 "feiparser.l"
{return token::SECTION;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 279 "feiparser.l"
{return token::LOADPATTERN;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 280 "feiparser.l"
{return token::PENALTYDISPLACEMENT;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 281 "feiparser.l"
{return token::LOADVALUE;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 282 "feiparser.l"
{return token::SAVEFORCES;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 283 "feiparser.l"
{return token::RESTOREFORCES;}
	YY_BREAK
/* Element names */
case 106:
YY_RULE_SETUP
#line 286 "feiparser.l"
{return token::EightNodeBrick;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 287 "feiparser.l"
{return token::EightNodeBrickLT;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 288 "feiparser.l"
{return token::TwentyNodeBrick;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 289 "feiparser.l"
{return token::TwentySevenNodeBrick;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 290 "feiparser.l"
{return token::TwentySevenNodeBrickLT;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 291 "feiparser.l"
{return token::EightNodeBrickElastic;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 292 "feiparser.l"
{return token::TwentyNodeBrickElastic;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 293 "feiparser.l"
{return token::TwentySevenNodeBrickElastic;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 294 "feiparser.l"
{return token::EightNodeBrick_upU;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 295 "feiparser.l"
{return token::EightNodeBrick_up;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 296 "feiparser.l"
{return token::TwentyNodeBrick_uPU;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 297 "feiparser.l"
{return token::beam_displacement_based;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 298 "feiparser.l"
{return token::beam_elastic;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 299 "feiparser.l"
{return token::beam_9dof_elastic;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 300 "feiparser.l"
{return token::beam_elastic_lumped_mass;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 301 "feiparser.l"
{return token::FourNodeShellMITC4;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 302 "feiparser.l"
{return token::FourNodeShellNewMITC4;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 303 "feiparser.l"
{return token::ThreeNodeShellANDES;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 304 "feiparser.l"
{return token::FourNodeShellANDES;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 305 "feiparser.l"
{return token::truss;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 306 "feiparser.l"
{return token::penalty;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 307 "feiparser.l"
{return token::penalty_for_applying_generalized_displacement;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 308 "feiparser.l"
{return token::contact;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 309 "feiparser.l"
{return token::variable_node_brick_8_to_27;}
	YY_BREAK
/* Element options */
case 130:
YY_RULE_SETUP
#line 313 "feiparser.l"
{return token::porosity;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 314 "feiparser.l"
{return token::rho_s;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 315 "feiparser.l"
{return token::rho_f;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 316 "feiparser.l"
{return token::k_x;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 317 "feiparser.l"
{return token::k_y;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 318 "feiparser.l"
{return token::k_z;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 319 "feiparser.l"
{return token::K_s;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 320 "feiparser.l"
{return token::K_f;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 321 "feiparser.l"
{return token::pressure;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 322 "feiparser.l"
{return token::cross_section;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 323 "feiparser.l"
{return token::shear_modulus;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 324 "feiparser.l"
{return token::torsion_Jx;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 325 "feiparser.l"
{return token::bending_Iz;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 326 "feiparser.l"
{return token::bending_Iy;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 327 "feiparser.l"
{return token::mass_density;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 328 "feiparser.l"
{return token::xz_plane_vector;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 329 "feiparser.l"
{return token::joint_1_offset;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 330 "feiparser.l"
{return token::joint_2_offset;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 331 "feiparser.l"
{return token::direction;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 332 "feiparser.l"
{return token::stiffness;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 333 "feiparser.l"
{return token::normal_stiffness;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 334 "feiparser.l"
{return token::tangential_stiffness;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 335 "feiparser.l"
{return token::friction_ratio;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 336 "feiparser.l"
{return token::maximum_gap;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 337 "feiparser.l"
{return token::contact_plane_vector;}
	YY_BREAK
/* section types */
case 155:
YY_RULE_SETUP
#line 341 "feiparser.l"
{return token::MembranePlateFiber;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 342 "feiparser.l"
{return token::ElasticMembranePlate;}
	YY_BREAK
/* section options */
case 157:
YY_RULE_SETUP
#line 345 "feiparser.l"
{return token::thickness;}
	YY_BREAK
/* Material Names*/
case 158:
YY_RULE_SETUP
#line 348 "feiparser.l"
{return token::linear_elastic_isotropic_3d;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 349 "feiparser.l"
{return token::vonmises_perfectly_plastic;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 350 "feiparser.l"
{return token::vonmises_perfectly_plastic_accelerated;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 351 "feiparser.l"
{return token::vonmises_isotropic_hardening;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 352 "feiparser.l"
{return token::vonmises_isotropic_hardening_accelerated;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 353 "feiparser.l"
{return token::vonmises_kinematic_hardening;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 354 "feiparser.l"
{return token::vonmises_linear_kinematic_hardening;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 355 "feiparser.l"
{return token::vonmises_kinematic_hardening_accelerated;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 356 "feiparser.l"
{return token::vonmises_linear_kinematic_hardening_accelerated;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 357 "feiparser.l"
{return token::sanisand2008;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 358 "feiparser.l"
{return token::camclay;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 359 "feiparser.l"
{return token::camclay_accelerated;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 360 "feiparser.l"
{return token::sanisand2004;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 361 "feiparser.l"
{return token::druckerprager_isotropic_hardening;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 362 "feiparser.l"
{return token::druckerprager_isotropic_hardening_accelerated;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 363 "feiparser.l"
{return token::druckerprager_kinematic_hardening;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 364 "feiparser.l"
{return token::druckerprager_kinematic_hardening_accelerated;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 365 "feiparser.l"
{return token::druckerprager_perfectly_plastic;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 366 "feiparser.l"
{return token::druckerprager_perfectly_plastic_accelerated;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 367 "feiparser.l"
{return token::linear_elastic_crossanisotropic;}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 368 "feiparser.l"
{return token::uniaxial_elastic_1d;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 369 "feiparser.l"
{return token::uniaxial_steel01;}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 370 "feiparser.l"
{return token::uniaxial_steel02;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 371 "feiparser.l"
{return token::uniaxial_concrete02;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 372 "feiparser.l"
{return token::pisano;}
	YY_BREAK
/* LTensor based materials */
case 183:
YY_RULE_SETUP
#line 375 "feiparser.l"
{return token::linear_elastic_isotropic_3d_LT;}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 376 "feiparser.l"
{return token::vonmises_perfectly_plastic_LT;}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 377 "feiparser.l"
{return token::pisanoLT;}
	YY_BREAK
/* Material options */
case 186:
YY_RULE_SETUP
#line 381 "feiparser.l"
{return token::elastic_modulus;}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 382 "feiparser.l"
{return token::elastic_modulus_horizontal;}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 383 "feiparser.l"
{return token::elastic_modulus_vertical;}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 384 "feiparser.l"
{return token::viscoelastic_modulus;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 385 "feiparser.l"
{return token::poisson_ratio;}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 386 "feiparser.l"
{return token::poisson_ratio_h_v;}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 387 "feiparser.l"
{return token::poisson_ratio_h_h;}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 388 "feiparser.l"
{return token::shear_modulus_h_v;}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 389 "feiparser.l"
{return token::von_mises_radius;}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 390 "feiparser.l"
{return token::druckerprager_angle;}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 391 "feiparser.l"
{return token::armstrong_frederick_ha;}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 392 "feiparser.l"
{return token::armstrong_frederick_cr;}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 393 "feiparser.l"
{return token::initial_confining_stress;}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 394 "feiparser.l"
{return token::pressure_reference_p0;}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 395 "feiparser.l"
{return token::strain;}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 396 "feiparser.l"
{return token::stress;}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 397 "feiparser.l"
{return token::control;}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 399 "feiparser.l"
{
                                        yylval->value = new Quantity(0.0,unitless);
                                        return token::NUMBER;
                                    }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 403 "feiparser.l"
{
                                        yylval->value = new Quantity(1.0,unitless);
                                        return token::NUMBER;
                                    }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 407 "feiparser.l"
{return token::isotropic_hardening_rate;}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 408 "feiparser.l"
{return token::kinematic_hardening_rate;}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 409 "feiparser.l"
{return token::initial_void_ratio;}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 410 "feiparser.l"
{return token::initial_shear_modulus;}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 411 "feiparser.l"
{return token::initial_bulk_modulus;}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 412 "feiparser.l"
{return token::reference_void_ratio;}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 413 "feiparser.l"
{return token::critical_stress_ratio_M;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 414 "feiparser.l"
{return token::minimum_bulk_modulus;}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 415 "feiparser.l"
{return token::initial_mean_pressure;}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 416 "feiparser.l"
{return token::e0;}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 417 "feiparser.l"
{return token::sanisand2008_Pat;}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 418 "feiparser.l"
{return token::sanisand2008_k_c;}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 419 "feiparser.l"
{return token::sanisand2008_K0;}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 420 "feiparser.l"
{return token::sanisand2008_G0;}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 421 "feiparser.l"
{return token::sanisand2008_alpha_cc;}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 422 "feiparser.l"
{return token::sanisand2008_c;}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 423 "feiparser.l"
{return token::sanisand2008_xi;}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 424 "feiparser.l"
{return token::sanisand2008_lambda;}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 425 "feiparser.l"
{return token::sanisand2008_ec_ref;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 426 "feiparser.l"
{return token::sanisand2008_m;}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 427 "feiparser.l"
{return token::sanisand2008_h0;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 428 "feiparser.l"
{return token::sanisand2008_ch;}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 429 "feiparser.l"
{return token::sanisand2008_nb;}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 430 "feiparser.l"
{return token::sanisand2008_A0;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 431 "feiparser.l"
{return token::sanisand2008_nd;}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 432 "feiparser.l"
{return token::sanisand2008_p_r;}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 433 "feiparser.l"
{return token::sanisand2008_rho_c;}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 434 "feiparser.l"
{return token::sanisand2008_theta_c;}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 435 "feiparser.l"
{return token::sanisand2008_X;}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 436 "feiparser.l"
{return token::sanisand2008_z_max;}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 437 "feiparser.l"
{return token::sanisand2008_cz;}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 438 "feiparser.l"
{return token::sanisand2008_p0;}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 439 "feiparser.l"
{return token::sanisand2008_p_in;}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 440 "feiparser.l"
{return token::yield_strength;}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 441 "feiparser.l"
{return token::strain_hardening_ratio;}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 442 "feiparser.l"
{return token::a2;}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 443 "feiparser.l"
{return token::a3;}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 444 "feiparser.l"
{return token::a4;}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 445 "feiparser.l"
{return token::R0;}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 446 "feiparser.l"
{return token::cR1;}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 447 "feiparser.l"
{return token::cR2;}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 448 "feiparser.l"
{return token::compressive_strength;}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 449 "feiparser.l"
{return token::strain_at_compressive_strength;}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 450 "feiparser.l"
{return token::crushing_strength;}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 451 "feiparser.l"
{return token::strain_at_crushing_strength;}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 452 "feiparser.l"
{return token::tensile_strength;}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 453 "feiparser.l"
{return token::tension_softening_stiffness;}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 454 "feiparser.l"
{return token::sanisand2004_Pat;}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 455 "feiparser.l"
{return token::sanisand2004_G0;}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 456 "feiparser.l"
{return token::sanisand2004_p_cut;}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 457 "feiparser.l"
{return token::sanisand2004_Mc;}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 458 "feiparser.l"
{return token::sanisand2004_c;}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 459 "feiparser.l"
{return token::sanisand2004_lambda_c;}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 460 "feiparser.l"
{return token::sanisand2004_xi;}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 461 "feiparser.l"
{return token::sanisand2004_ec_ref;}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 462 "feiparser.l"
{return token::sanisand2004_m;}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 463 "feiparser.l"
{return token::sanisand2004_h0;}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 464 "feiparser.l"
{return token::sanisand2004_ch;}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 465 "feiparser.l"
{return token::sanisand2004_nb;}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 466 "feiparser.l"
{return token::sanisand2004_A0;}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 467 "feiparser.l"
{return token::sanisand2004_nd;}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 468 "feiparser.l"
{return token::sanisand2004_z_max;}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 469 "feiparser.l"
{return token::sanisand2004_cz;}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 470 "feiparser.l"
{return token::strain_increment_size;}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 471 "feiparser.l"
{return token::maximum_strain;}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 472 "feiparser.l"
{return token::number_of_times_reaching_maximum_strain;}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 473 "feiparser.l"
{return token::constitutive;}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 474 "feiparser.l"
{return token::testing;}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 475 "feiparser.l"
{return token::constant;}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 476 "feiparser.l"
{return token::mean;}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 477 "feiparser.l"
{return token::triaxial;}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 478 "feiparser.l"
{return token::drained;}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 479 "feiparser.l"
{return token::undrained;}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 480 "feiparser.l"
{return token::simple;}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 481 "feiparser.l"
{return token::shear;}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 482 "feiparser.l"
{return token::number_of_subincrements;}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 483 "feiparser.l"
{return token::maximum_number_of_iterations;}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 484 "feiparser.l"
{return token::tolerance_1;}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 485 "feiparser.l"
{return token::tolerance_2;}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 486 "feiparser.l"
{return token::Gauss;}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 487 "feiparser.l"
{return token::each;}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 488 "feiparser.l"
{return token::points;}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 489 "feiparser.l"
{return token::point;}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 490 "feiparser.l"
{return token::single;}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 491 "feiparser.l"
{return token::value;}
	YY_BREAK
/* Pisano Model options  */
case 290:
YY_RULE_SETUP
#line 495 "feiparser.l"
{return token::M_in;}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 496 "feiparser.l"
{return token::kd_in;}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 497 "feiparser.l"
{return token::xi_in;}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 498 "feiparser.l"
{return token::h_in;}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 499 "feiparser.l"
{return token::m_in;}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 500 "feiparser.l"
{return token::beta_min;}
	YY_BREAK
/* Load options */
case 296:
#line 504 "feiparser.l"
case 297:
#line 505 "feiparser.l"
case 298:
#line 506 "feiparser.l"
case 299:
#line 507 "feiparser.l"
case 300:
#line 508 "feiparser.l"
case 301:
#line 509 "feiparser.l"
case 302:
#line 510 "feiparser.l"
case 303:
#line 511 "feiparser.l"
case 304:
YY_RULE_SETUP
#line 511 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::FORCE;
                                    }
	YY_BREAK
/* Acceleration field options*/
case 305:
YY_RULE_SETUP
#line 517 "feiparser.l"
{return token::ax;}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 518 "feiparser.l"
{return token::ay;}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 519 "feiparser.l"
{return token::az;}
	YY_BREAK
/* Time-History types */
case 308:
YY_RULE_SETUP
#line 522 "feiparser.l"
{return token::TH_PATH_SERIES;}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 523 "feiparser.l"
{return token::TH_PATH_TIME_SERIES;}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 524 "feiparser.l"
{return token::TH_LINEAR;}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 525 "feiparser.l"
{return token::TH_FROM_REACTIONS;}
	YY_BREAK
/* Element load types */
case 312:
YY_RULE_SETUP
#line 528 "feiparser.l"
{return token::self_weight;}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 529 "feiparser.l"
{return token::surface;}
	YY_BREAK
/* Time-History options */
case 314:
YY_RULE_SETUP
#line 532 "feiparser.l"
{return token::startTime;}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 533 "feiparser.l"
{return token::endTime;}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 534 "feiparser.l"
{return token::Period;}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 535 "feiparser.l"
{return token::Phase;}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 536 "feiparser.l"
{return token::Amplitude;}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 537 "feiparser.l"
{return token::frequency;}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 538 "feiparser.l"
{return token::frequency1;}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 539 "feiparser.l"
{return token::frequency2;}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 540 "feiparser.l"
{return token::frequency3;}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 541 "feiparser.l"
{return token::frequency4;}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 542 "feiparser.l"
{return token::MaxTime;}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 543 "feiparser.l"
{return token::MAGNITUDES;}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 544 "feiparser.l"
{return token::MAGNITUDE;}
	YY_BREAK
/* Mass options */
case 327:
YY_RULE_SETUP
#line 547 "feiparser.l"
{return token::mx;}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 548 "feiparser.l"
{return token::my;}
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 549 "feiparser.l"
{return token::mz;}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 550 "feiparser.l"
{return token::Imx;}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 551 "feiparser.l"
{return token::Imy;}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 552 "feiparser.l"
{return token::Imz;}
	YY_BREAK
/* Damping model types */
case 333:
YY_RULE_SETUP
#line 555 "feiparser.l"
{return token::DAMPING_RAYLEIGH;}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 556 "feiparser.l"
{return token::DAMPING_CAUGHEY3;}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 557 "feiparser.l"
{return token::DAMPING_CAUGHEY4;}
	YY_BREAK
/* Damping model options */
case 336:
YY_RULE_SETUP
#line 560 "feiparser.l"
{return token::a0;}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 561 "feiparser.l"
{return token::a1;}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 562 "feiparser.l"
{return token::stiffness_to_use;}
	YY_BREAK
case 339:
#line 564 "feiparser.l"
case 340:
#line 565 "feiparser.l"
case 341:
YY_RULE_SETUP
#line 565 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::stiffness_to_use_opt;
                                    }
	YY_BREAK
/* Constraint types */
case 342:
YY_RULE_SETUP
#line 571 "feiparser.l"
{return token::equaldof;}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 572 "feiparser.l"
{return token::equaldof;}
	YY_BREAK
/* Constraint options */
case 344:
YY_RULE_SETUP
#line 575 "feiparser.l"
{return token::master;}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 576 "feiparser.l"
{return token::slave;}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 577 "feiparser.l"
{return token::dof_to_constrain;}
	YY_BREAK
/* DRM OPtions */
case 347:
YY_RULE_SETUP
#line 580 "feiparser.l"
{return token::scale_factor;}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 581 "feiparser.l"
{return token::displacement_scale_unit;}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 582 "feiparser.l"
{return token::velocity_scale_unit;}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 583 "feiparser.l"
{return token::acceleration_scale_unit;}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 584 "feiparser.l"
{return token::number_of_steps;}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 585 "feiparser.l"
{return token::number_of_drm_nodes;}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 586 "feiparser.l"
{return token::number_of_drm_elements;}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 587 "feiparser.l"
{return token::x_max;}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 588 "feiparser.l"
{return token::x_min;}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 589 "feiparser.l"
{return token::y_max;}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 590 "feiparser.l"
{return token::y_min;}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 591 "feiparser.l"
{return token::z_max;}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 592 "feiparser.l"
{return token::z_min;}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 593 "feiparser.l"
{return token::element_file;}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 594 "feiparser.l"
{return token::nodes_file;}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 595 "feiparser.l"
{return token::displacement_file;}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 596 "feiparser.l"
{return token::acceleration_file;}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 597 "feiparser.l"
{return token::velocity_file;}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 598 "feiparser.l"
{return token::force_file;}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 599 "feiparser.l"
{return token::series_file;}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 600 "feiparser.l"
{return token::time_series_file;}
	YY_BREAK
/* ================================================================================================= */
/* ========                     DEFINE                                                     ========= */
/* ================================================================================================= */
/* Defineable things */
case 368:
YY_RULE_SETUP
#line 608 "feiparser.l"
{return token::ALGORITHM;}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 609 "feiparser.l"
{return token::CONVERGENCE_TEST;}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 610 "feiparser.l"
{return token::SOLVER;}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 611 "feiparser.l"
{return token::DYNAMICINTEGRATOR;}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 612 "feiparser.l"
{return token::STATICINTEGRATOR;}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 613 "feiparser.l"
{return token::OUTPUT;}
	YY_BREAK
/* Algorithm options*/
case 374:
#line 617 "feiparser.l"
case 375:
#line 618 "feiparser.l"
case 376:
#line 619 "feiparser.l"
case 377:
#line 620 "feiparser.l"
case 378:
#line 621 "feiparser.l"
case 379:
YY_RULE_SETUP
#line 621 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::ALGNAME;
                                     }
	YY_BREAK
/* Test options */
case 380:
#line 627 "feiparser.l"
case 381:
#line 628 "feiparser.l"
case 382:
YY_RULE_SETUP
#line 628 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::TESTNAME;
                                    }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 632 "feiparser.l"
{return token::tolerance;}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 633 "feiparser.l"
{return token::maximum_iterations;}
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 634 "feiparser.l"
{return token::verbose_level;}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 635 "feiparser.l"
{return token::minimum_time_step;}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 636 "feiparser.l"
{return token::maximum_time_step;}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 637 "feiparser.l"
{return token::number_of_iterations;}
	YY_BREAK
/* define solver options */
case 389:
#line 641 "feiparser.l"
case 390:
#line 642 "feiparser.l"
case 391:
#line 643 "feiparser.l"
case 392:
#line 644 "feiparser.l"
case 393:
YY_RULE_SETUP
#line 644 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::SOLVERNAME;
                                    }
	YY_BREAK
/* define static and dynamic integrator options */
case 394:
YY_RULE_SETUP
#line 650 "feiparser.l"
{return token::DYNAMICINTEGRATOR_NEWMARK;}
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 651 "feiparser.l"
{return token::DYNAMICINTEGRATOR_HHT;}
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 652 "feiparser.l"
{return token::STATICINTEGRATOR_DISPLACEMENT;}
	YY_BREAK
/* SIMULATE*/
case 397:
YY_RULE_SETUP
#line 656 "feiparser.l"
{return token::STATIC;}
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 657 "feiparser.l"
{return token::DYNAMIC;}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 658 "feiparser.l"
{return token::TRANSIENT;}
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 659 "feiparser.l"
{return token::VARIABLETRANSIENT;}
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 660 "feiparser.l"
{return token::EIGEN;}
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 661 "feiparser.l"
{return token::USING;}
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 662 "feiparser.l"
{return token::time_step;}
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 663 "feiparser.l"
{return token::number_of_modes;}
	YY_BREAK
/* OUTPUT */
case 405:
YY_RULE_SETUP
#line 666 "feiparser.l"
{return token::BINARY;}
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 667 "feiparser.l"
{return token::TEXT;}
	YY_BREAK
/* ================================================================================================= */
/* ========                    AUXILLIARY WORDS                                            ========= */
/* ================================================================================================= */
case 407:
YY_RULE_SETUP
#line 674 "feiparser.l"
{return token::AT;}
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 675 "feiparser.l"
{return token::ALL;}
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 676 "feiparser.l"
{return token::AND;}
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 677 "feiparser.l"
{return token::TEXTDOFS;}
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 678 "feiparser.l"
{return token::FACTOR;}
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 679 "feiparser.l"
{return token::INCREMENT;}
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 680 "feiparser.l"
{return token::NAME;}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 681 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 682 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 683 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 684 "feiparser.l"
{return token::of;}
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 685 "feiparser.l"
{return token::STEPS;}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 686 "feiparser.l"
{return token::TO;}
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 687 "feiparser.l"
{return token::TYPE;}
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 688 "feiparser.l"
{return token::USE;}
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 689 "feiparser.l"
{return token::WITH;}
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 690 "feiparser.l"
{return token::NODES;}
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 691 "feiparser.l"
{return token::DOMAIN_;}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 692 "feiparser.l"
{return token::dof;}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 693 "feiparser.l"
{return token::RESPONSE;}
	YY_BREAK
/* Greek */
case 427:
YY_RULE_SETUP
#line 696 "feiparser.l"
{return token::alpha;}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 697 "feiparser.l"
{return token::beta;}
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 698 "feiparser.l"
{return token::gamma;}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 699 "feiparser.l"
{return token::lambda;}
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 700 "feiparser.l"
{return token::kappa;}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 701 "feiparser.l"
{return token::delta;}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 704 "feiparser.l"
{return token::INTEGRATIONPOINTS;}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 705 "feiparser.l"
{return token::IntegrationRule;}
	YY_BREAK
/* DOFS */
case 435:
#line 710 "feiparser.l"
case 436:
#line 711 "feiparser.l"
case 437:
#line 712 "feiparser.l"
case 438:
#line 713 "feiparser.l"
case 439:
#line 714 "feiparser.l"
case 440:
#line 715 "feiparser.l"
case 441:
#line 716 "feiparser.l"
case 442:
#line 717 "feiparser.l"
case 443:
#line 718 "feiparser.l"
case 444:
YY_RULE_SETUP
#line 718 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::DOF;
                                    }
	YY_BREAK
/*Other language commands*/
case 445:
#line 725 "feiparser.l"
case 446:
#line 726 "feiparser.l"
case 447:
YY_RULE_SETUP
#line 726 "feiparser.l"
{
                                    yylval->ident = new string(yytext);
                                    return token::BYE;
                                }
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 730 "feiparser.l"
{void show_einstein(); show_einstein();}
	YY_BREAK
/* ================================================================================================= */
/* ========                     NON KEYWORDS                                               ========= */
/* ================================================================================================= */
/* names */
case 449:
YY_RULE_SETUP
#line 740 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::IDENT;
                                    }
	YY_BREAK
/*numbers*/
case 450:
#line 747 "feiparser.l"
case 451:
YY_RULE_SETUP
#line 747 "feiparser.l"
{
                                        yylval->value = new Quantity(atof(yytext), unitless);
                                        return token::NUMBER;
                                    }
	YY_BREAK
/* End-of-file discards current file and returns to the previous, otherwise to the interactive prompt */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IFILE):
case YY_STATE_EOF(COMMENT):
#line 752 "feiparser.l"
{
                                        if (popfile()==0)
                                        {
                                            if(FLAG_interactive_mode == 1)
                                            {
                                                newstdin();
                                                yyrestart(yyin);
                                                //yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
                                                prompt = thePrompt;
                                                //cout << prompt;
                                            }
                                            else
                                            {
                                                cout << endl << "Program exits! " << endl;
                                                exit(0);
                                            }

                                        }
                                        if (strncmp(curfilename, initial, 5) == 0) //I dont like strncmp :(
                                        {
                                            prompt = thePrompt;
                                            //cout << prompt;
                                        }
                                        yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
                                    }
	YY_BREAK
/* comments */
case 452:
YY_RULE_SETUP
#line 779 "feiparser.l"

	YY_BREAK
case 453:
YY_RULE_SETUP
#line 780 "feiparser.l"

	YY_BREAK
/* ignore white space, tabs and carriage return*/
case 454:
YY_RULE_SETUP
#line 784 "feiparser.l"
//{yylloc -> step();}
	YY_BREAK
/* ignore newline*/
/*\n                                  {yylloc -> lines(1);} */
case 455:
/* rule 455 can match eol */
YY_RULE_SETUP
#line 788 "feiparser.l"
{
                                        yycolumn = 1;
                                    }
	YY_BREAK
/* Match text strings */
case 456:
/* rule 456 can match eol */
YY_RULE_SETUP
#line 793 "feiparser.l"
{
                                        std::string* thisString = new std::string(yytext);
                                        yylval->ident = thisString;
                                        return token::STRING;
                                    }
	YY_BREAK
/* catch-all of the rest and report (only useless characters like ? get to this point */
case 457:
YY_RULE_SETUP
#line 800 "feiparser.l"
{ cout << "Failed to parse the character at line " << yylineno << " : " << *yytext << endl; }
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 802 "feiparser.l"
ECHO;
	YY_BREAK
#line 4801 "feiparser.lex.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2911 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2911 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2910);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 802 "feiparser.l"




int newfile(char* fn) {
    FILE *f = fopen(fn, "r");

    bufstack *bs = (bufstack*) malloc(sizeof( bufstack)) ;

    if (!f)     {perror(fn); return 0 ;}
    if (!bs)    {perror("Out of memory."); exit(1);}

    if (curbs) curbs->lineno = yylineno;
    bs->prev = curbs;

    bs->bs = yy_create_buffer(f,YY_BUF_SIZE);
    bs -> f = f;
    bs -> filename = fn;
    bs -> lineno = 1;
    yy_switch_to_buffer(bs->bs);
    curbs = bs;
    yylineno = 1;
    curfilename = fn;

    cout << "Including: \"" << fn << "\"" << endl << endl;

    return 1;
}



int newstdin()
{

    FILE *f = stdin;

    bufstack *bs = (bufstack *) malloc(sizeof( bufstack)) ;


    if (!f)
    {
        perror("Could not open STDIN!");
        return 0 ;
    }
    if (!bs)
    {
        perror("Out of memory.");
        exit(1);
    }

    if (curbs)
    {
        curbs->lineno = yylineno;
    }
    bs->prev = curbs;
    bs->bs = yy_create_buffer(f,YY_BUF_SIZE);
    bs -> f = f;
    bs -> lineno = 1;
    bs -> filename = initial;

    yy_switch_to_buffer(bs->bs);
    curbs = bs;


    yylineno = 1;
    curfilename = initial;

    cout << "Input: STDIN" << endl << endl;
    prompt = thePrompt;
    //cout << prompt ;
    return 1;
}

int popfile(void)
{
    bufstack *bs = curbs;
    bufstack *prevbs;

    if (!bs)
    {
        return 0;
    }

    fclose(bs->f);
    yy_delete_buffer(bs->bs);

    prevbs = bs-> prev;
    free(bs);

    if (!prevbs)
    {
        return 0;
    }

    yy_switch_to_buffer(prevbs->bs);
    curbs = prevbs;

    cout << "Done including: \"" << curfilename << "\" (" << yylineno << " lines included)." << endl;
    cout << "Continuing with \"" << curbs->filename << "\" at line " << curbs->lineno << "." << endl;

    cout << endl << prompt;

    yylineno = curbs->lineno;
    curfilename = curbs->filename;

    return 1;
}

int error_behavior()
{
    //while (popfile() != 0); // Discard everything!

    //Start new interactive mode
    if ( FLAG_interactive_mode == 1 )
    {
        newstdin();
        yyrestart(yyin);

        prompt = thePrompt;
        //if (recovery_mode == 1)
        //    prompt = "(safe) " + thePrompt;
    }
    else
    {
        exit(-1);
    }

    return 0;
}


void print_usage()
{
    cout <<
         "ESSI: UCDavis Earthquake-Soil-Structure-Interaction Simulator \n"
         "              -          -    -         -                     \n"
         "Usage: essi [-cfhnsmbe FILENAME]\n"
         "  -c --cpp-output          : Output cpp version of the analysis done. \n"
         "  -f --filename [FILENAME] : Include and run FILENAME. \n"
         "  -h --help                : Print this message. \n"
         "  -n --no-interactive      : Disable interactive mode. \n"
         "  -s --set-variable        : Set a variable from the command line. \n"
         "  -m --model-name [NAME]   : Set the model name from the command line. \n"
         "  -b --binary-output       : The output generated will be in binary instead of plain text. \n"
         " \n\n"
         "Example to set a variable name from command line:\n"
         "    essi -s a=10,b=20,c=30\n"
         "Runs ESSI with variables a, b, and c set to 10, 20 and 30 respectively.\n"
         "At this time, only unitless variables can be set. \n"
         "\n\n";

}



int start_parser(int argc, char**argv)
{
    //Welcome message
    welcome_msg();

    // Generate previously known units list
    set_known_units();

    //Parse Command Line Parameters
    int c;
    char *filename_from_command_line = 0;

    while (1)
    {
        static struct option long_options[] =
        {
            {"binary-output",    no_argument,       0, 'b'},
            {"cpp-output",       no_argument,       0, 'c'},
            {"file",             required_argument, 0, 'f'},
            {"help",             no_argument,       0, 'h'},
            {"model-name",       required_argument, 0, 'm'},
            {"no-interactive",   no_argument,       0, 'n'},
            {"set-variable",     required_argument, 0, 's'},
            {"no-cpp-output",    no_argument,       0, 'x'},
            {0, 0, 0, 0}
        };

        /* getopt_long stores the option index here. */
        int option_index = 0;

        //This is the command line option parser
        c = getopt_long(argc, argv, "cf:hns:xm:", long_options, &option_index);

        /* Detect the end of the options. */
        if (c == -1)
        {
            break;
        }

        switch (c)
        {

            case 'c':  // -c --cpp-output: Create .cpp output
                FLAG_generate_cpp_output = 1;
                break;
            case 'f': // -f --file: Take input from file
                filename_from_command_line = optarg;
                FLAG_run_file = 1;
                break;
            case 'h': // -h --help: print usage
                print_usage();
                return (0);
                break;
            case 'n': // -n --no-interactive: disable interactive mode
                FLAG_interactive_mode = 0;
                break;
            case 's': // -s --set-variable: Set a variable from the command line
                set_variables(optarg);
                break;
            case 'x': // -x --no-cpp-output: disable cpp output (default)
                FLAG_generate_cpp_output = 0;
                break;
            case 'm': // -m --model-name: Set model name from the command line
                set_model_name(optarg);
                break;
            case 'b': //  -b --binary-output: The output generated will be in binary instead of plain text.
                FLAG_binary_output = 1;
                break;
            default:
                print_usage();
                return (0);
        }
    }

    if (optind < argc)
    {
        cout << "Unexpected option" << endl << endl;
        print_usage();
        return (0);
    }

    if (FLAG_interactive_mode)
    {
        newstdin();
    }



    if (FLAG_run_file)
    {
        newfile(filename_from_command_line);
        set_outcppfile_name(string(filename_from_command_line));
        prompt = "";
    }

    // Parse flag
    int exitflag = -1;

    //Construct a parser object
    yy::feiparser parser;

    // Start parsing!
    cout << prompt;
    exitflag = parser.parse();

    //Exit
    return exitflag;
}




#ifdef _PARALLEL_PROCESSING
  #include "../ModifiedOpenSeesServices/domain/domain/partitioned/PartitionedDomain.h"
  #include "../ModifiedOpenSeesServices/graph/partitioner/GraphPartitioner.h"
  #include <../ModifiedOpenSeesServices/actor/objectBroker/FEM_ObjectBroker.h>
  #include <../ModifiedOpenSeesServices/actor/machineBroker/MachineBroker.h>
  #include <../ModifiedOpenSeesServices/actor/machineBroker/MPI_MachineBroker.h>

  extern PartitionedDomain theDomain;
  extern int OPS_PARALLEL_PROCESSING;
  extern int OPS_NUM_SUBDOMAINS;
  extern bool OPS_PARTITIONED;
  extern FEM_ObjectBroker *OPS_OBJECT_BROKER;
  extern MachineBroker  *OPS_MACHINE;
  extern GraphPartitioner  *OPS_GRAPH_PARTITIONER;
  static MPI_MachineBroker *theMachineBroker = 0;
#endif


int main (int argc, char**argv)
{
    int exitflag = -1;

#ifdef _PARALLEL_PROCESSING
    // In parallel processing, a few things have to be setup before starting.

   FEM_ObjectBroker theBroker;
   MPI_MachineBroker theMachine(&theBroker, argc, argv);
   theMachineBroker = &theMachine;
   int rank = theMachine.getPID();
   int np = theMachine.getNP();

   if (rank != 0) //If this is the main machine
   {
	   theMachine.runActors();
   } 
   else  // Or if it is a slave node
   {
    	OPS_OBJECT_BROKER = &theBroker;
    	OPS_MACHINE = &theMachine;
    	OPS_PARALLEL_PROCESSING = np;
    	OPS_NUM_SUBDOMAINS = np - 1;
    	OPS_PARTITIONED	= false;

    	exitflag = start_parser(argc, argv);
    }

    theDomain.clearAll();
    theMachine.shutdown();
#else
    exitflag = start_parser(argc, argv);
#endif
    return exitflag;
}
  


int smaller(int a, int b)
{
    if (a >= b)
    {
        return b;
    }
    else
    {
        return a;
    }
}

// =================================================================================
// Please do not erase! Might make it into the code some day. (Jose Abell)
//
// This code replaces standard input as the main input mechanism, and implements
// a smarter prompt, which has auto replace, code history, etc.
//
// Buggy and unstable as it is. (To make it work, the is a macro that needs to be enabled on top of
// this file)
//
//static int my_yyinput(char *buf, int max_size)
//{
//    int   len;
//
//    if (st_readline_buffer == NULL)
//    {
//        st_readline_used_len = 0;
//        st_readline_buffer = readline(prompt.c_str());
//
//        if (st_readline_buffer == NULL)
//            return 0;
//        else
//        {
//            //strncat(st_readline_buffer, " ", 1);
//        }
//    }
//
//    len = smaller(strlen(st_readline_buffer) - st_readline_used_len, max_size);
//
//    if (len == 0)
//    {
//        strncat(st_readline_buffer, " ", 1);
//        len = 1;
//    }
//
//    strncpy(buf, &st_readline_buffer[st_readline_used_len], len);
//    add_history(st_readline_buffer);
//
//    st_readline_used_len += len;
//    if (st_readline_buffer[st_readline_used_len] == '\0')
//    {
//        free(st_readline_buffer);
//        st_readline_buffer = NULL;
//    }
//
//    return len;
//}
//// =================================================================================

#include <ctime>
void welcome_msg()
{
    time_t rawtime;
    struct tm *timeinfo;
    char timestring[80];
    time ( &rawtime );
    timeinfo = localtime ( &rawtime );
    strftime (timestring, 80, "%b %d %Y at %H:%M:%S", timeinfo);
    cout << "                                                               " << endl;
    cout << "                                                               " << endl;
    cout << "  The Finite Element Interpreter                               " << endl;
    cout << "                                                               " << endl;
    cout << "  Real ESSI                                                  " << endl;
    cout << "  Earthquake Soil Structure Interaction Simulator            " << endl;
    cout << "                                                             " << endl;
    #ifdef _PARALLEL_PROCESSING
    cout << " Parallel processing mode. Main machine!                     " << endl;
    #else
    cout << "  Sequential processing mode.                                " << endl;
    #endif
    cout << "                                                             " << endl;
    cout << "Compiled: " << __DATE__ << " at " << __TIME__  << endl;
    cout << "Time Now: " << timestring  << endl;
    cout << "                                                               " << endl;
    cout << "Static startup tips:                                           " << endl;
    cout << " * Remember: Every command ends with a semicolon ';'.          " << endl;
    cout << " * Type 'quit;' or 'exit;' to finish.                          " << endl;
    cout << " * Run 'essi -h to see available command line options.        " << endl;
    cout << "                                                               " << endl;
}

void set_known_units()
{
    //Base units*/
    global_variables["m"] = Quantity(1.0, m);
    global_variables["kg"] = Quantity(1.0, kg);
    global_variables["s"] = Quantity(1.0, s);

    // Length
    global_variables["cm"] = Quantity(1.0, cm);
    global_variables["mm"] = Quantity(1.0, mm);
    global_variables["Km"] = Quantity(1.0, km);

    //Time
    global_variables["Hz"] = Quantity(1.0, Hz);
    global_variables["ms"] = Quantity(1.0, ms);
    global_variables["ns"] = Quantity(1.0, ns);

    //Force
    global_variables["N"] = Quantity(1.0, N);
    global_variables["kN"] = Quantity(1.0, kN);

    //Pressure
    global_variables["Pa"] = Quantity(1.0, Pa);
    global_variables["kPa"] = Quantity(1.0, kPa);
    global_variables["MPa"] = Quantity(1.0, MPa);
    global_variables["GPa"] = Quantity(1.0, GPa);

    //Constants
    global_variables["g"] = g;  // gravitational acceleration on Earth at sea level and 45degrees of latitude
    global_variables["pi"] = Quantity(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986, unitless); // pi to a useless ammount of significant digits

    // Put these variables in the locked list.... cuz we own this!
    map<string, Quantity>::const_iterator it;
    for (it = global_variables.begin();
            it != global_variables.end();
            it++)
    {
        locked_global_variables.insert(it->first);
    }
}

void set_variables(char *cstring)
{
    string variables(cstring);

    cout << endl << "The following variables are being set from the command line:" << endl << endl;

    while (1)
    {
        size_t i1 = variables.find("=");
        size_t i2 = variables.find(",");

        if (i1 == string::npos)
        {
            break;
        }

        string var_name(variables.substr(0, i1));
        string var_value(variables.substr(i1 + 1, i2 - i1 - 1));

        if (i2 == string::npos)
        {
            variables = "";
        }
        else
        {
            variables = variables.substr(i2 + 1);
        }

        cout << var_name << " = " << var_value << endl;

        double value = boost::lexical_cast<double>(var_value);
        global_variables[var_name] = Quantity(value, unitless); // :) love boost!
    }
    cout << endl << endl;
}




























void show_einstein()
{

    cout << " "                                                                                 << endl;
    cout << "                    .+~                :xx++::"                                    << endl;
    cout << "                   :`. -          .!!X!~\"?!`~!~!. :-:."                           << endl;
    cout << "                  <             .!!!H\":.~ ::+!~~!!!~ `%X."                        << endl;
    cout << "                  '             ~~!M!!>!!X?!!!!!!!!!!...!~."                       << endl;
    cout << "                              <!:!MM!~:XM!!!!!!.:!..~ !.  `<"                      << endl;
    cout << "                  <: `   :~ .:<~!!M!XXHM!!!X!XXHtMMHHHX!  ~ ~"                     << endl;
    cout << "                ~~~~<' ~!!!:!!!!!XM!!M!!!XHMMMRMSXXX!!!!!!:  <`"                   << endl;
    cout << "                  `<  <::!!!!!X!X?M!!M!!XMMMMXXMMMM?!!!!!!?!:~<"                   << endl;
    cout << "               : '~~~<!!!XMMH!!XMXMXHHXXXXM!!!!MMMMSXXXX!!!!!!!~"                  << endl;
    cout << "            :    ::`~!!!MMMMXXXtMMMMMMMMMMMHX!!!!!!HMMMMMX!!!!!: ~"                << endl;
    cout << "               '~:~!!!!!MMMMMMMMMMMMMMMMMMMMMMXXX!!!M??MMMM!!X!!i:"                << endl;
    cout << "               <~<!!!!!XMMMMMMMMMMMM8M8MMMMM8MMMMMXX!!!!!!!!X!?t?!:"               << endl;
    cout << "               ~:~~!!!!?MMMMMM@M@RMRRR$@@MMRMRMMMMMMXSX!!!XMMMX<?X!"               << endl;
    cout << "             :XX <!!XHMMMM88MM88BR$M$$$$8@8RN88MMMMMMMMHXX?MMMMMX!!!"              << endl;
    cout << "           .:X! <XMSM8M@@$$$$$$$$$$$$$$$$$$$B8R$8MMMMMMMMMMMMMMMMX!X"              << endl;
    cout << "          :!?! !?XMMMMM8$$$$8$$$$$$$$$$$$$$BBR$$MMM@MMMMMMMMMMMMMM!!X"             << endl;
    cout << "        ~<!!~ <!!XMMMB$$$$$$$$$$$$$$$$$$$$$$$$MMR$8MR$MMMMMMMMMMMMM!?!:"           << endl;
    cout << "        :~~~ !:X!XMM8$$$$$$$$$$$$$$$$$$$$$$$RR$$MMMMR8NMMMMMMMMMMMMM<!`-"          << endl;
    cout << "    ~:<!:~`~':!:HMM8N$$$$$$$$$$$$$$$$$$$$$$$$$8MRMM8R$MRMMMMMMMMRMMMX!"            << endl;
    cout << "  !X!``~~   :~XM?SMM$B$$$$$$$$$$$$$$$$$$$$$$BR$$MMM$@R$M$MMMMMM$MMMMX?L"           << endl;
    cout << " X~.      : `!!!MM#$RR$$$$$$$$$$$$$$$$$R$$$$$R$M$MMRRRM8MMMMMMM$$MMMM!?:"          << endl;
    cout << " ! ~ <~  !! !!~`` :!!MR$$$$$$$$$$RMM!?!??RR?#R8$M$MMMRM$RMMMM8MM$MMM!M!:>"         << endl;
    cout << ": ' >!~ '!!  !   .!XMM8$$$$$@$$$R888HMM!!XXHWX$8$RM$MR5$8MMMMR$$@MMM!!!< ~"        << endl;
    cout << "!  ' !  ~!! :!:XXHXMMMR$$$$$$$$$$$$$$$$8$$$$8$$$MMR$M$$$MMMMMM$$$MMM!!!!"          << endl;
    cout << " ~<!!!  !!! !!HMMMMMMMM$$$$$$$$$$$$$$$$$$$$$$$$$$MMM$M$$MM8MMMR$$MMXX!!!!/:`"      << endl;
    cout << "  ~!!!  !!! !XMMMMMMMMMMR$$$$$$$$$$$$R$RRR$$$$$$$MMMM$RM$MM8MM$$$M8MMMX!!!!:"      << endl;
    cout << "  !~ ~  !!~ XMMM%!!!XMMX?M$$$$$$$$B$MMSXXXH?MR$$8MMMM$$@$8$M$B$$$$B$MMMX!!!!"      << endl;
    cout << "  ~!    !! 'XMM?~~!!!MMMX!M$$$$$$MRMMM?!%MMMH!R$MMMMMM$$$MM$8$$$$$$MR@M!!!!!"      << endl;
    cout << "  <>    !!  !Mf x@#\"~!t?M~!$$$$$RMMM?Xb@!~`??MS$M@MMM@RMRMMM$$$$$$RMMMMM!!!!"     << endl;
    cout << "  !    '!~ <!!:!?M   !@!M<XM$$R5M$8MMM$! -XXXMMRMBMMM$RMMM@$R$BR$MMMMXX?!X!!"      << endl;
    cout << "  !    '!  !!X!!!?::xH!HM:MM$RM8M$RHMMMX...XMMMMM$RMMRRMMMMMMM8MMMMMMMMX!!X!"      << endl;
    cout << "  !     ~  !!?:::!!!MXMR~!MMMRMM8MMMMMS!!M?XXMMMMM$$M$M$RMMMM8$RMMMMMMMM%X!!"      << endl;
    cout << "  ~     ~  !~~X!!XHMMM?~ XM$MMMMRMMMMMM@MMMMMMMMMM$8@MMMMMMMMRMMMMM?!MMM%HX!"      << endl;
    cout << "           !!!!XSMMXXMM .MMMMMMMM$$$BB8MMM@MMMMMMMR$RMMMMMMMMMMMMMMMXX!?H!XX"      << endl;
    cout << "           XHXMMMMMMMM!.XMMMMMMMMMR$$$8M$$$$$M@88MMMMMMMMMMMMMMM!XMMMXX!!!XM"      << endl;
    cout << "      ~   <!MMMMMMMMRM:XMMMMMMMMMM8R$$$$$$$$$$$$$$$NMMMMMMMM?!MM!M8MXX!!/t!M"      << endl;
    cout << "      '   ~HMMMMMMMMM~!MM8@8MMM!MM$$8$$$$$$$$$$$$$$8MMMMMMM!!XMMMM$8MR!MX!MM"      << endl;
    cout << "          'MMMMMMMMMM'MM$$$$$MMXMXM$$$$$$$$$$$$$$$$RMMMMMMM!!MMM$$$$MMMMM<!M"      << endl;
    cout << "          'MMMMMMMMM!'MM$$$$$RMMMMMM$$$$$$$$$$$$$$$MMM!MMMX!!MM$$$$$M$$M$M!M"      << endl;
    cout << "           !MMMMMM$M! !MR$$$RMM8$8MXM8$$$$$$$$$$$$NMMM!MMM!!!?MRR$$RXM$$MR!M"      << endl;
    cout << "           !M?XMM$$M.< !MMMMMMSUSRMXM$8R$$$$$$$$$$#$MM!MMM!X!t8$M$MMMHMRMMX$"      << endl;
    cout << "    ,-,   '!!!MM$RMSMX:.?!XMHRR$RM88$$$8M$$$$$R$$$$8MM!MMXMH!M$$RMMMMRNMMX!$"      << endl;
    cout << "   -'`    '!!!MMMMMMMMMM8$RMM8MBMRRMR8RMMM$$$$8$8$$$MMXMMMMM!MR$MM!M?MMMMMM$"      << endl;
    cout << "          'XX!MMMMMMM@RMM$MM@$$BM$$$M8MMMMR$$$$@$$$$MM!MMMMXX$MRM!XH!!??XMMM"      << endl;
    cout << "          `!!!M?MHMMM$RMMMR@$$$$MR@MMMM8MMMM$$$$$$$WMM!MMMM!M$RMM!!.MM!%M?~!"      << endl;
    cout << "           !!!!!!MMMMBMM$$RRMMMR8MMMMMRMMMMM8$$$$$$$MM?MMMM!f#RM~    `~!!!~!"      << endl;
    cout << "           ~!!HX!!~!?MM?MMM??MM?MMMMMMMMMRMMMM$$$$$MMM!MMMM!!"                     << endl;
    cout << "           '!!!MX!:`~~`~~!~~!!!!XM!!!?!?MMMM8$$$$$MMMMXMMM!!"                      << endl;
    cout << "            !!~M@MX.. <!!X!!!!XHMHX!!``!XMMMB$MM$$B$M!MMM!!"                       << endl;
    cout << "            !!!?MRMM!:!XHMHMMMMMMMM!  X!SMMX$$MM$$$RMXMMM~"                        << endl;
    cout << "             !M!MMMM>!XMMMMMMMMXMM!!:!MM$MMMBRM$$$$8MMMM~"                         << endl;
    cout << "             `?H!M$R>'MMMM?MMM!MM6!X!XM$$$MM$MM$$$$MX$f"                           << endl;
    cout << " _______      `MXM$8X MMMMMMM!!MM!!!!XM$$$MM$MM$$$RX@\""                           << endl;
    cout << "/       \\_/|   ~M?$MM !MMMMXM!!MM!!!XMMM$$$8$XM$$RM!`"                            << endl;
    cout << "|Go AGS! _/    !XMMM !MMMMXX!XM!!!HMMMM$$$$RH$$M!~"                                << endl;
    cout << "\\_______/       'M?MM `?MMXMM!XM!XMMMMM$$$$$RM$$#"                                << endl;
    cout << "                 `>MMk ~MMHM!XM!XMMM$$$$$$BRM$M\""                                 << endl;
    cout << "                  ~`?M. !M?MXM!X$$@M$$$$$$RMM#"                                    << endl;
    cout << "                    `!M  !!MM!X8$$$RM$$$$MM#`"                                     << endl;
    cout << "                      !% `~~~X8$$$$8M$$RR#`"                                       << endl;
    cout << "                       !!x:xH$$$$$$$R$R*`"                                         << endl;
    cout << "                        ~!?MMMMRRRM@M#`       -Sushil-"                            << endl;
    cout << "                         `~???MMM?M\"`"                                            << endl;
    cout << "                             ``~~"                                                 << endl;
}


