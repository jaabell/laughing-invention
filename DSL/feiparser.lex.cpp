#line 2 "feiparser.lex.c"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 465
#define YY_END_OF_BUFFER 466
static yyconst short int yy_acclist[3179] =
    {   0,
      466,  464,  465,  461,  464,  465,  462,  465,  461,  464,
      465,    8,  464,  465,  464,  465,  419,  464,  465,    4,
      464,  465,   29,  464,  465,   10,  464,  465,   15,  464,
      465,    3,  464,  465,    1,  464,  465,    9,  464,  465,
        2,  464,  465,  464,  465,    5,  464,  465,  458,  464,
      465,  458,  464,  465,  458,  464,  465,  458,  464,  465,
      458,  464,  465,   16,  464,  465,   24,  464,  465,    7,
      464,  465,   23,  464,  465,  456,  464,  465,  456,  464,
      465,  456,  464,  465,  456,  464,  465,  456,  464,  465,
      456,  464,  465,  456,  464,  465,  456,  464,  465,  456,

      464,  465,  456,  464,  465,  456,  464,  465,  456,  464,
      465,  456,  464,  465,  456,  464,  465,  456,  464,  465,
      456,  464,  465,  456,  464,  465,  456,  464,  465,   13,
      464,  465,   14,  464,  465,    6,  464,  465,  456,  464,
      465,  456,  464,  465,  456,  464,  465,  456,  464,  465,
      456,  464,  465,  456,  464,  465,  456,  464,  465,  456,
      464,  465,  456,  464,  465,  456,  464,  465,  456,  464,
      465,  456,  464,  465,  456,  464,  465,  456,  464,  465,
      456,  464,  465,  451,  456,  464,  465,  456,  464,  465,
      456,  464,  465,  456,  464,  465,  456,  464,  465,  456,

      464,  465,  456,  464,  465,  456,  464,  465,  456,  464,
      465,  456,  464,  465,   11,  464,  465,   30,  464,  465,
       12,  464,  465,   60,   61,  465,   61,  465,  465,  463,
      460,   21,   19,   17,   18,  458,  459,   20,  457,  458,
      458,  458,   28,   25,   26,   27,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  299,  456,  300,  456,  301,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  302,  456,  303,  456,  304,  456,  456,  456,  418,
      456,  456,  456,  242,  456,  456,  456,  456,  448,  456,
      449,  456,  450,  456,  456,  456,   22,  339,  456,  340,

      456,  239,  456,  240,  456,  241,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  410,  456,  308,  456,  309,
      456,  310,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,   54,  456,  456,  456,
      213,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,   50,
      456,  456,   56,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  330,
      456,  331,  456,  332,  456,  456,  456,  456,  456,  456,
      420,  456,  456,  456,  456,  456,  456,  456,  456,  456,

      456,  445,  456,  446,  456,  447,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  422,  456,  456,  456,  456,  456,  456,  442,  456,
      443,  456,  444,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,   60,  460,  459,  457,  458,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  333,
      456,  334,  456,  335,  456,  456,  456,  147,  456,  146,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,   80,  456,
      456,  411,  456,  456,  456,  412,  456,  456,  456,  456,

      456,  456,  456,  456,  456,  454,  456,  243,  456,  244,
      456,  456,  456,  456,  456,  456,   62,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  428,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,   73,  456,  456,  456,  456,  456,
       82,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  143,  456,  144,
      456,  145,  456,  456,  456,  456,  456,   55,  456,  456,
      456,  456,   78,  456,  456,  456,  456,  456,  456,  456,

      456,  456,  456,  456,  456,   94,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,   93,  456,  456,  456,   63,  456,  456,  456,
      456,  456,  456,  456,  456,  456,   64,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  424,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  457,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  289,  456,  456,  456,  456,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  456,  296,  456,
      456,   68,  456,  456,  456,  456,  456,   69,  456,   70,
      456,  456,  456,  435,  456,  456,  456,  456,   75,  456,
      456,  456,  456,  456,  456,   65,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  413,  456,  456,  456,
      456,  456,  284,  456,  456,  456,  456,  456,   52,  456,
      456,  456,  456,  456,  456,  453,  456,  456,  456,   76,
      456,  456,  430,  456,  456,  456,   83,  456,  456,  456,
      431,  456,  456,  292,  456,  456,   88,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  102,  456,  456,  293,  456,  456,
      105,  456,  456,  456,  456,  456,  273,  456,   91,  456,
      456,  456,  456,  295,  456,  416,  456,  456,   98,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  452,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,   66,  456,  456,  456,   72,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,   67,  456,  456,  456,
      406,  456,   51,  456,  456,  456,  456,  456,  456,  456,

      456,  423,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,   89,  456,  425,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  283,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  434,  456,  456,  456,   71,  456,  456,  456,  456,
      456,  456,  456,   90,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  439,  456,  456,
      456,  456,  456,  456,  456,  456,  401,  456,  456,  456,
      456,  456,  456,  456,  456,  432,  456,  456,  456,  456,

       77,  456,  456,  456,  456,  456,  436,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  438,
      456,  290,  456,  456,  456,  433,  456,  456,  456,   74,
      456,  456,  456,  456,  456,  456,  456,  456,   79,  456,
      456,  456,  426,  456,  456,  456,  456,  456,  456,  456,
      320,  456,  286,  456,  456,  456,  456,   87,  456,  456,
      456,  456,  456,  456,  456,  456,  142,  456,  141,  456,
      456,  456,  456,  456,  456,  278,  456,  456,  456,  456,
      348,  456,  456,   96,  456,  456,  456,  421,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  135,  456,  456,  456,  456,  402,  456,  288,
      456,  456,  456,  456,  456,  456,   53,  456,  456,  291,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      379,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      405,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,   81,  456,  456,
      456,  456,  427,  456,  456,  456,  456,  456,  456,  456,

      407,  456,  456,  456,  456,  456,  456,  414,  456,  456,
      110,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,   35,  456,  456,  456,  456,  456,  456,
       32,  456,  456,   34,  456,  456,  456,  456,  456,  456,
      437,  456,  313,  456,  456,  456,  456,  347,  456,  456,
      456,  456,  456,  456,  378,  456,  456,  417,  456,  373,
      456,  456,  456,  456,  319,  456,  285,  456,  456,  456,
      456,  456,  456,  456,   84,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  277,  456,  456,  287,  456,
      370,  456,  456,  397,  456,  456,  199,  456,  200,  456,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  394,  456,
      456,  456,  456,  456,  456,  456,  393,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      174,  456,  456,   86,  456,  456,  456,  456,  136,  456,
      456,  201,  456,  456,  456,  456,  456,  107,  456,  456,
      408,  456,  456,  275,  456,  456,  398,  456,  456,  456,
       99,  456,  456,  456,  456,  456,  456,  456,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,   37,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,   95,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,   92,  456,  456,   97,  456,  456,  456,
      112,  456,  456,  456,  456,  456,  456,  456,  456,  316,
      456,  456,  456,  456,  271,  456,  456,  456,  456,  456,
      456,  456,  456,  392,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,

      456,  456,  456,  456,  183,  456,  456,  336,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      294,  456,  456,  456,  456,  272,  456,  456,  456,  456,
       58,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  100,  456,  318,  456,  456,  346,  456,  202,
      456,  456,  456,  456,  456,  456,  456,  203,  456,   59,
      456,  456,  456,  456,  456,  456,   38,  456,   33,  456,
      456,   39,  456,   36,  456,  456,  456,  456,  456,  456,
      456,  456,  101,  456,  327,  456,  456,  456,  456,  456,
      456,  456,  391,  456,  456,  456,  456,  140,  456,  148,

      456,  456,  109,  456,  456,  429,  456,  456,  456,  456,
      456,  456,   85,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  274,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  305,  456,  306,
      456,  307,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  368,
      456,  321,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  158,  456,
      456,  456,  455,  456,  456,  456,  345,  456,  456,  322,

      456,  456,  456,  363,  456,  415,  456,  456,  456,  456,
      456,  456,  456,  456,  456,   42,  456,  456,  456,  456,
      456,  456,  456,  329,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  159,
      456,  456,  456,  456,  456,  456,  456,  169,  456,  456,
      403,  456,  383,  456,  456,  399,  456,  276,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  115,  456,
      337,  456,  338,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  389,

      456,  456,  171,  456,  456,  456,  456,  456,  456,  456,
      153,  456,  152,  456,  456,  456,  456,  456,  456,  108,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  365,  456,  323,  456,  324,  456,  325,  456,
      326,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,   40,  456,  456,  456,  456,  456,  456,  114,
      328,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  390,  456,
      456,  456,  456,  456,  456,  456,  317,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  151,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  117,  119,  456,  456,  456,  456,  456,  456,  456,
       49,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  139,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  409,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,   41,  456,
      456,  456,  456,  456,  456,  456,  165,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  311,  456,  456,  456,  456,  456,

      456,  456,  315,  456,  366,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  281,  456,  282,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  116,   45,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  128,  456,  456,
      456,  456,  270,  456,  456,  456,  456,  456,  456,  456,
      456,  358,  456,  298,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      113,  154,  456,  456,  456,  456,  456,  456,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  176,  456,  173,  456,  350,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      104,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  118,  120,  125,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  149,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  188,  456,  456,  456,  456,
      456,  150,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  364,  456,  456,
      385,  456,  456,  456,  456,  456,  456,  124,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  381,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,   57,  456,  164,  456,  314,
      456,  106,  456,  456,  456,  456,  456,  456,   31,  456,

      456,  156,  456,  157,  456,  456,  456,  456,  456,  268,
      456,  456,  456,  456,  456,  162,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  255,  456,  456,  456,  456,  259,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  232,
      456,  456,  219,  456,  456,  456,  456,  456,  223,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  237,  456,  126,  456,
      172,  456,  456,  456,  456,  456,  456,  441,  456,  456,

      456,  376,  456,  456,   48,  456,  456,   43,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  194,  456,
      184,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  377,  456,  456,
      456,  456,  456,  456,  404,  456,  354,  456,  456,  456,
      456,  456,  456,  456,  263,  456,  252,  456,  254,  456,
      456,  261,  456,  266,  456,  456,  260,  456,  456,  262,
      456,  264,  456,  456,  257,  456,  456,  227,  456,  217,
      456,  216,  456,  456,  456,  225,  456,  234,  456,  456,

      224,  456,  456,  456,  226,  456,  228,  456,  235,  456,
      456,  456,  456,  220,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  155,  456,  133,  134,  131,
      456,  456,  382,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  369,  456,  456,  456,  456,  456,
      349,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  160,
      456,  456,  456,  456,  456,  456,  456,  312,  456,  456,

      456,  456,  251,  456,  456,  456,  456,  456,  214,  456,
      456,  456,  215,  456,  456,  456,  229,  456,  456,  456,
      456,  456,  341,  456,  456,  456,  456,  456,  456,  456,
      249,  456,  456,  367,  456,  456,  178,  456,  179,  456,
      180,  456,  456,  456,  456,  192,  456,  456,  343,  456,
      456,  456,  456,  342,  456,  456,  456,  456,  456,  456,
      456,  456,  362,  456,  456,  456,  129,  456,  456,  456,
      456,  456,  456,  456,  456,  247,  456,  456,  361,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  387,  456,

      456,  386,  456,  456,  456,  456,  456,  456,  456,  190,
      456,  189,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  236,  456,  456,  456,  456,  191,  456,  372,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  121,  456,  456,  456,  456,  456,   44,  456,
      456,  456,  456,  456,  103,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  371,  456,  456,
      456,  456,  456,  456,  456,  456,  206,  456,  440,  456,
      456,  456,  456,  456,  384,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  253,  456,

      265,  456,  456,  456,  456,  230,  456,  456,  233,  456,
      456,  456,  456,  456,  163,  456,  456,  456,  456,  400,
      456,  456,  456,  456,  122,  123,  132,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      359,  456,  175,  456,  456,  456,  456,  456,  456,  193,
      456,  456,  456,  456,  360,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  258,  456,  456,  456,  222,  456,
      221,  456,  456,  456,  456,  456,  456,  456,  456,  181,
      456,  456,  352,  456,  456,  456,  456,  456,  395,  456,

      456,  167,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  245,  456,  166,  456,  456,  396,  456,  456,  297,
      456,  456,  456,  208,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  211,  456,  456,  456,  456,  388,  456,
      456,  456,  456,  209,  456,  456,  456,  231,  456,  456,
      456,  456,  456,  161,  456,  456,  456,  187,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  212,  456,  207,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  198,  456,  256,  456,  218,  456,  456,  456,  456,

      267,  456,  456,  456,  456,  168,  456,  456,  456,  456,
      456,  456,  456,  456,  196,  456,  195,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  357,  456,  456,  456,  456,  456,  456,  238,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  353,
      456,  127,  456,  456,  210,  456,  351,  456,  111,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  279,
      456,  456,  456,  456,  456,  456,  456,  137,  456,  344,
      456,   47,  456,   46,  456,  456,  456,  130,  456,  456,
      186,  456,  197,  456,  204,  456,  205,  456,  456,  456,

      456,  355,  456,  356,  456,  456,  456,  456,  456,  456,
      456,  456,  374,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  375,  456,  456,  185,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  380,  456,  456,  170,
      456,  456,  456,  456,  248,  456,  250,  456,  138,  456,
      456,  456,  280,  456,  456,  456,  456,  456,  456,  456,
      456,  182,  456,  456,  246,  456,  177,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  269,  456
    } ;

static yyconst short int yy_accept[2855] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    7,
        9,   12,   15,   17,   20,   23,   26,   29,   32,   35,
       38,   41,   44,   46,   49,   52,   55,   58,   61,   64,
       67,   70,   73,   76,   79,   82,   85,   88,   91,   94,
       97,  100,  103,  106,  109,  112,  115,  118,  121,  124,
      127,  130,  133,  136,  139,  142,  145,  148,  151,  154,
      157,  160,  163,  166,  169,  172,  175,  178,  181,  184,
      188,  191,  194,  197,  200,  203,  206,  209,  212,  215,
      218,  221,  224,  227,  229,  230,  230,  230,  230,  231,
      231,  232,  233,  234,  235,  236,  237,  238,  239,  240,

      241,  241,  242,  243,  243,  243,  243,  244,  245,  246,
      247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      258,  260,  262,  263,  264,  265,  266,  267,  268,  268,
      269,  270,  271,  272,  274,  276,  278,  279,  280,  282,
      283,  284,  286,  287,  288,  289,  291,  293,  295,  296,
      297,  298,  300,  302,  304,  306,  308,  309,  310,  311,
      312,  313,  314,  315,  316,  318,  320,  322,  324,  325,
      326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
      336,  337,  339,  340,  341,  343,  344,  345,  346,  347,
      348,  349,  350,  351,  352,  353,  354,  355,  356,  357,

      358,  359,  360,  362,  363,  365,  366,  367,  368,  369,
      370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
      380,  382,  384,  386,  387,  388,  389,  390,  391,  393,
      394,  395,  396,  397,  398,  399,  400,  401,  402,  404,
      406,  408,  409,  410,  411,  412,  413,  414,  415,  416,
      417,  418,  419,  420,  421,  422,  424,  425,  426,  427,
      428,  429,  431,  433,  435,  436,  437,  438,  439,  440,
      441,  442,  443,  444,  445,  445,  446,  447,  448,  448,
      448,  449,  449,  449,  449,  449,  449,  450,  451,  452,
      453,  454,  455,  456,  457,  458,  459,  460,  462,  464,

      466,  467,  468,  470,  472,  473,  474,  475,  476,  477,
      478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
      488,  489,  491,  492,  494,  495,  496,  498,  499,  500,
      501,  502,  503,  504,  505,  506,  508,  510,  512,  513,
      514,  515,  516,  517,  519,  520,  521,  522,  523,  524,
      525,  526,  527,  529,  530,  531,  532,  533,  534,  535,
      536,  537,  538,  539,  540,  541,  542,  543,  544,  545,
      547,  548,  549,  550,  551,  553,  554,  555,  556,  557,
      558,  559,  560,  561,  562,  563,  564,  565,  566,  567,
      568,  569,  570,  571,  572,  573,  574,  575,  576,  577,

      578,  580,  582,  584,  585,  586,  587,  588,  590,  591,
      592,  593,  595,  596,  597,  598,  599,  600,  601,  602,
      603,  604,  605,  606,  608,  609,  610,  611,  612,  613,
      614,  615,  616,  617,  618,  619,  620,  621,  622,  623,
      624,  625,  626,  627,  628,  629,  630,  631,  632,  633,
      635,  636,  637,  639,  640,  641,  642,  643,  644,  645,
      646,  647,  649,  650,  651,  652,  653,  654,  655,  656,
      657,  658,  659,  660,  661,  662,  663,  664,  666,  667,
      668,  669,  670,  671,  672,  673,  674,  675,  676,  677,
      678,  679,  679,  679,  680,  680,  680,  680,  680,  680,

      681,  682,  683,  684,  685,  686,  687,  688,  689,  690,
      691,  692,  693,  694,  696,  697,  698,  699,  700,  701,
      702,  703,  704,  705,  706,  707,  708,  709,  711,  712,
      714,  715,  716,  717,  718,  720,  722,  723,  724,  726,
      727,  728,  729,  731,  732,  733,  734,  735,  736,  738,
      739,  740,  741,  742,  743,  744,  745,  746,  747,  747,
      749,  750,  751,  752,  753,  755,  756,  757,  758,  759,
      761,  762,  763,  764,  765,  766,  768,  769,  770,  772,
      773,  775,  776,  777,  779,  780,  781,  783,  784,  786,
      787,  789,  790,  791,  792,  793,  794,  795,  796,  797,

      798,  799,  800,  801,  802,  803,  804,  805,  806,  807,
      808,  809,  810,  811,  812,  813,  814,  815,  817,  818,
      820,  821,  823,  824,  825,  826,  827,  829,  831,  832,
      833,  834,  836,  838,  839,  841,  842,  843,  844,  845,
      846,  847,  848,  849,  850,  851,  852,  853,  854,  856,
      857,  858,  859,  860,  861,  862,  863,  864,  865,  866,
      867,  868,  869,  870,  871,  872,  874,  875,  876,  878,
      879,  880,  881,  882,  883,  884,  885,  886,  887,  889,
      890,  891,  893,  895,  896,  897,  898,  899,  900,  901,
      902,  904,  905,  906,  907,  908,  909,  910,  911,  912,

      913,  914,  915,  917,  919,  920,  921,  922,  922,  922,
      922,  922,  922,  922,  923,  924,  925,  926,  927,  928,
      929,  930,  932,  933,  934,  935,  936,  937,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  947,  948,  949,
      950,  951,  952,  954,  955,  956,  958,  959,  960,  961,
      962,  963,  964,  966,  967,  968,  969,  970,  971,  972,
      973,  974,  975,  976,  977,  978,  980,  981,  982,  983,
      983,  984,  985,  986,  987,  989,  990,  991,  992,  993,
      994,  995,  996,  998,  998,  999, 1000, 1001, 1003, 1004,
     1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015,

     1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1038,
     1039, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
     1049, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060,
     1061, 1063, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073,
     1074, 1075, 1076, 1077, 1079, 1081, 1082, 1083, 1084, 1085,
     1086, 1088, 1089, 1090, 1091, 1093, 1094, 1096, 1097, 1098,
     1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1108,
     1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1120,
     1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1132, 1133,

     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1135, 1136, 1137,
     1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
     1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158,
     1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190,
     1191, 1192, 1193, 1193, 1195, 1196, 1197, 1198, 1199, 1200,
     1201, 1203, 1204, 1205, 1205, 1206, 1206, 1207, 1208, 1210,
     1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
     1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1233,

     1234, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1245, 1245,
     1245, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255,
     1257, 1258, 1260, 1262, 1263, 1264, 1265, 1267, 1269, 1270,
     1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281,
     1282, 1283, 1284, 1285, 1286, 1288, 1289, 1291, 1293, 1294,
     1296, 1297, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
     1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
     1317, 1318, 1319, 1320, 1321, 1322, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
     1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1341,

     1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352,
     1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1363,
     1364, 1366, 1367, 1368, 1369, 1371, 1372, 1374, 1375, 1376,
     1377, 1378, 1380, 1381, 1383, 1384, 1384, 1384, 1386, 1387,
     1389, 1390, 1391, 1393, 1394, 1395, 1395, 1396, 1396, 1397,
     1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
     1408, 1409, 1410, 1411, 1412, 1413, 1415, 1416, 1417, 1418,
     1419, 1420, 1421, 1422, 1423, 1424, 1424, 1424, 1426, 1427,
     1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
     1438, 1439, 1440, 1441, 1442, 1443, 1444, 1446, 1447, 1449,

     1450, 1451, 1453, 1454, 1455, 1456, 1457, 1458, 1458, 1459,
     1460, 1462, 1463, 1464, 1465, 1467, 1468, 1468, 1469, 1470,
     1471, 1472, 1473, 1474, 1476, 1477, 1478, 1479, 1480, 1481,
     1482, 1483, 1484, 1485, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
     1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
     1507, 1508, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
     1518, 1519, 1520, 1521, 1523, 1524, 1525, 1526, 1528, 1529,
     1530, 1531, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1539,
     1539, 1540, 1540, 1541, 1542, 1543, 1545, 1547, 1548, 1548,

     1550, 1550, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1560,
     1560, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1569,
     1571, 1572, 1574, 1576, 1577, 1578, 1579, 1580, 1581, 1581,
     1581, 1582, 1583, 1585, 1587, 1588, 1589, 1590, 1591, 1592,
     1593, 1595, 1596, 1597, 1598, 1600, 1602, 1603, 1605, 1606,
     1608, 1609, 1610, 1611, 1612, 1613, 1615, 1616, 1616, 1617,
     1618, 1619, 1620, 1621, 1622, 1623, 1624, 1624, 1625, 1626,
     1627, 1628, 1629, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
     1638, 1639, 1640, 1641, 1641, 1641, 1641, 1641, 1641, 1642,
     1643, 1644, 1645, 1646, 1647, 1648, 1650, 1652, 1654, 1655,

     1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
     1666, 1667, 1668, 1669, 1670, 1672, 1674, 1675, 1676, 1677,
     1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
     1688, 1689, 1691, 1692, 1692, 1692, 1693, 1693, 1694, 1695,
     1696, 1697, 1698, 1698, 1699, 1700, 1702, 1703, 1704, 1706,
     1706, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
     1718, 1719, 1720, 1721, 1722, 1723, 1724, 1724, 1724, 1726,
     1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
     1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
     1747, 1748, 1749, 1750, 1750, 1752, 1753, 1754, 1755, 1756,

     1757, 1758, 1760, 1760, 1761, 1763, 1765, 1766, 1768, 1770,
     1771, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
     1779, 1779, 1779, 1779, 1780, 1781, 1783, 1785, 1786, 1787,
     1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
     1798, 1799, 1800, 1802, 1803, 1805, 1806, 1807, 1808, 1809,
     1810, 1811, 1813, 1815, 1816, 1817, 1818, 1819, 1820, 1822,
     1823, 1824, 1825, 1826, 1827, 1828, 1828, 1828, 1829, 1829,
     1830, 1831, 1832, 1832, 1833, 1835, 1837, 1839, 1841, 1843,
     1844, 1845, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
     1853, 1855, 1856, 1857, 1858, 1859, 1860, 1860, 1861, 1863,

     1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
     1874, 1875, 1876, 1877, 1878, 1879, 1881, 1882, 1883, 1884,
     1885, 1886, 1887, 1889, 1889, 1890, 1891, 1892, 1893, 1894,
     1895, 1896, 1896, 1897, 1898, 1900, 1901, 1902, 1903, 1903,
     1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
     1914, 1914, 1914, 1914, 1914, 1915, 1916, 1917, 1918, 1919,
     1920, 1921, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
     1931, 1932, 1933, 1934, 1935, 1937, 1938, 1939, 1940, 1941,
     1942, 1943, 1944, 1945, 1947, 1948, 1949, 1950, 1951, 1952,
     1953, 1954, 1955, 1955, 1955, 1956, 1956, 1957, 1958, 1959,

     1959, 1960, 1961, 1962, 1962, 1963, 1964, 1965, 1966, 1967,
     1968, 1969, 1971, 1972, 1973, 1974, 1975, 1976, 1976, 1977,
     1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
     1989, 1990, 1991, 1992, 1993, 1994, 1995, 1997, 1998, 1999,
     2000, 2001, 2002, 2003, 2005, 2007, 2008, 2008, 2009, 2010,
     2011, 2012, 2013, 2014, 2015, 2015, 2016, 2018, 2020, 2021,
     2022, 2023, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
     2031, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032,
     2033, 2033, 2033, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
     2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,

     2052, 2053, 2054, 2055, 2056, 2057, 2058, 2060, 2061, 2062,
     2063, 2065, 2066, 2066, 2067, 2068, 2069, 2070, 2070, 2070,
     2071, 2071, 2072, 2074, 2076, 2076, 2077, 2078, 2079, 2079,
     2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
     2090, 2091, 2092, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
     2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
     2111, 2112, 2113, 2114, 2115, 2117, 2119, 2121, 2122, 2122,
     2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132,
     2133, 2134, 2135, 2136, 2136, 2137, 2138, 2139, 2140, 2141,
     2142, 2143, 2144, 2145, 2146, 2146, 2146, 2147, 2147, 2147,

     2147, 2147, 2147, 2147, 2148, 2149, 2150, 2151, 2152, 2153,
     2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163,
     2164, 2165, 2166, 2167, 2167, 2168, 2169, 2170, 2171, 2172,
     2173, 2174, 2175, 2176, 2176, 2177, 2179, 2180, 2181, 2181,
     2181, 2182, 2182, 2183, 2183, 2184, 2185, 2186, 2186, 2187,
     2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197,
     2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207,
     2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2218,
     2219, 2220, 2221, 2222, 2224, 2224, 2225, 2226, 2227, 2228,
     2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2237,

     2238, 2240, 2241, 2243, 2244, 2245, 2246, 2247, 2248, 2248,
     2248, 2248, 2248, 2248, 2248, 2248, 2248, 2249, 2250, 2251,
     2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261,
     2262, 2263, 2264, 2265, 2266, 2268, 2269, 2269, 2270, 2271,
     2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2279, 2280,
     2281, 2282, 2283, 2284, 2284, 2284, 2285, 2285, 2286, 2287,
     2288, 2290, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299,
     2301, 2302, 2304, 2306, 2307, 2308, 2309, 2310, 2312, 2313,
     2314, 2315, 2316, 2318, 2319, 2320, 2321, 2322, 2323, 2324,
     2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334,

     2335, 2337, 2338, 2339, 2340, 2342, 2343, 2344, 2345, 2346,
     2347, 2348, 2349, 2350, 2352, 2353, 2355, 2356, 2357, 2358,
     2359, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2368,
     2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378,
     2379, 2380, 2381, 2381, 2382, 2383, 2384, 2385, 2386, 2387,
     2389, 2389, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2391,
     2393, 2394, 2395, 2396, 2397, 2398, 2400, 2401, 2402, 2404,
     2405, 2407, 2408, 2410, 2411, 2412, 2413, 2413, 2414, 2415,
     2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2423, 2424,
     2425, 2426, 2427, 2428, 2428, 2428, 2429, 2431, 2431, 2433,

     2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443,
     2444, 2445, 2446, 2447, 2448, 2450, 2451, 2452, 2453, 2454,
     2455, 2457, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2467,
     2469, 2471, 2472, 2474, 2476, 2477, 2479, 2480, 2482, 2484,
     2485, 2487, 2488, 2490, 2492, 2494, 2495, 2496, 2498, 2500,
     2501, 2503, 2504, 2505, 2507, 2509, 2511, 2512, 2513, 2514,
     2516, 2517, 2518, 2518, 2519, 2520, 2521, 2522, 2523, 2524,
     2525, 2526, 2527, 2528, 2529, 2530, 2531, 2531, 2532, 2533,
     2534, 2535, 2536, 2538, 2538, 2538, 2539, 2540, 2541, 2541,
     2541, 2542, 2543, 2545, 2546, 2547, 2548, 2549, 2550, 2551,

     2552, 2553, 2554, 2555, 2555, 2556, 2557, 2558, 2559, 2560,
     2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570,
     2571, 2572, 2572, 2573, 2573, 2574, 2575, 2576, 2577, 2578,
     2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588,
     2589, 2590, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2600,
     2601, 2602, 2603, 2605, 2606, 2607, 2608, 2609, 2611, 2612,
     2613, 2615, 2616, 2617, 2619, 2620, 2621, 2622, 2623, 2623,
     2625, 2626, 2627, 2628, 2629, 2630, 2631, 2633, 2634, 2636,
     2637, 2639, 2641, 2643, 2643, 2644, 2645, 2646, 2648, 2649,
     2649, 2649, 2649, 2649, 2651, 2652, 2653, 2654, 2656, 2657,

     2658, 2659, 2660, 2661, 2662, 2663, 2663, 2665, 2666, 2667,
     2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2678, 2679,
     2681, 2682, 2682, 2683, 2683, 2684, 2685, 2686, 2687, 2688,
     2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698,
     2699, 2701, 2702, 2704, 2705, 2706, 2707, 2708, 2709, 2710,
     2712, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722,
     2723, 2725, 2726, 2727, 2728, 2730, 2731, 2732, 2733, 2734,
     2735, 2736, 2737, 2738, 2739, 2739, 2740, 2741, 2742, 2743,
     2743, 2743, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2751,
     2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761,

     2762, 2763, 2764, 2765, 2766, 2767, 2767, 2768, 2769, 2770,
     2771, 2772, 2773, 2774, 2775, 2776, 2777, 2779, 2781, 2782,
     2783, 2784, 2785, 2787, 2788, 2789, 2790, 2791, 2792, 2793,
     2794, 2795, 2796, 2797, 2798, 2799, 2801, 2803, 2804, 2805,
     2806, 2808, 2809, 2811, 2812, 2813, 2814, 2815, 2817, 2818,
     2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828,
     2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838,
     2839, 2840, 2841, 2843, 2845, 2846, 2847, 2848, 2849, 2850,
     2850, 2852, 2853, 2854, 2855, 2857, 2858, 2859, 2860, 2861,
     2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871,

     2872, 2873, 2874, 2875, 2877, 2878, 2879, 2881, 2883, 2884,
     2885, 2886, 2887, 2888, 2889, 2890, 2892, 2893, 2895, 2896,
     2897, 2898, 2899, 2901, 2902, 2904, 2905, 2906, 2907, 2908,
     2909, 2910, 2911, 2912, 2914, 2916, 2917, 2919, 2920, 2920,
     2922, 2923, 2924, 2926, 2927, 2928, 2929, 2930, 2931, 2932,
     2933, 2934, 2936, 2937, 2938, 2939, 2941, 2942, 2943, 2944,
     2946, 2947, 2948, 2950, 2951, 2952, 2953, 2954, 2956, 2957,
     2958, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968,
     2969, 2970, 2971, 2972, 2973, 2974, 2975, 2975, 2976, 2977,
     2978, 2980, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989,

     2990, 2991, 2992, 2994, 2996, 2998, 2999, 3000, 3001, 3003,
     3004, 3005, 3006, 3008, 3009, 3010, 3011, 3012, 3013, 3014,
     3015, 3017, 3019, 3020, 3021, 3022, 3023, 3023, 3024, 3025,
     3026, 3027, 3028, 3029, 3030, 3031, 3032, 3034, 3035, 3036,
     3037, 3038, 3039, 3041, 3042, 3043, 3044, 3045, 3046, 3047,
     3048, 3049, 3050, 3052, 3054, 3055, 3057, 3059, 3060, 3061,
     3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3072,
     3073, 3074, 3075, 3076, 3077, 3078, 3080, 3082, 3084, 3086,
     3087, 3088, 3090, 3091, 3093, 3095, 3097, 3099, 3100, 3101,
     3102, 3104, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113,

     3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124,
     3126, 3127, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136,
     3137, 3139, 3140, 3142, 3143, 3144, 3145, 3147, 3149, 3151,
     3152, 3153, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162,
     3164, 3165, 3167, 3169, 3170, 3171, 3172, 3173, 3174, 3175,
     3176, 3177, 3179, 3179
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,    1,   29,   30,
       31,   32,    1,    1,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   49,   49,
       57,   58,   59,   60,   61,    1,   62,   63,   64,   65,

       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[91] =
    {   0,
        1,    2,    3,    1,    2,    1,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        1,    1,    6,    6,    6,    6,    5,    6,    6,    6,
        6,    6,    6,    6,    6,    5,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1,    1,    1,
        6,    6,    6,    6,    6,    5,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    1,    1
    } ;

static yyconst short int yy_base[2862] =
    {   0,
        0,    0,   89,   95,    0,    0, 3056, 3057,   99, 3057,
     3057, 3057,   86, 3049, 3023, 3057, 3057, 3057, 3022, 3021,
     3057, 3020,   86,   85,   98,  126,  119,  120, 3004, 3057,
       96, 3018, 3017,    0,   76, 2968,   57,   94, 2984, 2975,
      108, 2983,  126,  111,  108,   61,   80, 2974,  115, 2966,
     2971, 3057, 3057, 3009,  184,  123,  158,  149,  204,  160,
     2977,  110,  176, 2962,  151,  176,  214,  230,  128,  241,
     2955,  175,  249,  266,  263,  232,   98,  144, 2966, 3057,
     3057, 3057,    0, 3057, 3057,  227, 2960,  132, 3057, 3031,
        0, 3057, 3057, 3057, 3057,  334,    0, 3057,  353,  384,

      404, 2987, 2986, 2955, 2954, 2953, 3057, 3057, 3057, 3057,
        0, 2978, 2945, 2947, 2943, 2962, 2957, 2955, 2951,    0,
        0,    0, 2938, 2946, 2957,  168,  197,  111,  210, 2937,
     2946, 2941, 2949,    0,    0,    0, 2968, 2928, 2932, 2930,
     2933,    0, 2922, 2941, 2968,    0,    0,    0, 2930, 2923,
     3057,    0,    0,    0,    0,    0, 2933,  209, 2937,  256,
     2924, 2935, 2925, 2928, 2935,    0,    0,    0,  259, 2921,
     2913, 2928,  284, 2919, 2922, 2925,  289,  312, 2916,  274,
      286,   67,  264, 2914,    0, 2924,  172,  333,  221, 2914,
     2904, 2919,  315,  304,  266, 2908, 2904,  317, 2908, 2911,

     2913, 2906,    0, 2901,  352,  401, 2907,  355, 2899, 2914,
     2899, 2899,  212, 2897,  329, 2901,  376,  322, 2895, 2904,
        0,    0,    0, 2898, 2893, 2882,  244, 2891,    0, 2883,
      235, 2884, 2900,  319,  382, 2891,  392, 2884,    0,    0,
        0, 2884, 2896,  400, 2891,  340, 2894, 2882, 2875,  381,
     2874, 2877,  400,  397, 2877,  389,  412, 2873, 2882,  406,
      399,    0,    0,    0,  405,  410, 2868, 2872,  416, 2865,
     2884, 2883, 2877,    0, 2878,    0,    0,  476,  495,  505,
      524, 2865, 2864, 2874, 2873, 2872, 2886, 2867, 2855, 2869,
     2852, 2852, 2857, 2865, 2848, 2864, 2878,    0,    0,    0,

     2844, 2858,    0,    0, 2842, 2847, 2858, 2850, 2885,  431,
     2844, 2855, 2849, 2842, 2852, 2865, 2867, 2842, 2835, 2843,
     2828,    0, 2831,    0, 2837, 2832,    0, 2824, 2828, 2827,
     2827, 2835, 2837, 2836, 2822,    0,    0,    0, 2832, 2822,
     2830, 2816,  407, 2823, 2810, 2810, 2809, 2811, 2817, 2805,
     2819,  429,   90, 2822, 2813, 2818, 2819, 2811, 2813, 2798,
     2797, 2802, 2809, 2811, 2812, 2808, 2809, 2791, 2788, 2795,
     2801, 2786, 2784, 2798,    0, 2787, 2798,  475, 2797, 2786,
     2785, 2783, 2833, 2779,  434,  461, 2774, 2788,  489, 2777,
     2786, 2776, 2774, 2783, 2786, 2768,  485, 2770, 2764, 2769,

        0,    0,    0, 2766, 2772, 2775, 2777,    0, 2773, 2772,
     2772, 2816, 2760, 2759,  455, 2767,  495, 2757, 2762, 2760,
      492, 2754, 2762, 2746, 2760, 2751, 2761, 2746, 2760, 2752,
     2750, 2739,  484, 2742, 2737, 2741, 2748, 2733, 2749, 2746,
     2735, 2728,  486, 2748, 2738, 2734, 2725, 2738, 2734,    0,
     2741,  489,  469, 2719, 2718, 2719,  501, 2722, 2731,  508,
     2730,  504, 2716, 2714, 2713, 2718, 2728, 2725, 2724, 2709,
     2713, 2725, 2706, 2719, 2707, 2704, 2720,    0, 2706, 2698,
     2709, 2702, 2714, 2712, 2714, 2701, 2693, 2703, 2701, 2693,
     2696, 2695,  564,  574, 2702, 2701, 2699, 2698, 2697, 2725,

     2692, 2694, 2687, 2677, 2689, 2674, 2674, 2674, 2687, 2719,
     2681, 2682, 2688,    0, 2669, 2680, 2709, 2683, 2668, 2682,
     2667, 2671, 2674, 2660, 2676, 2667, 2675,    0, 2662,    0,
     2655, 2671, 2662, 2650,    0, 2709, 2668, 2658, 2666, 2647,
     2660, 2651,    0, 2651,  478, 2641,  541, 2655,    0, 2650,
     2639, 2649, 2647, 2641, 2653, 2650, 2650, 2639, 2630,    0,
     2640, 2634, 2636, 2633,    0, 2631, 2624, 2623, 2637,    0,
     2629, 2620, 2618, 2626, 2612, 2692, 2626, 2616,    0, 2618,
        0, 2614, 2626,    0, 2609, 2609, 2628, 2626,    0, 2626,
        0, 2616, 2605, 2602, 2617, 2612, 2613, 2610, 2613, 2613,

     2602, 2610, 2596, 2599, 2593, 2606, 2597, 2591, 2596, 2589,
     2586, 2604, 2590, 2590, 2598, 2589, 2599,  534, 2641,    0,
     2589, 2597, 2591, 2577, 2574, 2580,    0,    0, 2579, 2579,
     2584,    0,    0, 2574, 2569, 2586, 2581, 2564, 2572, 2583,
     2567, 2576, 2560, 2560, 2559, 2558, 2556, 2566,    0, 2554,
     2555, 2550, 2562, 2555, 2568,  538, 2549, 2562, 2557, 2565,
     2559, 2545, 2550, 2549, 2548,    0, 2554, 2553,    0, 2552,
     2536, 2546, 2535, 2547, 2543, 2532, 2549, 2544,    0, 2539,
     2538,    0,    0, 2535,  157, 2527, 2535, 2524, 2518, 2522,
        0, 2539, 2538, 2514, 2530, 2531, 2534, 2531, 2518, 2517,

     2518, 2525,    0, 2529, 2514, 2515, 2522, 2504, 2519, 2518,
     2532, 2531, 2547, 2534, 2513, 2503, 2511, 2506, 2489, 2504,
     2503,    0, 2493, 2521, 2508, 2490, 2533, 2505, 2496, 2515,
     2485, 2488,  570, 2486, 2485, 2482, 2512, 2481,  114,  151,
      206,  218,    0,  263,  291,    0,  547,  311,  343,  350,
      431,  446,    0,  510,  496,  545,  514,  504,  505,  529,
      545,  549,  544,  541,  551,    0,  538,  548,  560,  549,
      551,  561,  562,  559,    0,  564,  561,  557,  567,  564,
      561,  631,    0,  557,  574,  569,  561,    0,  580,  576,
      573,  565,    0,  578,  582,  581,  583,  575,  588,  572,

      578,  591,  568,  575,  577,  593,  590,  579,  581,  596,
      585,  582,  589,  605,    0,    0,  605,  606,    0,  590,
      593,  596,    0,  591,  608,  595,  605,  607,  596,  597,
        0,  610,  606,    0,  609,  604,  603,  612,  606,  623,
        0,  609,  614,  621,  610,    0,  620,  624,  629,  631,
      619,  624,  621,    0,    0,  639,  641,  627,  620,  625,
      645,  641,  646,  643,    0,  631,    0,  650,  648,    0,
      638,  639,  635,  652,  642,  645,  644,  645,  653,  643,
      662,  649,  656,  657,    0,  664,  659,  660,    0,    0,
      668,  662,  653,  668,  665,    0,  661,    0,  675,  677,

      674,  706,  707,  673,  674,  665,  693,  660,  666,  669,
      685,  689,  686,  676,  692,  721,  682,  694,  681,  683,
      693,  699,  689,    0,  692,  688,  720,  699,  698,  701,
      696,  703,  694,  692,  691,  691,  698,  710,  706,  704,
      710,  709,    0,  701,  695,  702,  717,  709,  704,  724,
      706,  706,  716,  722,  729,  712,  718,  726,    0,  725,
      730,  733,  793,  794,  735,  722,  738,  733,  740,  724,
        0,  732,  746,  743,  733,  748,  741,  736,    0,  746,
        0,  739,  739,  750,  747,  748,  754,  754,  755,  749,
      761,  758,    0,  787,  756,  759,  762,  748,    0,  750,

        0,  749,  758,  756,  814,  755,    0,  776,  776,  777,
      772,  759,  776,    0,  781,  770,  771,  772,  781,    0,
      787,  788,    0,  784,  785,  782,    0,    0,  778,  773,
      776,  790,  781,  783,    0,  793,  780,  780,  787,  796,
      789,  799,  805,  793,    0,  787,    0,    0,  788,  865,
      805,  811,    0,  807,  793,  809,  801,  809,  812,  809,
      814,  806,  807,  817,  822,  813,  811,  825,  815,  808,
      824,  818,  812,  817,  819,  816,  831,  819,  820,  834,
      835,  832,  842,  882,  845,  859,  847,  868,  849,  836,
      872,  869,  853,  834,  842,  851,  853,  872,    0,  840,

      858,  870,  872,  855,  863,    0,  846,  866,  866,  860,
      865,  856,  856,  853,  872,  874,  861,  851,  877,  859,
        0,  859,  859,  872,  882,  878,    0,  879,  873,  881,
      880,    0,  873,    0,  884,  887,  873,    0,  876,  949,
      880,  895,  896,  892,  895,  884,  894,  895,  882,  885,
      895,  902,  892,  906,  896,  889,  966,  970,  898,  913,
      897,  904,  904,  900,  896,    0,  914,  902,  919,  920,
      917,  927,  928,  920,  925,  911,  920,    0,  929,  920,
      923,  931,  937,  938,  935,  936,  926,  930,  925,  931,
      945,  921,  942,  929,  935,  947,    0,  946,    0,  948,

      952,    0,  945,  950,  942,  953,  950,  951,  942,  961,
        0,  954,  964,  965,    0,  947,  948,  950,  966,  969,
      973,  960,  963,    0,  971,  965,  973,  954,  980,  980,
      977,  983,  979,  965, 1045,  978,  979,  978,  980,  990,
     1003,  977,  976, 1007,  980, 1015,  986,  977, 1003,  984,
     1023, 1017,  999,  996, 1010, 1011, 1035,  997, 1013,    0,
     1028,    0, 1003, 1034, 1015,  999, 1007, 1016, 1015, 1017,
     1008, 1006, 1046,    0, 1027, 1027, 1020,    0, 1010, 1017,
     1016,    0, 1019, 1034, 1032, 1036, 1023, 1025, 1024, 1035,
     1023, 1033, 1075, 1031, 1039,    0,    0, 1028, 1041,    0,

     1043,    0, 1049, 1038, 1026, 1052, 1050, 1049,    0, 1042,
     1115, 3057, 1037, 1060, 1049, 1041, 1046, 1040,    0,    0,
     1048,    0,    0, 1064, 1053, 1054, 1067, 1059, 1052, 1053,
     1070, 1057,    0,    0, 1071, 1075, 1081, 1082, 1064, 1080,
        0, 1078, 1083, 1071,    0, 1092, 1077,    0, 1089,    0,
     1136, 1094, 1091, 1090, 1096,    0, 1088, 1088, 1084, 1084,
     1104, 1092, 1106, 1089, 1090, 1091, 1091, 1103, 1097, 1109,
     1134, 1096,    0, 1113, 1118, 1175, 1120, 1109, 1103, 1104,
     1121, 1125, 1108, 1124, 1125, 1117, 1118, 1120, 1152, 1129,
     1126, 1115, 1135, 1132, 1135,    0,    0,    0, 1127, 1133,

     1165, 1122, 1128, 1135, 1158, 1161, 1147, 1136, 1137, 1175,
     1168, 1161, 1138, 1145,    0,    0, 1155, 1156, 1145, 1138,
     1134, 1147, 1159, 1148, 1155, 1145, 1154, 1164, 1149, 1149,
     1152,    0, 1167, 1159, 1170, 1175, 1163, 3057, 1163, 1170,
     1180, 3057, 1237, 1168, 1178, 1225, 1170, 1169,    0, 1175,
        0, 1170, 1177, 1188, 1186, 1180, 1181, 1188, 1195,    0,
     1194, 1200, 1195, 1196, 1203, 1203, 1200, 1201, 1188, 1199,
     1208, 1190, 1190, 1192, 1204, 1193, 1206, 1202, 1204, 1209,
     1219, 1215, 1221, 1221, 1205, 1220, 1225, 1268, 1207, 1220,
     1217, 1209, 1226, 1212, 1233, 1234, 1217, 1233, 1225, 1218,

     1224,    0, 1225, 1236,    0, 1242, 1219,    0,    0, 1241,
     1225, 1233, 1242, 1244, 1230, 1251, 1237, 1231, 1249, 1244,
     1245, 1257, 1258, 1276, 1278,    0,    0, 1254, 1257, 1252,
     1248, 1280, 1260, 1286, 1261, 1257, 1252, 1261, 1269, 1299,
     1276, 1277,    0, 1288,    0, 1266, 1266, 1279, 1281, 1286,
     1279,    0,    0, 1275, 1288, 1278, 1288, 1272,    0, 1294,
     1291, 1277, 1289, 1279, 1286, 1282, 1281, 1296, 1284, 1301,
     1294, 1298, 1295, 1294,    0,    0,    0,    0,    0, 1309,
     1302, 1292, 1301, 1300, 1314, 1311, 1308, 1304, 1304, 1315,
        0, 1313, 1316, 1317, 1316, 1306, 1308, 3057,    0, 1307,

     1312, 1324, 1317, 1313, 1319, 1321, 1321, 1330, 1320, 1331,
     1336, 1320, 1323, 1323, 1339,    0, 1324, 1389, 1333, 1330,
     1346, 1340,    0, 1348, 1334, 1354, 1354, 1341, 1360, 1343,
     1356, 1345, 1345, 1406,    0, 1352, 1356, 1349, 1352, 1356,
     1363, 1370, 1352, 1366, 1358, 1363, 1373, 1365, 1397, 1398,
     1410, 1411, 1393, 1380, 1410, 1381, 1383, 1387, 1385, 1386,
     1387,    0, 1387, 1405, 1379, 1399, 1379, 1420, 1418, 1418,
     1420, 1420, 1405, 1395,    0, 1388, 1397, 1394, 1401, 1411,
     1412, 1412, 1412,    0, 1418, 1414, 1406, 1477, 1404, 1408,
     1406, 1405, 1406, 1424, 1423, 1424, 1409, 1426, 1418, 1418,

     1430, 1415, 1421, 1428, 1427, 1433, 1426, 1440, 1438, 1443,
     1430,    0, 1444, 1427, 1428, 1447, 1429, 1436, 1426,    0,
     1434, 1451, 1453, 1450, 1445, 1452, 1435, 1450, 1454, 1446,
     1444, 1439, 1444, 1450, 1446, 1459,    0, 1464, 1461, 1465,
     1457, 1511, 1456,    0,    0, 1454, 1469, 1463, 1464, 1475,
     1476, 1479, 1479, 1465, 1461, 1487,    0,    0, 1474, 1488,
     1485, 1490, 1488, 1481, 1493, 1490, 1493, 1496, 1477, 1497,
     1494, 1511, 1498, 1513, 1500, 1521, 1522, 1528, 1504, 3057,
     1498, 1495,    0, 1506, 1495, 1496, 1502, 1502, 1498, 1512,
     1499, 1516, 1502, 1503, 1548, 1553, 1526, 1552, 1528, 1524,

     1527, 1526, 1588, 1528, 1533, 1530, 1536, 1532, 1526, 1520,
        0, 1535, 1521, 1537, 1529, 1539, 1545, 1528, 1527, 1530,
     1542, 1538,    0,    0, 1547, 1547, 1544, 1540, 1540, 1556,
     1548, 1558, 1541, 1560, 1545, 1561, 1545, 1559, 1560, 1548,
     1558, 3057,    0, 1567, 1564, 1561, 1571, 1572, 1573, 1554,
     1561, 1562, 1556, 1565, 1559, 1575, 1577, 1577, 1581, 1571,
     1567, 1571, 1582, 1580, 1590, 1591,    0, 1573, 1575, 1594,
     1582, 1575, 1583, 1585, 1598, 1580, 1587, 1597, 3057, 1597,
     1601, 1586, 1601, 1593, 1603, 1604, 1598, 1599, 1612, 1609,
     1609, 1595, 1596, 3057, 1605, 1602, 3057, 1607, 1645, 1646,

     1631, 1600, 1623, 1633, 1612, 1644, 1627, 1624, 1629, 1631,
     1618, 1621, 1630, 1630, 1621, 1653, 1663, 1665, 1664, 1667,
     1629, 1638, 1626, 1639, 1640, 1643, 1629, 1636, 1638, 1632,
     1647, 1633, 1654, 1650, 1637,    0, 1643, 1655, 1659, 1653,
     1663, 1646, 1644, 1661, 1648, 1653, 1650, 1656, 1658, 1658,
     1657, 1675, 1658, 1662, 1666, 1675, 1660, 1661, 1678, 1680,
     1664, 1667, 1672, 1668, 1675, 1670, 1675, 1684, 1687, 1679,
     1694, 1690, 1678, 1692, 1682, 1690, 1695, 1692, 1702, 1685,
     1700, 1733, 1788, 1706, 1706, 1687, 1693, 1691, 1703, 1708,
     1701, 1706, 1709, 1704, 1710, 1703, 1702, 1711, 1705, 1725,

        0, 1721,    0, 1714, 1719, 1711, 1715, 1723, 1731, 1741,
     1733, 1759, 1761, 1765, 1756, 1723, 3057, 1738, 1753, 1734,
     1736, 1739, 1761, 1748, 1749, 1755, 1756, 1744, 1785, 1772,
     1777, 1774, 1779, 1762,    0, 1761, 1760, 1762, 1769, 1768,
     1754, 1771, 1756, 1778, 1761, 1762, 1759, 1763, 1765, 1778,
     1771, 1778, 1785, 1781, 1777, 1794, 1793, 1778, 3057, 1798,
        0,    0, 3057, 1788, 1798, 1791, 1797, 1810, 1804,    0,
     1810,    0,    0, 1811, 1817, 1809, 1819,    0, 1800, 1806,
     1802, 1809,    0, 1805, 1821, 1821, 1809, 1827, 1810, 1811,
     1817, 1813, 1828, 1826, 1830, 1836, 1879, 1880, 1836, 1839,

     1833, 1839, 1885, 1843,    0, 1843, 1846, 1839, 1849, 1892,
     1893, 1894, 1852,    0, 1842, 1847, 1853, 1899, 1858, 1859,
        0, 1859, 1904, 1856, 1857, 1857, 1867, 1860, 1849, 1851,
     1853, 1864, 1860, 1861, 1860, 1871, 1858, 1870, 1868, 1876,
     1873, 1925, 1875, 1883, 1886, 1872, 1867, 1882, 1872,    0,
     1872, 3057, 1873, 1903, 1904, 1933, 1916, 1877, 1879,    0,
     1894, 1880, 1881, 1901, 1884,    0, 1915, 1929,    0, 1922,
        0, 1923,    0, 1924, 1896, 1906, 1907, 1901, 1913, 1897,
     1907, 1903, 1905, 1913, 1919, 1916, 1917, 1903, 1924, 1905,
     1912, 1915, 1927, 1915, 1916, 1917,    0, 1912, 1933, 1928,

     1931, 1922, 1932, 1923, 1919, 1926, 1927, 1928, 1940, 1929,
     1930, 1941, 1943, 1943,    0, 1931, 1950, 1940, 1944, 1934,
        0,    0, 1952, 1956, 1938, 1958, 1945, 1942,    0,    0,
        0, 1941,    0,    0, 1962,    0, 1950,    0,    0, 1961,
        0, 1952,    0,    0,    0, 1946, 1951,    0,    0, 1968,
        0, 1966, 1957,    0,    0,    0, 1962, 1957, 1968,    0,
     1961, 1975, 1961, 1972, 1973, 1970, 1974, 1962, 1974, 1978,
     1977, 1972, 1982, 1968, 1986, 2031, 1987, 1975, 1973, 1991,
     1977, 1992,    0, 1978, 1979, 3057, 3057, 3057, 2009, 1992,
     1983, 2003,    0, 1979, 1980, 1987, 1987, 1999, 2018, 2020,

     2021, 1992, 1999, 2002, 2010, 2004, 2008, 2015, 1999, 2004,
     2012, 2002, 2009, 2021, 3057, 2007, 2018, 2007, 2023, 2017,
     3057, 2086, 2024, 2017, 2074, 2025, 2014, 2029, 2018, 2034,
     2030, 2020, 2032, 2033, 2025, 2025, 2031, 2040, 2031, 2027,
     2033,    0, 2032, 2046, 2037, 2044, 2036, 2037,    0, 2048,
     2054, 2057,    0, 2041, 2058, 2040, 2061,    0, 2055, 2046,
        0, 2063, 2052,    0, 2067, 2048, 2068, 2049, 2054,    0,
     2054, 2060, 2075, 2076, 2063, 2064,    0, 2072,    0, 2075,
        0,    0,    0, 2067, 2074, 2070, 2064,    0, 2072, 2078,
     2079, 2115, 2087,    0, 2104, 2118, 2081,    0, 2085, 2093,

     2107, 2107, 2108, 2100, 2098, 2098,    0, 2098, 2101,    0,
     2105, 2101, 2095, 2103, 2102, 2090, 2110,    0, 2094,    0,
     2108, 2101, 2103, 2098, 2116, 2103, 2114, 2108, 2109, 2122,
     2104, 2103, 2110, 2107, 2113, 2114, 2114, 2115, 2112, 2132,
        0, 2121,    0, 2109, 2122, 2118, 2122, 2133, 2134,    0,
        0, 2135, 2121, 2137, 2139, 2124, 2121, 2145, 2142, 2144,
        0, 2146, 2149, 2127,    0, 3057, 2133, 2146, 2136, 2136,
     2149, 2152, 2158, 2201, 2140, 2158, 2153, 2151, 2161, 2162,
     2163, 2205, 3057, 2156, 2154, 2155, 2165, 2167,    0, 2184,
     2185, 2195, 2171, 3057, 2177, 2167, 2177, 2176, 2176, 2178,

     2163, 2169, 2165, 2171, 2187, 2183, 2184, 3057, 2170, 2173,
     2174, 2188, 2173, 2176, 2175, 2185,    0,    0, 2191, 2192,
     2181, 2181,    0, 2193, 2182, 2204, 2200, 2206, 2193, 2195,
     2208, 2210, 2202, 2206, 2212,    0,    0, 2214, 2209, 2215,
        0, 2217,    0, 2209, 2219, 2219, 2212,    0, 2203, 2204,
     2264, 3057, 2214, 2206, 2206, 2223, 3057, 3057, 3057, 2228,
     2216, 2213, 2226, 2215, 2262, 2263, 2222, 2237, 2217, 2239,
     2239, 2241,    0,    0, 2234, 2225, 2235, 2233, 2225, 2227,
        0, 2235, 2240, 2230,    0, 2232, 2232, 2235, 2233, 2255,
     2256, 2238, 2240, 2239, 2241, 2247, 2248, 2249, 2245, 2260,

     2263, 2251, 2253,    0, 2269, 2267,    0,    0, 2268, 2250,
     2254, 2254, 2249, 2257, 2257,    0, 2278,    0, 2260, 2280,
     2261, 2262,    0, 2269,    0, 2304, 2305, 2283, 2284, 2274,
     2286, 2271, 2278,    0,    0, 2277,    0, 2279, 2287,    0,
     2270, 2288,    0, 2280, 2294, 2281, 2283, 2284, 2302, 2289,
     2300,    0, 2291, 2287, 2293,    0, 2295, 2302, 2353,    0,
     2309, 2310,    0, 2309, 2295, 2307, 2312,    0, 2309, 2353,
        0, 2317, 2316, 2321, 2318, 2339, 2340, 2308, 2319, 2319,
     2311, 2329, 2326, 2331, 2333, 2325, 2320, 2321, 2334, 2333,
        0,    0, 2338, 2339, 2327, 2326, 2325, 2340, 2326, 2342,

     2327, 2339,    0,    0,    0, 2349, 2332, 2336,    0, 2346,
     2353, 2346,    0, 2352, 2337, 2366, 2367, 2354, 2355, 2341,
        0,    0, 2358, 2344, 2380, 2345, 2362, 2353, 2367, 2350,
     2350, 2351, 2363, 2364, 2373, 2370,    0, 2371, 2358, 2364,
     2360, 2375,    0, 2375, 2362, 2378, 2364, 2366, 2396, 2397,
     2375, 2386,    0,    0, 2371,    0,    0, 3057, 2371, 2380,
     2374, 2389, 2390, 2377, 2394, 2378, 2380, 2381,    0, 2394,
     2382, 2389, 2390, 2390, 2403,    0,    0,    0,    0, 2402,
     2397,    0, 2408,    0,    0,    0,    0, 2395, 2411, 2403,
        0,    0, 2413, 2396, 2408, 2411, 2417, 2407, 2405,    0,

     2408, 2401, 2461, 2408, 2411, 2420, 2406, 2408, 2468,    0,
     2409,    0, 2412, 2427, 2418, 2432, 2420, 2427, 2417, 2472,
        0, 2423, 2439, 2421, 2417, 2435,    0,    0,    0, 2427,
     2461,    0, 2436, 2426, 2438, 2457, 2436, 2442, 2448,    0,
     2431,    0,    0, 2440, 2454, 2436, 2436, 2439, 2457, 2450,
     2446,    0, 3057, 2521, 2527, 2533, 2536, 2537, 2543, 2549,
     2555
    } ;

static yyconst short int yy_def[2862] =
    {   0,
     2853,    1, 2854, 2854, 2855, 2855, 2853, 2853, 2853, 2853,
     2853, 2853, 2856, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2857, 2857,   28, 2853,
     2853, 2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2853, 2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853,
     2853, 2853, 2859, 2853, 2853, 2853, 2853, 2856, 2853, 2856,
     2860, 2853, 2853, 2853, 2853, 2853, 2861, 2853, 2853, 2853,

     2853,   28,   28, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2856, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2859, 2853, 2860, 2861, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2853, 2853,
     2853, 2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2853, 2853, 2853, 2853, 2853, 2853, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2858, 2853, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2853,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2853, 2853, 2853, 2853,
     2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2853, 2853, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2853, 2858, 2853, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2853, 2853, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2853, 2853, 2853, 2853, 2853, 2853,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2853,
     2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858,

     2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853,
     2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2853,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2853, 2853, 2853, 2853, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2853, 2858, 2853, 2853, 2858, 2858,
     2858, 2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2853,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2853, 2853, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853,
     2853, 2853, 2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2853, 2853, 2858, 2853, 2858,
     2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2853, 2853, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2853,
     2853, 2853, 2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2853, 2853, 2858, 2853, 2858, 2858, 2858, 2853,

     2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858,
     2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2853, 2858, 2858, 2858, 2858, 2853, 2853, 2858,
     2853, 2858, 2858, 2858, 2853, 2858, 2858, 2858, 2853, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858,
     2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2853, 2853, 2853, 2853, 2853, 2853,

     2853, 2853, 2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2853, 2853,
     2858, 2853, 2858, 2853, 2858, 2858, 2858, 2853, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858,
     2858, 2858, 2858, 2853, 2853, 2858, 2853, 2858, 2853, 2858,
     2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858,
     2858, 2858, 2858, 2853, 2853, 2858, 2858, 2853, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858,
     2853, 2853, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2853,
     2853, 2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2853, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2853,
     2853, 2853, 2853, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2853, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2853, 2858, 2853, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2853, 2858, 2858, 2858, 2858, 2853, 2853, 2853, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2853, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,

     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858, 2858,
     2858, 2858,    0, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853
    } ;

static yyconst short int yy_nxt[3148] =
    {   0,
        8,    9,   10,   11,    9,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   25,
       26,   27,   28,   25,   25,   25,   29,   25,   30,   31,
       32,   33,   34,   34,   35,   36,   37,   38,   39,   40,
       41,   34,   42,   43,   44,   45,   34,   46,   34,   47,
       48,   34,   49,   50,   51,   34,   52,    8,   53,   54,
       34,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   34,   80,   81,   82,
       84,   84,   89,   84,  559,   84,   84,   84,  142,   84,

       86,   84,   97,   86,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   99,   98,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  107,  108,  112,  116,
      140,  117,  129,  353,  101,   99,   99,  113,   89,  141,
      354,  143,   99,   90,  102,  100,  100,  100,  100,  100,
      100,  103,  100,  100,  118,  101,  101,  114,  125,  145,
      137,  879,  101,  101,  104,  105,  269,  270,   87,  560,
      200,  131,  119,  138,  201,  202,  132,  303,  120,  121,
      122,  126,  127,  139,  101,  101,  133,  130,  169,   90,
      304,  101,  170,  932,  229,  134,  135,  136,  171,  146,

      147,  148,  152,  153,  154,  155,  156,  173,  172,  230,
      179,  208,  209,  271,  180,  210,   89,  880,  181,  174,
      211,  194,  185,  175,  182,  933,  176,  183,   86,  195,
      272,   86,  196,  177,  184,  197,  178,  212,  198,  359,
      237,  213,  203,  238,  157,  214,  360,  158,  159,  204,
      205,  215,  298,  299,  300,  206,  160,  161,  162,  239,
      240,  241,  163,  164,  165,  186,  301,   90,  166,  167,
      168,  934,  320,  187,  216,  217,  188,  302,  189,  218,
      190,  191,  364,  219,  321,  365,  192,  935,  193,  220,
      224,  225,  408,  265,  409,  226,   87,  266,  221,  222,

      223,  267,  231,  337,  338,  227,  232,  268,  425,  233,
      242,  228,  243,  429,  244,  430,  234,  245,  246,  235,
      331,  247,  426,  323,  248,  355,  249,  252,  324,  250,
      251,  253,  325,  332,  254,  255,  259,  260,  374,  333,
      349,  256,  261,  936,  257,  356,  350,  262,  263,  264,
      375,  258,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,  342,  343,  351,  352,  372,  373,  344,  937,
      101,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  345,  378,  418,  369,  941,  379,  346,  433,  279,
      411,  370,  380,  347,  361,  371,  412,  434,  362,  101,

       99,  419,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  363,  452,  453,  386,  942,  280,  279,  280,
      101,  387,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  388,  389,  390,  943,  391,  392,  393,  401,
      402,  403,  457,  414,  394,  395,  458,  435,  396,  101,
      459,  436,  397,  439,  398,  415,  416,  437,  440,  460,
      417,  469,  466,  447,  478,  441,  467,  470,  479,  442,
      476,  443,  448,  471,  463,  477,  399,  480,  449,  464,
      450,  472,  482,  481,  465,  486,  546,  547,  483,  548,
      557,  487,  944,  473,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  518,  558,  592,  945,  493,  593,
      493,  519,  279,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  594,  622,  623,  665,  666,  821,  595,
      584,  279,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  585,  598,  607,  625,  754,  630,  643,  755,
      608,  631,  654,  644,  626,  663,  655,  599,  670,  675,
      664,  678,  679,  676,  938,  946,  947,  951,  952,  671,
      953,  672,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  757,  822,  854,  925,  948,  954,  955,  956,
      758,  939,  940,  957,  949,  958,  959,  855,  960,  759,
      961,  962,  926,  950,  963,  964,  965,  966,  967,  968,
      969,  970,  971,  972,  973,  974,  976,  977,  978,  979,
      980,  982,  983,  984,  985,  986,  987,  988,  989,  990,
      991,  992,  993,  994,  995,  996,  997,  998,  999,  981,
     1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
     1011, 1012, 1013, 1014, 1015, 1010, 1016, 1017, 1018, 1019,
     1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
     1030, 1031, 1032, 1033, 1034,  975, 1035, 1036, 1037, 1038,

     1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
     1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059,
     1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
     1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
     1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
     1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
     1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
     1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
     1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,

     1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
     1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
     1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
     1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
     1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
     1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
     1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
     1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
     1230, 1231, 1232, 1233, 1219, 1234, 1235, 1236, 1237, 1238,

     1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
     1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
     1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
     1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
     1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
     1289, 1290, 1291, 1292, 1293, 1294, 1295, 1297, 1298, 1299,
     1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
     1310, 1311, 1313, 1314, 1311, 1296, 1312, 1315, 1316, 1317,
     1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
     1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,

     1338, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
     1349, 1350, 1351, 1352, 1353, 1339, 1354, 1355, 1356, 1357,
     1358, 1359, 1360, 1363, 1364, 1365, 1366, 1367, 1368, 1361,
     1362, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
     1378, 1379, 1380, 1381, 1382, 1383, 1311, 1384, 1385, 1311,
     1386, 1312, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
     1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
     1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
     1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
     1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,

     1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
     1445, 1446, 1447, 1448, 1449, 1450, 1311, 1451, 1457, 1311,
     1458, 1312, 1452, 1453, 1459, 1460, 1461, 1462, 1463, 1464,
     1465, 1466, 1467, 1454, 1468, 1469, 1470, 1476, 1471, 1455,
     1472, 1478, 1456, 1479, 1480, 1473, 1481, 1482, 1483, 1484,
     1474, 1475, 1485, 1486, 1487, 1477, 1488, 1489, 1490, 1491,
     1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,
     1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
     1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
     1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,

     1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
     1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
     1553, 1554, 1555, 1556, 1558, 1559, 1560, 1561, 1562, 1563,
     1557, 1564, 1565, 1566, 1567, 1512, 1568, 1569, 1570, 1571,
     1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
     1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
     1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601,
     1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
     1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
     1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631,

     1632, 1633, 1634, 1635, 1636, 1639, 1637, 1640, 1641, 1643,
     1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
     1638, 1642, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662,
     1663, 1664, 1665, 1666, 1667, 1668, 1654, 1673, 1674, 1675,
     1676, 1677, 1669, 1670, 1671, 1678, 1679, 1680, 1681, 1672,
     1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
     1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
     1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
     1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721,
     1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1737,

     1731, 1732, 1738, 1739, 1740, 1733, 1741, 1742, 1743, 1734,
     1744, 1745, 1746, 1747, 1748, 1735, 1736, 1749, 1750, 1751,
     1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
     1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
     1772, 1774, 1776, 1777, 1780, 1781, 1783, 1784, 1785, 1786,
     1787, 1788, 1789, 1790, 1791, 1778, 1779, 1773, 1775, 1792,
     1793, 1782, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
     1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,
     1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
     1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,

     1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
     1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
     1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
     1862, 1863, 1864, 1865, 1867, 1868, 1869, 1866, 1870, 1871,
     1873, 1874, 1872, 1875, 1877, 1878, 1879, 1880, 1881, 1882,
     1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1876, 1891,
     1892, 1893, 1894, 1895, 1897, 1898, 1899, 1900, 1901, 1902,
     1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1896,
     1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
     1922, 1923, 1924, 1926, 1927, 1928, 1929, 1930, 1931, 1932,

     1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
     1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
     1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
     1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
     1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1925, 1981,
     1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
     1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
     2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
     2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
     2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,

     2032, 2033, 2034, 2035, 2036, 2037, 2038, 2040, 2041, 2042,
     2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2039,
     2054, 2052, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062,
     2063, 2064, 2065, 2066, 2053, 2067, 2068, 2069, 2070, 2071,
     2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
     2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
     2092, 2093, 2094, 2095, 2096, 2097, 2128, 2129, 2130, 2131,
     2132, 2098, 2133, 2134, 2135, 2136, 2137, 2099, 2138, 2139,
     2100, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
     2149, 2150, 2151, 2152, 2153, 2154, 2101, 2155, 2102, 2156,

     2157, 2103, 2158, 2159, 2160, 2104, 2105, 2106, 2161, 2107,
     2162, 2163, 2164, 2165, 2166, 2167, 2168, 2108, 2169, 2109,
     2110, 2170, 2171, 2172, 2173, 2174, 2111, 2175, 2176, 2177,
     2112, 2178, 2179, 2180, 2181, 2113, 2182, 2183, 2184, 2185,
     2186, 2187, 2188, 2114, 2189, 2190, 2191, 2192, 2193, 2115,
     2194, 2116, 2195, 2117, 2198, 2196, 2118, 2199, 2200, 2119,
     2120, 2121, 2122, 2201, 2123, 2197, 2124, 2202, 2125, 2203,
     2204, 2205, 2126, 2206, 2127, 2207, 2208, 2209, 2210, 2211,
     2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
     2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231,

     2232, 2233, 2235, 2236, 2237, 2238, 2240, 2239, 2241, 2242,
     2243, 2244, 2245, 2246, 2247, 2248, 2250, 2251, 2252, 2234,
     2253, 2254, 2256, 2255, 2258, 2259, 2260, 2261, 2262, 2263,
     2264, 2265, 2266, 2249, 2267, 2268, 2269, 2270, 2271, 2272,
     2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282,
     2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292,
     2293, 2294, 2295, 2296, 2257, 2297, 2298, 2299, 2300, 2301,
     2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311,
     2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321,
     2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331,

     2332, 2333, 2334, 2335, 2337, 2338, 2339, 2340, 2341, 2336,
     2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351,
     2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361,
     2362, 2363, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372,
     2364, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381,
     2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391,
     2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401,
     2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411,
     2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421,
     2422, 2423, 2424, 2425, 2428, 2429, 2430, 2431, 2432, 2433,

     2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443,
     2444, 2445, 2446, 2447, 2448, 2449, 2450, 2452, 2453, 2454,
     2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464,
     2451, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473,
     2474, 2475, 2426, 2476, 2477, 2478, 2479, 2480, 2481, 2482,
     2483, 2484, 2485, 2486, 2487, 2488, 2427, 2489, 2490, 2491,
     2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501,
     2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511,
     2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521,
     2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531,

     2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541,
     2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551,
     2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561,
     2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571,
     2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581,
     2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591,
     2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601,
     2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611,
     2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621,
     2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631,

     2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641,
     2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651,
     2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661,
     2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671,
     2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681,
     2683, 2684, 2685, 2686, 2682, 2687, 2688, 2689, 2690, 2691,
     2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701,
     2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711,
     2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721,
     2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731,

     2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741,
     2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751,
     2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761,
     2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771,
     2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781,
     2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791,
     2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801,
     2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811,
     2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821,
     2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831,

     2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841,
     2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851,
     2852,   83,   83,   83,   83,   83,   83,   85,   85,   85,
       85,   85,   85,   88,   88,   88,   88,   88,   88,  100,
      100,  111,  111,  274,  931,  930,  274,  274,  274,  276,
      276,  929,  276,  276,  276,  277,  277,  928,  277,  277,
      277,  927,  924,  923,  922,  921,  920,  919,  918,  917,
      916,  915,  914,  913,  912,  911,  910,  909,  908,  907,
      906,  905,  904,  903,  902,  901,  900,  899,  898,  897,
      896,  895,  894,  893,  892,  891,  890,  889,  888,  887,

      886,  885,  884,  883,  882,  881,  878,  877,  876,  875,
      874,  873,  872,  871,  870,  869,  868,  867,  866,  865,
      864,  863,  862,  861,  860,  859,  858,  857,  856,  853,
      852,  851,  850,  849,  848,  847,  846,  845,  844,  843,
      842,  841,  840,  839,  838,  837,  836,  835,  834,  833,
      832,  831,  830,  829,  828,  827,  826,  825,  824,  823,
      820,  819,  818,  817,  816,  815,  814,  813,  812,  811,
      810,  809,  808,  807,  806,  805,  804,  803,  802,  801,
      800,  799,  798,  797,  796,  795,  794,  793,  792,  791,
      790,  789,  788,  787,  786,  785,  784,  783,  782,  781,

      780,  779,  778,  777,  776,  775,  774,  773,  772,  771,
      770,  769,  768,  767,  766,  765,  764,  763,  762,  761,
      760,  756,  753,  752,  751,  750,  749,  748,  747,  746,
      745,  744,  743,  742,  741,  740,  739,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  714,  713,  712,  711,  710,  709,  708,  707,  706,
      705,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  684,  683,  682,  681,  680,  677,  674,  673,  669,

      668,  667,  662,  661,  660,  659,  658,  657,  656,  653,
      652,  651,  650,  649,  648,  647,  646,  645,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  632,  629,
      628,  627,  624,  621,  620,  619,  618,  617,  616,  615,
      614,  613,  612,  611,  610,  609,  606,  605,  604,  603,
      602,  601,  600,  597,  596,  591,  590,  589,  588,  587,
      586,  583,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  563,  562,  561,  556,  555,  554,  553,  552,  551,
      550,  549,  545,  544,  543,  542,  541,  540,  539,  538,

      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
      495,  492,  491,  490,  489,  488,  485,  484,  475,  474,
      468,  462,  461,  456,  455,  454,  451,  446,  445,  444,
      438,  432,  431,  428,  427,  424,  423,  422,  421,  420,
      413,  410,  407,  406,  405,  404,  400,  385,  384,  383,
      382,  381,  377,  376,  368,  367,  366,  358,  357,  348,
      341,  340,  339,  336,  335,  334,  330,  329,  328,  327,

      326,  322,  319,  318,  317,  316,  315,  314,  313,  312,
      311,  310,  309,  308,  307,  306,  305,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282, 2853,  275,  273,  236,  207,  199,  151,
      150,  149,  144,  128,  124,  123,  115,  110,  109,  106,
       95,   94,   93,   92,   91, 2853,    7, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,

     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853
    } ;

static yyconst short int yy_chk[3148] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,   13,    3,  353,    3,    4,    4,   47,    4,

        9,    4,   24,    9,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   25,   24,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   31,   31,   35,   37,
       46,   37,   43,  182,   25,   27,   28,   35,   88,   46,
      182,   47,   26,   13,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   38,   27,   28,   35,   41,   49,
       45,  685,   26,   25,   27,   28,   77,   77,    9,  353,
       62,   44,   38,   45,   62,   62,   44,  128,   38,   38,
       38,   41,   41,   45,   27,   28,   44,   43,   56,   88,
      128,   26,   56,  739,   69,   44,   44,   44,   56,   49,

       49,   49,   55,   55,   55,   55,   55,   57,   56,   69,
       58,   65,   65,   78,   58,   65,  129,  685,   58,   57,
       65,   60,   59,   57,   58,  740,   57,   58,   86,   60,
       78,   86,   60,   57,   58,   60,   57,   66,   60,  187,
       72,   66,   63,   72,   55,   66,  187,   55,   55,   63,
       63,   66,  126,  126,  126,   63,   55,   55,   55,   72,
       72,   72,   55,   55,   55,   59,  127,  129,   55,   55,
       55,  741,  158,   59,   67,   67,   59,  127,   59,   67,
       59,   59,  189,   67,  158,  189,   59,  742,   59,   67,
       68,   68,  213,   76,  213,   68,   86,   76,   67,   67,

       67,   76,   70,  173,  173,   68,   70,   76,  227,   70,
       73,   68,   73,  231,   73,  231,   70,   73,   73,   70,
      169,   73,  227,  160,   73,  183,   73,   74,  160,   73,
       73,   74,  160,  169,   74,   74,   75,   75,  195,  169,
      180,   74,   75,  744,   74,  183,  180,   75,   75,   75,
      195,   74,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,  177,  177,  181,  181,  194,  194,  177,  745,
       96,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,  178,  198,  218,  193,  748,  198,  178,  234,   99,
      215,  193,  198,  178,  188,  193,  215,  234,  188,   96,

      100,  218,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  188,  246,  246,  205,  749,  101,   99,  101,
      100,  205,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  205,  206,  206,  750,  206,  206,  206,  208,
      208,  208,  250,  217,  206,  206,  250,  235,  206,  100,
      250,  235,  206,  237,  206,  217,  217,  235,  237,  250,
      217,  256,  254,  244,  261,  237,  254,  256,  261,  237,
      260,  237,  244,  257,  253,  260,  206,  265,  244,  253,
      244,  257,  266,  265,  253,  269,  343,  343,  266,  343,
      352,  269,  751,  257,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  310,  352,  385,  752,  279,  385,
      279,  310,  278,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  386,  415,  415,  453,  453,  618,  386,
      378,  278,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  378,  389,  397,  417,  545,  421,  433,  545,
      397,  421,  443,  433,  417,  452,  443,  389,  457,  460,
      452,  462,  462,  460,  747,  754,  755,  757,  758,  457,
      759,  457,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  494,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  547,  618,  656,  733,  756,  760,  761,  762,
      547,  747,  747,  763,  756,  764,  765,  656,  767,  547,
      768,  769,  733,  756,  770,  771,  772,  773,  774,  776,
      777,  778,  779,  780,  781,  782,  784,  785,  786,  787,
      789,  790,  791,  792,  794,  795,  796,  797,  798,  799,
      800,  801,  802,  803,  804,  805,  806,  807,  808,  789,
      809,  810,  811,  812,  813,  814,  817,  818,  820,  821,
      822,  824,  825,  826,  827,  821,  828,  829,  830,  832,
      833,  835,  836,  837,  838,  839,  839,  840,  842,  843,
      844,  845,  847,  848,  849,  782,  850,  851,  852,  853,

      856,  857,  858,  859,  860,  861,  862,  863,  864,  866,
      868,  869,  871,  872,  873,  874,  875,  876,  877,  878,
      876,  879,  880,  881,  882,  883,  884,  886,  887,  888,
      891,  892,  893,  894,  895,  897,  899,  900,  901,  902,
      903,  904,  905,  906,  907,  908,  909,  910,  911,  912,
      913,  914,  915,  916,  917,  918,  919,  920,  921,  922,
      923,  925,  926,  927,  928,  929,  930,  931,  932,  933,
      934,  935,  936,  937,  938,  939,  940,  941,  942,  944,
      945,  946,  947,  948,  949,  950,  951,  952,  953,  954,
      955,  956,  957,  958,  960,  961,  962,  963,  964,  965,

      966,  967,  968,  969,  970,  972,  973,  974,  975,  976,
      977,  978,  980,  982,  983,  984,  985,  986,  987,  988,
      989,  990,  991,  992,  994,  995,  996,  997,  998, 1000,
     1002, 1003, 1004, 1005, 1005, 1006, 1008, 1009, 1010, 1011,
     1012, 1013, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1024,
     1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037,
     1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1049, 1050,
     1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
     1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
     1072, 1073, 1074, 1075, 1061, 1076, 1077, 1078, 1079, 1080,

     1081, 1082, 1083, 1084, 1084, 1085, 1086, 1087, 1088, 1089,
     1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100,
     1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111,
     1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122,
     1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1133, 1135,
     1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
     1157, 1158, 1159, 1160, 1158, 1143, 1158, 1161, 1162, 1163,
     1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
     1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185,

     1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1198, 1200, 1201, 1203, 1186, 1204, 1205, 1206, 1207,
     1208, 1209, 1210, 1212, 1213, 1214, 1216, 1217, 1218, 1210,
     1210, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1228,
     1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1235,
     1238, 1235, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
     1247, 1248, 1248, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
     1255, 1256, 1257, 1258, 1259, 1261, 1263, 1264, 1265, 1266,
     1267, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1277,
     1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289,

     1290, 1291, 1292, 1293, 1294, 1295, 1298, 1299, 1301, 1303,
     1304, 1305, 1306, 1307, 1308, 1310, 1311, 1313, 1315, 1311,
     1316, 1311, 1314, 1314, 1317, 1318, 1321, 1324, 1325, 1326,
     1327, 1328, 1329, 1314, 1330, 1331, 1332, 1336, 1335, 1314,
     1335, 1337, 1314, 1338, 1339, 1335, 1340, 1342, 1343, 1344,
     1335, 1335, 1346, 1347, 1349, 1336, 1351, 1352, 1353, 1354,
     1355, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
     1366, 1367, 1368, 1369, 1370, 1371, 1372, 1374, 1375, 1376,
     1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1399,

     1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
     1410, 1411, 1412, 1413, 1414, 1417, 1418, 1419, 1420, 1421,
     1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
     1424, 1431, 1433, 1434, 1435, 1376, 1436, 1437, 1439, 1440,
     1441, 1443, 1444, 1445, 1446, 1446, 1446, 1446, 1447, 1448,
     1450, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1461,
     1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
     1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481,
     1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
     1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,

     1503, 1504, 1506, 1507, 1510, 1511, 1510, 1512, 1513, 1514,
     1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
     1510, 1513, 1525, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
     1535, 1536, 1537, 1538, 1539, 1540, 1524, 1541, 1542, 1544,
     1546, 1547, 1540, 1540, 1540, 1548, 1549, 1550, 1551, 1540,
     1554, 1555, 1556, 1557, 1558, 1560, 1561, 1562, 1563, 1564,
     1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
     1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
     1590, 1592, 1593, 1594, 1595, 1596, 1597, 1600, 1601, 1602,
     1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,

     1611, 1611, 1613, 1614, 1615, 1611, 1617, 1618, 1619, 1611,
     1620, 1621, 1622, 1624, 1625, 1611, 1611, 1626, 1627, 1628,
     1629, 1630, 1631, 1632, 1633, 1634, 1634, 1636, 1637, 1638,
     1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
     1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,
     1659, 1660, 1661, 1663, 1664, 1652, 1652, 1649, 1650, 1665,
     1666, 1654, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674,
     1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1685, 1686,
     1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
     1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,

     1707, 1708, 1709, 1710, 1711, 1713, 1714, 1715, 1716, 1717,
     1718, 1719, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728,
     1729, 1730, 1731, 1732, 1733, 1734, 1735, 1735, 1736, 1738,
     1739, 1740, 1741, 1742, 1743, 1746, 1747, 1742, 1748, 1749,
     1750, 1751, 1749, 1752, 1753, 1754, 1755, 1756, 1759, 1760,
     1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1752, 1769,
     1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
     1781, 1782, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1773,
     1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
     1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,

     1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
     1822, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
     1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1844, 1845,
     1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
     1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1803, 1864,
     1865, 1866, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
     1876, 1877, 1878, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
     1887, 1888, 1889, 1890, 1891, 1892, 1893, 1895, 1896, 1898,
     1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
     1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,

     1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
     1929, 1930, 1931, 1932, 1933, 1934, 1935, 1937, 1938, 1925,
     1939, 1938, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
     1948, 1949, 1950, 1951, 1938, 1952, 1953, 1954, 1955, 1956,
     1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
     1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
     1977, 1978, 1979, 1980, 1981, 1982, 1984, 1985, 1986, 1987,
     1988, 1982, 1989, 1990, 1991, 1992, 1993, 1982, 1994, 1995,
     1982, 1996, 1997, 1998, 1999, 2000, 2002, 2004, 2005, 2006,
     2007, 2008, 2009, 2010, 2011, 2012, 1982, 2013, 1982, 2014,

     2015, 1982, 2016, 2018, 2019, 1982, 1982, 1982, 2020, 1982,
     2021, 2022, 2023, 2024, 2025, 2026, 2027, 1982, 2028, 1982,
     1983, 2029, 2030, 2031, 2032, 2033, 1983, 2034, 2036, 2037,
     1983, 2038, 2039, 2040, 2041, 1983, 2042, 2043, 2044, 2045,
     2046, 2047, 2048, 1983, 2049, 2050, 2051, 2052, 2053, 1983,
     2054, 1983, 2055, 1983, 2057, 2056, 1983, 2058, 2060, 1983,
     1983, 1983, 1983, 2064, 1983, 2056, 1983, 2065, 1983, 2066,
     2067, 2068, 1983, 2069, 1983, 2071, 2074, 2075, 2076, 2077,
     2079, 2080, 2081, 2082, 2084, 2085, 2086, 2087, 2088, 2089,
     2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,

     2100, 2101, 2102, 2103, 2104, 2106, 2107, 2106, 2108, 2109,
     2110, 2111, 2112, 2113, 2115, 2116, 2117, 2118, 2119, 2101,
     2120, 2122, 2123, 2122, 2124, 2125, 2126, 2127, 2128, 2129,
     2130, 2131, 2132, 2116, 2133, 2134, 2135, 2136, 2137, 2138,
     2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
     2149, 2151, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2161,
     2162, 2163, 2164, 2165, 2123, 2167, 2168, 2170, 2172, 2174,
     2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184,
     2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194,
     2195, 2196, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205,

     2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2209,
     2216, 2217, 2218, 2219, 2220, 2223, 2224, 2225, 2226, 2227,
     2228, 2232, 2235, 2237, 2240, 2242, 2246, 2247, 2250, 2252,
     2253, 2257, 2258, 2259, 2261, 2262, 2263, 2264, 2265, 2266,
     2257, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275,
     2276, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2284, 2285,
     2289, 2290, 2291, 2292, 2294, 2295, 2296, 2297, 2298, 2299,
     2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309,
     2310, 2311, 2312, 2313, 2314, 2316, 2317, 2318, 2319, 2320,
     2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331,

     2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341,
     2343, 2344, 2345, 2346, 2347, 2348, 2350, 2351, 2352, 2354,
     2355, 2356, 2357, 2359, 2360, 2362, 2363, 2365, 2366, 2367,
     2350, 2368, 2369, 2371, 2372, 2373, 2374, 2375, 2376, 2378,
     2380, 2384, 2325, 2385, 2386, 2387, 2389, 2390, 2391, 2392,
     2393, 2395, 2396, 2397, 2399, 2400, 2325, 2401, 2402, 2403,
     2404, 2405, 2406, 2408, 2409, 2411, 2412, 2413, 2414, 2415,
     2416, 2417, 2419, 2421, 2422, 2423, 2424, 2425, 2426, 2427,
     2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437,
     2438, 2439, 2440, 2442, 2444, 2445, 2446, 2447, 2448, 2449,

     2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2462,
     2463, 2464, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474,
     2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2484, 2485,
     2486, 2487, 2488, 2490, 2491, 2492, 2493, 2495, 2496, 2497,
     2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507,
     2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2519, 2520,
     2521, 2522, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531,
     2532, 2533, 2534, 2535, 2538, 2539, 2540, 2542, 2544, 2545,
     2546, 2547, 2549, 2550, 2551, 2553, 2554, 2555, 2556, 2560,
     2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570,

     2571, 2572, 2575, 2576, 2577, 2578, 2579, 2580, 2582, 2583,
     2584, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594,
     2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2605,
     2606, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2617, 2619,
     2620, 2621, 2622, 2624, 2626, 2627, 2628, 2629, 2630, 2631,
     2632, 2633, 2636, 2638, 2631, 2639, 2641, 2642, 2644, 2645,
     2646, 2647, 2648, 2649, 2650, 2651, 2653, 2654, 2655, 2657,
     2658, 2659, 2661, 2662, 2664, 2665, 2666, 2667, 2669, 2670,
     2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681,
     2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2693,

     2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2706,
     2707, 2708, 2710, 2711, 2712, 2714, 2715, 2716, 2717, 2718,
     2719, 2720, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730,
     2731, 2732, 2733, 2734, 2735, 2736, 2738, 2739, 2740, 2741,
     2742, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752,
     2755, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767,
     2768, 2770, 2771, 2772, 2773, 2774, 2775, 2780, 2781, 2783,
     2788, 2789, 2790, 2793, 2794, 2795, 2796, 2797, 2798, 2799,
     2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2811,
     2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2822, 2823,

     2824, 2825, 2826, 2830, 2831, 2833, 2834, 2835, 2836, 2837,
     2838, 2839, 2841, 2844, 2845, 2846, 2847, 2848, 2849, 2850,
     2851, 2854, 2854, 2854, 2854, 2854, 2854, 2855, 2855, 2855,
     2855, 2855, 2855, 2856, 2856, 2856, 2856, 2856, 2856, 2857,
     2857, 2858, 2858, 2859,  738,  737, 2859, 2859, 2859, 2860,
     2860,  736, 2860, 2860, 2860, 2861, 2861,  735, 2861, 2861,
     2861,  734,  732,  731,  730,  729,  728,  727,  726,  725,
      724,  723,  721,  720,  719,  718,  717,  716,  715,  714,
      713,  712,  711,  710,  709,  708,  707,  706,  705,  704,
      702,  701,  700,  699,  698,  697,  696,  695,  694,  693,

      692,  690,  689,  688,  687,  686,  684,  681,  680,  678,
      677,  676,  675,  674,  673,  672,  671,  670,  668,  667,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  655,
      654,  653,  652,  651,  650,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      631,  630,  629,  626,  625,  624,  623,  622,  621,  619,
      617,  616,  615,  614,  613,  612,  611,  610,  609,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  590,  588,  587,  586,
      585,  583,  582,  580,  578,  577,  576,  575,  574,  573,

      572,  571,  569,  568,  567,  566,  564,  563,  562,  561,
      559,  558,  557,  556,  555,  554,  553,  552,  551,  550,
      548,  546,  544,  542,  541,  540,  539,  538,  537,  536,
      534,  533,  532,  531,  529,  527,  526,  525,  524,  523,
      522,  521,  520,  519,  518,  517,  516,  515,  513,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      468,  467,  466,  465,  464,  463,  461,  459,  458,  456,

      455,  454,  451,  449,  448,  447,  446,  445,  444,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  423,  422,  420,
      419,  418,  416,  414,  413,  412,  411,  410,  409,  407,
      406,  405,  404,  400,  399,  398,  396,  395,  394,  393,
      392,  391,  390,  388,  387,  384,  383,  382,  381,  380,
      379,  377,  376,  374,  373,  372,  371,  370,  369,  368,
      367,  366,  365,  364,  363,  362,  361,  360,  359,  358,
      357,  356,  355,  354,  351,  350,  349,  348,  347,  346,
      345,  344,  342,  341,  340,  339,  335,  334,  333,  332,

      331,  330,  329,  328,  326,  325,  323,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  309,  308,
      307,  306,  305,  302,  301,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  275,  273,  272,  271,  270,  268,  267,  259,  258,
      255,  252,  251,  249,  248,  247,  245,  243,  242,  238,
      236,  233,  232,  230,  228,  226,  225,  224,  220,  219,
      216,  214,  212,  211,  210,  209,  207,  204,  202,  201,
      200,  199,  197,  196,  192,  191,  190,  186,  184,  179,
      176,  175,  174,  172,  171,  170,  165,  164,  163,  162,

      161,  159,  157,  150,  149,  145,  144,  143,  141,  140,
      139,  138,  137,  133,  132,  131,  130,  125,  124,  123,
      119,  118,  117,  116,  115,  114,  113,  112,  106,  105,
      104,  103,  102,   90,   87,   79,   71,   64,   61,   54,
       51,   50,   48,   42,   40,   39,   36,   33,   32,   29,
       22,   20,   19,   15,   14,    7, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,

     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853, 2853,
     2853, 2853, 2853, 2853, 2853, 2853, 2853
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "feiparser.l"
#define INITIAL 0
/* FEI Lexer! */
/* NOTE: To comment this file use C "standard comments"  BUT leave a space before the slash-star */
/* /////////////////////////////////////////////////////////////////////////////// */
/* //                                                                              */
/* // COPYRIGHT (C):      Version of a Creative Commons License,                   */
/* //                     for details contact Boris Jeremic, jeremic@ucdavis.edu   */
/* // PROJECT:            Real ESSI Simulator                                      */
/* // PROGRAMMER:         Jose Abell                                               */
/* // DATE:               Jan 2012                                                 */
/* // UPDATE HISTORY:     Full update history in git repository.                   */
/* // QUALITY ASSURANCE:  Developers have worked really hard to develop            */
/* //                     an extensive verification of developed implementation    */
/* //                     and with that can claim quality and fitness for intended */
/* //                     purpose (modeling and simulation of Real ESSI Problems)  */
/* //                     within confines of verification effort                   */
/* //                                                                              */
/* // LEGACY/DEFUNCT COPYLEFT (C):                                                 */
/* //                     Woody's viral GPL-like license (adapted by BJ):          */
/* //                     ``This    source  code is Copyrighted in                 */
/* //                     worldwide for  an  indefinite  period,  and anybody      */
/* //                     caught  using it without our permission, will be         */
/* //                     mighty good friends of ourn, cause we don't give         */
/* //                     a  darn.  Hack it. Compile it. Debug it. Run it.         */
/* //                     Yodel  it.  Enjoy it. We wrote it, that's all we         */
/* //                     wanted to do.''                                          */
/* //                                                                              */
/* /////////////////////////////////////////////////////////////////////////////   */
#define IFILE 1

#define COMMENT 2

#line 36 "feiparser.l"
	#include <iostream>
	#include <fstream>
	#include <string>



	//Old C libraries are used in lexer....
	#include <cstdlib>
	#include <cstring>
	#include <csignal>
	#include <stdio.h>                         // Provides printf, etc.
	#include <string.h>
	#include <getopt.h>                        // For the command-line argument parser
	/// =================================================================================
	// Please do not erase! Might make it into code someday.
	// #include <readline/readline.h>
	// #include <readline/history.h>
	// =================================================================================

	//Our FEI libraries
	#include "feiast.h"
	#include "dsl_actions.h"
	#include "siunit.h"
	#include "quantity.h"

	//From the parser generator
	#include "feiparser.tab.hh"

	//Boost for string to double conversion
	//#include <../boost/boost/lexical_cast.hpp>
	#include <boost/lexical_cast.hpp>


	int yycolumn = 1;
	#define YY_DECL int yylex(yy::feiparser::semantic_type *yylval, \
							  yy::feiparser::location_type *yylloc)
	//#define YY_USER_ACTION yylloc -> columns (yyleng);
	#define YY_USER_ACTION yylloc->end.line = yylineno; \
	yylloc->end.column = yycolumn+yyleng; \
	yycolumn += yyleng;

	// =================================================================================
	// Please do not erase! Might make it into code someday.
	// This is to replace STDIN with GNU Readline (Caution!!! GPL Licence).
	// #undef YY_INPUT
	// #define YY_INPUT(buf, result, max_size) (result = my_yyinput(buf, max_size))
	// =================================================================================

	//static int my_yyinput(char *buf, int max_size);
	//static char *st_readline_buffer;
	//static int  st_readline_used_len;

	//Simplify the usage of tokens...
	typedef yy::feiparser::token token;

	//Standard namespace
	using namespace std;


	//
	//FILE * ;

	struct bufstack
	{
		struct bufstack *prev;
		YY_BUFFER_STATE bs;
		int lineno;
		char* filename;
		FILE *f;
	} *curbs = 0;

	char* curfilename;

	int newfile(char* fn);
	int newstdin(void);
	int popfile(void);
	int error_behavior(void);
	void welcome_msg();
	void set_known_units();
	void set_variables(char* cstring);


	char initial[] = "STDIN";

	//Command line options flags
	int FLAG_interactive_mode    = 1;
	int FLAG_generate_cpp_output = 0;
	int FLAG_dry_run             = 0;
	int FLAG_execute_apis        = 1;
	int FLAG_inclusion_mode      = 0;
	int FLAG_run_file            = 0;
	int FLAG_binary_output       = 0;

	/* EXTERNS - All defined in feiparser.yy */
	extern const string thePrompt;
	extern string out_cpp_filename;
	extern string prompt;
	extern map<string,Quantity> global_variables;
	extern set<string> locked_global_variables;
	extern int recovery_mode;
	extern void set_model_name(char* cstring);
	extern void set_outcppfile_name(string newfilename);
	extern void wipe_model();
	extern void set_dry_run_mode(int);
	extern void set_profiling_results_filename(char* cstring);
	extern void call_hdf5_flush_next_chance(void);


/* float exponent */
#line 2510 "feiparser.lex.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 149 "feiparser.l"



	// start where previous token ended
	//yylloc -> step();


 /* ================================================================================================= */
 /* ========              BEGIN LEXER                                                       ========= */
 /* ================================================================================================= */
 
 /* The order in this file matters. Patterns which are higher up are matched first */
 
 /* single character ops are directly passed to the parser (more grammatical clarity) */
#line 2687 "feiparser.lex.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2854 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3057 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
#line 164 "feiparser.l"
case 2:
#line 165 "feiparser.l"
case 3:
#line 166 "feiparser.l"
case 4:
#line 167 "feiparser.l"
case 5:
#line 168 "feiparser.l"
case 6:
#line 169 "feiparser.l"
case 7:
#line 170 "feiparser.l"
case 8:
#line 171 "feiparser.l"
case 9:
#line 172 "feiparser.l"
case 10:
#line 173 "feiparser.l"
case 11:
#line 174 "feiparser.l"
case 12:
#line 175 "feiparser.l"
case 13:
#line 176 "feiparser.l"
case 14:
#line 177 "feiparser.l"
case 15:
YY_RULE_SETUP
#line 177 "feiparser.l"
{ return yytext[0]; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 179 "feiparser.l"
{
								yylloc->begin.line = yylineno;
								yylloc->begin.column = yycolumn;

								return yytext[0];
							}
	YY_BREAK
/* assign operate */
case 17:
YY_RULE_SETUP
#line 187 "feiparser.l"
{ return token::PLUSEQUAL; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 188 "feiparser.l"
{ return token::MINUSEQUAL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 189 "feiparser.l"
{ return token::TIMESEQUAL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 190 "feiparser.l"
{ return token::DIVIDEEQUAL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 191 "feiparser.l"
{ return token::MODULUSEQUAL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 192 "feiparser.l"
{ return token::POWEQUAL; }
	YY_BREAK
/* comparison ops */
case 23:
YY_RULE_SETUP
#line 196 "feiparser.l"
{ yylval->fn = 1; return token::CMP; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 197 "feiparser.l"
{ yylval->fn = 2; return token::CMP; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 198 "feiparser.l"
{ yylval->fn = 3; return token::CMP; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 199 "feiparser.l"
{ yylval->fn = 4; return token::CMP; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 200 "feiparser.l"
{ yylval->fn = 5; return token::CMP; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 201 "feiparser.l"
{ yylval->fn = 6; return token::CMP; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 202 "feiparser.l"
{ yylval->fn = 7; return token::CMP; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 203 "feiparser.l"
{ yylval->fn = 8; return token::CMP; }
	YY_BREAK
/* test for units */
case 31:
#line 208 "feiparser.l"
case 32:
#line 209 "feiparser.l"
case 33:
#line 210 "feiparser.l"
case 34:
#line 211 "feiparser.l"
case 35:
#line 212 "feiparser.l"
case 36:
#line 213 "feiparser.l"
case 37:
#line 214 "feiparser.l"
case 38:
#line 215 "feiparser.l"
case 39:
#line 216 "feiparser.l"
case 40:
#line 217 "feiparser.l"
case 41:
#line 218 "feiparser.l"
case 42:
YY_RULE_SETUP
#line 218 "feiparser.l"
{yylval->ident = new string(yytext); return token::ISUNITTYPE;}
	YY_BREAK
/* Auto-variables (keywords)  */
case 43:
YY_RULE_SETUP
#line 221 "feiparser.l"
{return token::NUMBER_OF_NODES;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 222 "feiparser.l"
{return token::NUMBER_OF_ELEMENTS;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 223 "feiparser.l"
{return token::CURRENT_TIME;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 224 "feiparser.l"
{return token::NUMBER_OF_SP_CONSTRAINTS;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 225 "feiparser.l"
{return token::NUMBER_OF_MP_CONSTRAINTS;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 226 "feiparser.l"
{return token::NUMBER_OF_LOADS;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 227 "feiparser.l"
{return token::IS_PARALLEL;}
	YY_BREAK
/* Flow control keywords */
case 50:
YY_RULE_SETUP
#line 230 "feiparser.l"
{ return token::IF; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 231 "feiparser.l"
{ return token::THEN; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 232 "feiparser.l"
{ return token::ELSE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 233 "feiparser.l"
{ return token::WHILE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 234 "feiparser.l"
{ return token::DO; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 235 "feiparser.l"
{ return token::LET;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 236 "feiparser.l"
{ return token::IN; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 237 "feiparser.l"
{ return token::EXITSAFEMODE;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 238 "feiparser.l"
{ return token::CONTINUE;}
	YY_BREAK
/* Include statement is handled by the lexer */
case 59:
YY_RULE_SETUP
#line 241 "feiparser.l"
{BEGIN IFILE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 242 "feiparser.l"
{
								{
									//This ignores anything up to the newline.
									int c;
									while((c=yyinput()) && c != '\n');
								}
								yylineno++;
								if(newfile(yytext) == 0)
									yyterminate();  /*file not found*/
								yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
								prompt = "";
								BEGIN INITIAL;
								FLAG_inclusion_mode = 1;
							}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 256 "feiparser.l"
{
								cerr << curfilename << ":" << yylineno << ": bad include line." << endl;
								yyterminate();
							}
	YY_BREAK
/* built in functions */
case 62:
#line 264 "feiparser.l"
case 63:
#line 265 "feiparser.l"
case 64:
#line 266 "feiparser.l"
case 65:
#line 267 "feiparser.l"
case 66:
#line 268 "feiparser.l"
case 67:
#line 269 "feiparser.l"
case 68:
#line 270 "feiparser.l"
case 69:
#line 271 "feiparser.l"
case 70:
#line 272 "feiparser.l"
case 71:
#line 273 "feiparser.l"
case 72:
#line 274 "feiparser.l"
case 73:
#line 275 "feiparser.l"
case 74:
#line 276 "feiparser.l"
case 75:
#line 277 "feiparser.l"
case 76:
#line 278 "feiparser.l"
case 77:
#line 279 "feiparser.l"
case 78:
YY_RULE_SETUP
#line 279 "feiparser.l"
{ yylval->ident = new string(yytext); return token::FUNCTION; }
	YY_BREAK
/* ================================================================================================= */
/* ========              INITIAL COMMANDS (VERBS)                                          ========= */
/* ================================================================================================= */
case 79:
YY_RULE_SETUP
#line 286 "feiparser.l"
{return token::MODEL;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 287 "feiparser.l"
{return token::ADD;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 288 "feiparser.l"
{return token::DEFINE;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 289 "feiparser.l"
{return token::FIX;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 290 "feiparser.l"
{return token::FREE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 291 "feiparser.l"
{return token::REMOVE;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 292 "feiparser.l"
{return token::SIMULATE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 293 "feiparser.l"
{return token::COMPUTE;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 294 "feiparser.l"
{return token::CMD_print;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 295 "feiparser.l"
{return token::CMD_help;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 296 "feiparser.l"
{return token::CMD_whos;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 297 "feiparser.l"
{return token::CMD_check;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 298 "feiparser.l"
{return token::MESH;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 299 "feiparser.l"
{return token::REQUIRE;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 300 "feiparser.l"
{return token::SET;}
	YY_BREAK
/* New loading stage.... should change */
case 94:
YY_RULE_SETUP
#line 304 "feiparser.l"
{return token::NEW;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 305 "feiparser.l"
{return token::LOADING;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 306 "feiparser.l"
{return token::STAGE;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 307 "feiparser.l"
{return token::RESTART;}
	YY_BREAK
/* ================================================================================================= */
/* ========                     ADD                                                        ========= */
/* ================================================================================================= */
/* Things which can be added (nouns). May be several phrases */
case 98:
YY_RULE_SETUP
#line 314 "feiparser.l"
{return token::NODE;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 315 "feiparser.l"
{return token::ELEMENT;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 316 "feiparser.l"
{return token::ELEMENTS;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 317 "feiparser.l"
{return token::MATERIAL;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 318 "feiparser.l"
{return token::LOAD;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 319 "feiparser.l"
{return token::ACCELERATION_FIELD;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 320 "feiparser.l"
{return token::TIMEHISTORY;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 321 "feiparser.l"
{return token::MASS;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 322 "feiparser.l"
{return token::IMPOSEDMOTION;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 323 "feiparser.l"
{return token::DAMPING;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 324 "feiparser.l"
{return token::CONSTRAINT;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 325 "feiparser.l"
{return token::REACTION;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 326 "feiparser.l"
{return token::FORCES;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 327 "feiparser.l"
{return token::DRM;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 328 "feiparser.l"
{return token::SECTION;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 329 "feiparser.l"
{return token::LOADPATTERN;}
	YY_BREAK
/* "penalty displacement"              {return token::PENALTYDISPLACEMENT;} */
case 114:
YY_RULE_SETUP
#line 331 "feiparser.l"
{return token::LOADVALUE;}
	YY_BREAK
/* Element names */
case 115:
YY_RULE_SETUP
#line 334 "feiparser.l"
{return token::EightNodeBrick;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 335 "feiparser.l"
{return token::EightNodeBrickLT;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 336 "feiparser.l"
{return token::TwentyNodeBrick;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 337 "feiparser.l"
{return token::TwentyNodeBrickLT;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 338 "feiparser.l"
{return token::TwentySevenNodeBrick;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 339 "feiparser.l"
{return token::TwentySevenNodeBrickLT;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 340 "feiparser.l"
{return token::EightNodeBrickElastic;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 341 "feiparser.l"
{return token::TwentyNodeBrickElastic;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 342 "feiparser.l"
{return token::TwentySevenNodeBrickElastic;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 343 "feiparser.l"
{return token::EightNodeBrick_upU;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 344 "feiparser.l"
{return token::EightNodeBrick_up;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 345 "feiparser.l"
{return token::TwentyNodeBrick_uPU;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 346 "feiparser.l"
{return token::beam_displacement_based;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 347 "feiparser.l"
{return token::beam_elastic;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 348 "feiparser.l"
{return token::beam_9dof_elastic;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 349 "feiparser.l"
{return token::beam_elastic_lumped_mass;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 350 "feiparser.l"
{return token::FourNodeShellMITC4;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 351 "feiparser.l"
{return token::FourNodeShellNewMITC4;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 352 "feiparser.l"
{return token::ThreeNodeShellANDES;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 353 "feiparser.l"
{return token::FourNodeShellANDES;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 354 "feiparser.l"
{return token::truss;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 355 "feiparser.l"
{return token::contact;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 356 "feiparser.l"
{return token::FrictionalPenaltyContact;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 357 "feiparser.l"
{return token::variable_node_brick_8_to_27;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 358 "feiparser.l"
{return token::ShearBeamLT;}
	YY_BREAK
/* Element options */
case 140:
YY_RULE_SETUP
#line 362 "feiparser.l"
{return token::porosity;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 363 "feiparser.l"
{return token::rho_s;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 364 "feiparser.l"
{return token::rho_f;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 365 "feiparser.l"
{return token::k_x;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 366 "feiparser.l"
{return token::k_y;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 367 "feiparser.l"
{return token::k_z;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 368 "feiparser.l"
{return token::K_s;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 369 "feiparser.l"
{return token::K_f;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 370 "feiparser.l"
{return token::pressure;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 371 "feiparser.l"
{return token::cross_section;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 372 "feiparser.l"
{return token::shear_modulus;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 373 "feiparser.l"
{return token::torsion_Jx;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 374 "feiparser.l"
{return token::bending_Iz;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 375 "feiparser.l"
{return token::bending_Iy;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 376 "feiparser.l"
{return token::mass_density;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 377 "feiparser.l"
{return token::xz_plane_vector;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 378 "feiparser.l"
{return token::joint_1_offset;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 379 "feiparser.l"
{return token::joint_2_offset;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 380 "feiparser.l"
{return token::direction;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 381 "feiparser.l"
{return token::stiffness;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 382 "feiparser.l"
{return token::normal_stiffness;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 383 "feiparser.l"
{return token::tangential_stiffness;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 384 "feiparser.l"
{return token::normal_damping;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 385 "feiparser.l"
{return token::tangential_damping;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 386 "feiparser.l"
{return token::friction_ratio;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 387 "feiparser.l"
{return token::maximum_gap;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 388 "feiparser.l"
{return token::contact_plane_vector;}
	YY_BREAK
/* section types */
case 167:
YY_RULE_SETUP
#line 392 "feiparser.l"
{return token::MembranePlateFiber;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 393 "feiparser.l"
{return token::ElasticMembranePlate;}
	YY_BREAK
/* section options */
case 169:
YY_RULE_SETUP
#line 396 "feiparser.l"
{return token::thickness;}
	YY_BREAK
/* Material Names*/
case 170:
YY_RULE_SETUP
#line 399 "feiparser.l"
{return token::linear_elastic_isotropic_3d;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 400 "feiparser.l"
{return token::VonMisesLT;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 401 "feiparser.l"
{return token::DruckerPragerLT;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 402 "feiparser.l"
{return token::sanisand2008;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 403 "feiparser.l"
{return token::camclay;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 404 "feiparser.l"
{return token::camclay_accelerated;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 405 "feiparser.l"
{return token::sanisand2004;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 406 "feiparser.l"
{return token::linear_elastic_crossanisotropic;}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 407 "feiparser.l"
{return token::uniaxial_elastic_1d;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 408 "feiparser.l"
{return token::uniaxial_steel01;}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 409 "feiparser.l"
{return token::uniaxial_steel02;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 410 "feiparser.l"
{return token::uniaxial_concrete02;}
	YY_BREAK
/* LTensor based materials */
case 182:
YY_RULE_SETUP
#line 413 "feiparser.l"
{return token::linear_elastic_isotropic_3d_LT;}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 414 "feiparser.l"
{return token::PisanoLT;}
	YY_BREAK
/* Material options */
case 184:
YY_RULE_SETUP
#line 418 "feiparser.l"
{return token::elastic_modulus;}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 419 "feiparser.l"
{return token::elastic_modulus_horizontal;}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 420 "feiparser.l"
{return token::elastic_modulus_vertical;}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 421 "feiparser.l"
{return token::viscoelastic_modulus;}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 422 "feiparser.l"
{return token::poisson_ratio;}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 423 "feiparser.l"
{return token::poisson_ratio_h_v;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 424 "feiparser.l"
{return token::poisson_ratio_h_h;}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 425 "feiparser.l"
{return token::shear_modulus_h_v;}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 426 "feiparser.l"
{return token::von_mises_radius;}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 427 "feiparser.l"
{return token::druckerprager_angle;}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 428 "feiparser.l"
{return token::druckerprager_k;}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 429 "feiparser.l"
{return token::armstrong_frederick_ha;}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 430 "feiparser.l"
{return token::armstrong_frederick_cr;}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 431 "feiparser.l"
{return token::initial_confining_stress;}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 432 "feiparser.l"
{return token::pressure_reference_p0;}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 433 "feiparser.l"
{return token::strain;}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 434 "feiparser.l"
{return token::stress;}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 435 "feiparser.l"
{return token::control;}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 436 "feiparser.l"
{
										yylval->value = new Quantity(0.0,ESSIunits::unitless);
										return token::NUMBER;
									}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 440 "feiparser.l"
{
										yylval->value = new Quantity(1.0,ESSIunits::unitless);
										return token::NUMBER;
									}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 444 "feiparser.l"
{return token::isotropic_hardening_rate;}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 445 "feiparser.l"
{return token::kinematic_hardening_rate;}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 446 "feiparser.l"
{return token::initial_void_ratio;}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 447 "feiparser.l"
{return token::initial_shear_modulus;}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 448 "feiparser.l"
{return token::initial_bulk_modulus;}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 449 "feiparser.l"
{return token::reference_void_ratio;}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 450 "feiparser.l"
{return token::critical_stress_ratio_M;}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 451 "feiparser.l"
{return token::minimum_bulk_modulus;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 452 "feiparser.l"
{return token::initial_mean_pressure;}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 453 "feiparser.l"
{return token::e0;}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 454 "feiparser.l"
{return token::sanisand2008_Pat;}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 455 "feiparser.l"
{return token::sanisand2008_k_c;}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 456 "feiparser.l"
{return token::sanisand2008_K0;}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 457 "feiparser.l"
{return token::sanisand2008_G0;}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 458 "feiparser.l"
{return token::sanisand2008_alpha_cc;}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 459 "feiparser.l"
{return token::sanisand2008_c;}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 460 "feiparser.l"
{return token::sanisand2008_xi;}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 461 "feiparser.l"
{return token::sanisand2008_lambda;}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 462 "feiparser.l"
{return token::sanisand2008_ec_ref;}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 463 "feiparser.l"
{return token::sanisand2008_m;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 464 "feiparser.l"
{return token::sanisand2008_h0;}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 465 "feiparser.l"
{return token::sanisand2008_ch;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 466 "feiparser.l"
{return token::sanisand2008_nb;}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 467 "feiparser.l"
{return token::sanisand2008_A0;}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 468 "feiparser.l"
{return token::sanisand2008_nd;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 469 "feiparser.l"
{return token::sanisand2008_p_r;}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 470 "feiparser.l"
{return token::sanisand2008_rho_c;}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 471 "feiparser.l"
{return token::sanisand2008_theta_c;}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 472 "feiparser.l"
{return token::sanisand2008_X;}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 473 "feiparser.l"
{return token::sanisand2008_z_max;}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 474 "feiparser.l"
{return token::sanisand2008_cz;}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 475 "feiparser.l"
{return token::sanisand2008_p0;}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 476 "feiparser.l"
{return token::sanisand2008_p_in;}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 477 "feiparser.l"
{return token::yield_strength;}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 478 "feiparser.l"
{return token::strain_hardening_ratio;}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 479 "feiparser.l"
{return token::a2;}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 480 "feiparser.l"
{return token::a3;}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 481 "feiparser.l"
{return token::a4;}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 482 "feiparser.l"
{return token::R0;}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 483 "feiparser.l"
{return token::cR1;}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 484 "feiparser.l"
{return token::cR2;}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 485 "feiparser.l"
{return token::compressive_strength;}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 486 "feiparser.l"
{return token::strain_at_compressive_strength;}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 487 "feiparser.l"
{return token::crushing_strength;}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 488 "feiparser.l"
{return token::strain_at_crushing_strength;}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 489 "feiparser.l"
{return token::tensile_strength;}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 490 "feiparser.l"
{return token::tension_softening_stiffness;}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 491 "feiparser.l"
{return token::sanisand2004_Pat;}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 492 "feiparser.l"
{return token::sanisand2004_G0;}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 493 "feiparser.l"
{return token::sanisand2004_p_cut;}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 494 "feiparser.l"
{return token::sanisand2004_Mc;}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 495 "feiparser.l"
{return token::sanisand2004_c;}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 496 "feiparser.l"
{return token::sanisand2004_lambda_c;}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 497 "feiparser.l"
{return token::sanisand2004_xi;}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 498 "feiparser.l"
{return token::sanisand2004_ec_ref;}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 499 "feiparser.l"
{return token::sanisand2004_m;}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 500 "feiparser.l"
{return token::sanisand2004_h0;}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 501 "feiparser.l"
{return token::sanisand2004_ch;}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 502 "feiparser.l"
{return token::sanisand2004_nb;}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 503 "feiparser.l"
{return token::sanisand2004_A0;}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 504 "feiparser.l"
{return token::sanisand2004_nd;}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 505 "feiparser.l"
{return token::sanisand2004_z_max;}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 506 "feiparser.l"
{return token::sanisand2004_cz;}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 507 "feiparser.l"
{return token::strain_increment_size;}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 508 "feiparser.l"
{return token::maximum_strain;}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 509 "feiparser.l"
{return token::number_of_times_reaching_maximum_strain;}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 510 "feiparser.l"
{return token::constitutive;}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 511 "feiparser.l"
{return token::testing;}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 512 "feiparser.l"
{return token::constant;}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 513 "feiparser.l"
{return token::mean;}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 514 "feiparser.l"
{return token::triaxial;}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 515 "feiparser.l"
{return token::drained;}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 516 "feiparser.l"
{return token::undrained;}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 517 "feiparser.l"
{return token::simple;}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 518 "feiparser.l"
{return token::shear;}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 519 "feiparser.l"
{return token::number_of_subincrements;}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 520 "feiparser.l"
{return token::maximum_number_of_iterations;}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 521 "feiparser.l"
{return token::tolerance_1;}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 522 "feiparser.l"
{return token::tolerance_2;}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 523 "feiparser.l"
{return token::Gauss;}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 524 "feiparser.l"
{return token::each;}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 525 "feiparser.l"
{return token::points;}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 526 "feiparser.l"
{return token::point;}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 527 "feiparser.l"
{return token::single;}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 528 "feiparser.l"
{return token::value;}
	YY_BREAK
/* Pisano Model options  */
case 289:
YY_RULE_SETUP
#line 532 "feiparser.l"
{return token::M_in;}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 533 "feiparser.l"
{return token::kd_in;}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 534 "feiparser.l"
{return token::xi_in;}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 535 "feiparser.l"
{return token::h_in;}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 536 "feiparser.l"
{return token::m_in;}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 537 "feiparser.l"
{return token::beta_min;}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 538 "feiparser.l"
{return token::n_in;}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 539 "feiparser.l"
{return token::a_in;}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 540 "feiparser.l"
{return token::elastic_modulus_1atm;}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 541 "feiparser.l"
{return token::eplcum_cr_in;}
	YY_BREAK
/* Load options */
case 299:
#line 545 "feiparser.l"
case 300:
#line 546 "feiparser.l"
case 301:
#line 547 "feiparser.l"
case 302:
#line 548 "feiparser.l"
case 303:
#line 549 "feiparser.l"
case 304:
#line 550 "feiparser.l"
case 305:
#line 551 "feiparser.l"
case 306:
#line 552 "feiparser.l"
case 307:
YY_RULE_SETUP
#line 552 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::FORCE;
									}
	YY_BREAK
/* Acceleration field options*/
case 308:
YY_RULE_SETUP
#line 558 "feiparser.l"
{return token::ax;}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 559 "feiparser.l"
{return token::ay;}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 560 "feiparser.l"
{return token::az;}
	YY_BREAK
/* Time-History types */
case 311:
YY_RULE_SETUP
#line 563 "feiparser.l"
{return token::TH_PATH_SERIES;}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 564 "feiparser.l"
{return token::TH_PATH_TIME_SERIES;}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 565 "feiparser.l"
{return token::TH_LINEAR;}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 566 "feiparser.l"
{return token::TH_FROM_REACTIONS;}
	YY_BREAK
/* Element load types */
case 315:
YY_RULE_SETUP
#line 569 "feiparser.l"
{return token::self_weight;}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 570 "feiparser.l"
{return token::surface;}
	YY_BREAK
/* Time-History options */
case 317:
YY_RULE_SETUP
#line 573 "feiparser.l"
{return token::startTime;}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 574 "feiparser.l"
{return token::endTime;}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 575 "feiparser.l"
{return token::Period;}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 576 "feiparser.l"
{return token::Phase;}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 577 "feiparser.l"
{return token::Amplitude;}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 578 "feiparser.l"
{return token::frequency;}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 579 "feiparser.l"
{return token::frequency1;}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 580 "feiparser.l"
{return token::frequency2;}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 581 "feiparser.l"
{return token::frequency3;}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 582 "feiparser.l"
{return token::frequency4;}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 583 "feiparser.l"
{return token::MaxTime;}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 584 "feiparser.l"
{return token::MAGNITUDES;}
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 585 "feiparser.l"
{return token::MAGNITUDE;}
	YY_BREAK
/* Mass options */
case 330:
YY_RULE_SETUP
#line 588 "feiparser.l"
{return token::mx;}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 589 "feiparser.l"
{return token::my;}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 590 "feiparser.l"
{return token::mz;}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 591 "feiparser.l"
{return token::Imx;}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 592 "feiparser.l"
{return token::Imy;}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 593 "feiparser.l"
{return token::Imz;}
	YY_BREAK
/* Damping model types */
case 336:
YY_RULE_SETUP
#line 596 "feiparser.l"
{return token::DAMPING_RAYLEIGH;}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 597 "feiparser.l"
{return token::DAMPING_CAUGHEY3;}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 598 "feiparser.l"
{return token::DAMPING_CAUGHEY4;}
	YY_BREAK
/* Damping model options */
case 339:
YY_RULE_SETUP
#line 601 "feiparser.l"
{return token::a0;}
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 602 "feiparser.l"
{return token::a1;}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 603 "feiparser.l"
{return token::stiffness_to_use;}
	YY_BREAK
case 342:
#line 605 "feiparser.l"
case 343:
#line 606 "feiparser.l"
case 344:
YY_RULE_SETUP
#line 606 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::stiffness_to_use_opt;
									}
	YY_BREAK
/* Constraint types */
case 345:
YY_RULE_SETUP
#line 612 "feiparser.l"
{return token::equaldof;}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 613 "feiparser.l"
{return token::equaldof;}
	YY_BREAK
/* Constraint options */
case 347:
YY_RULE_SETUP
#line 616 "feiparser.l"
{return token::master;}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 617 "feiparser.l"
{return token::slave;}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 618 "feiparser.l"
{return token::dof_to_constrain;}
	YY_BREAK
/* DRM OPtions */
case 350:
YY_RULE_SETUP
#line 621 "feiparser.l"
{return token::scale_factor;}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 622 "feiparser.l"
{return token::displacement_scale_unit;}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 623 "feiparser.l"
{return token::velocity_scale_unit;}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 624 "feiparser.l"
{return token::acceleration_scale_unit;}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 625 "feiparser.l"
{return token::number_of_steps;}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 626 "feiparser.l"
{return token::number_of_boundary_nodes;}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 627 "feiparser.l"
{return token::number_of_exterior_nodes;}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 628 "feiparser.l"
{return token::number_of_drm_elements;}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 629 "feiparser.l"
{return token::element_file;}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 630 "feiparser.l"
{return token::boundary_nodes_file;}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 631 "feiparser.l"
{return token::exterior_nodes_file;}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 632 "feiparser.l"
{return token::displacement_file;}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 633 "feiparser.l"
{return token::acceleration_file;}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 634 "feiparser.l"
{return token::hdf5_file;}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 635 "feiparser.l"
{return token::velocity_file;}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 636 "feiparser.l"
{return token::force_file;}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 637 "feiparser.l"
{return token::series_file;}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 638 "feiparser.l"
{return token::time_series_file;}
	YY_BREAK
/* ================================================================================================= */
/* ========                     DEFINE                                                     ========= */
/* ================================================================================================= */
/* Defineable things */
case 368:
YY_RULE_SETUP
#line 646 "feiparser.l"
{return token::ALGORITHM;}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 647 "feiparser.l"
{return token::CONVERGENCE_TEST;}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 648 "feiparser.l"
{return token::SOLVER;}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 649 "feiparser.l"
{return token::DYNAMICINTEGRATOR;}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 650 "feiparser.l"
{return token::STATICINTEGRATOR;}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 651 "feiparser.l"
{return token::OUTPUT;}
	YY_BREAK
/* Algorithm options*/
case 374:
#line 655 "feiparser.l"
case 375:
#line 656 "feiparser.l"
case 376:
#line 657 "feiparser.l"
case 377:
#line 658 "feiparser.l"
case 378:
#line 659 "feiparser.l"
case 379:
YY_RULE_SETUP
#line 659 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::ALGNAME;
									 }
	YY_BREAK
/* Test options */
case 380:
#line 665 "feiparser.l"
case 381:
#line 666 "feiparser.l"
case 382:
YY_RULE_SETUP
#line 666 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::TESTNAME;
									}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 670 "feiparser.l"
{return token::tolerance;}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 671 "feiparser.l"
{return token::maximum_iterations;}
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 672 "feiparser.l"
{return token::verbose_level;}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 673 "feiparser.l"
{return token::minimum_time_step;}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 674 "feiparser.l"
{return token::maximum_time_step;}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 675 "feiparser.l"
{return token::number_of_iterations;}
	YY_BREAK
/* define solver options */
case 389:
#line 679 "feiparser.l"
case 390:
#line 680 "feiparser.l"
case 391:
#line 681 "feiparser.l"
case 392:
#line 682 "feiparser.l"
case 393:
YY_RULE_SETUP
#line 682 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::SOLVERNAME;
									}
	YY_BREAK
/* define static and dynamic integrator options */
case 394:
YY_RULE_SETUP
#line 688 "feiparser.l"
{return token::DYNAMICINTEGRATOR_NEWMARK;}
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 689 "feiparser.l"
{return token::DYNAMICINTEGRATOR_HHT;}
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 690 "feiparser.l"
{return token::STATICINTEGRATOR_DISPLACEMENT;}
	YY_BREAK
/* SIMULATE*/
case 397:
YY_RULE_SETUP
#line 694 "feiparser.l"
{return token::STATIC;}
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 695 "feiparser.l"
{return token::DYNAMIC;}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 696 "feiparser.l"
{return token::TRANSIENT;}
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 697 "feiparser.l"
{return token::VARIABLETRANSIENT;}
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 698 "feiparser.l"
{return token::EIGEN;}
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 699 "feiparser.l"
{return token::USING;}
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 700 "feiparser.l"
{return token::time_step;}
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 701 "feiparser.l"
{return token::number_of_modes;}
	YY_BREAK
/* OUTPUT */
case 405:
YY_RULE_SETUP
#line 704 "feiparser.l"
{return token::BINARY;}
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 705 "feiparser.l"
{return token::TEXT;}
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 706 "feiparser.l"
{return token::ENABLE;}
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 707 "feiparser.l"
{return token::DISABLE;}
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 708 "feiparser.l"
{return token::COMPRESSION;}
	YY_BREAK
/* ================================================================================================= */
/* ========                    AUXILLIARY WORDS                                            ========= */
/* ================================================================================================= */
case 410:
YY_RULE_SETUP
#line 715 "feiparser.l"
{return token::AT;}
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 716 "feiparser.l"
{return token::ALL;}
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 717 "feiparser.l"
{return token::AND;}
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 718 "feiparser.l"
{return token::TEXTDOFS;}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 719 "feiparser.l"
{return token::FACTOR;}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 720 "feiparser.l"
{return token::INCREMENT;}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 721 "feiparser.l"
{return token::NAME;}
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 722 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 723 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 724 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 725 "feiparser.l"
{return token::of;}
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 726 "feiparser.l"
{return token::STEPS;}
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 727 "feiparser.l"
{return token::TO;}
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 728 "feiparser.l"
{return token::TYPE;}
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 729 "feiparser.l"
{return token::USE;}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 730 "feiparser.l"
{return token::WITH;}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 731 "feiparser.l"
{return token::NODES;}
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 732 "feiparser.l"
{return token::DOMAIN_;}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 733 "feiparser.l"
{return token::dof;}
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 734 "feiparser.l"
{return token::RESPONSE;}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 735 "feiparser.l"
{return token::FILE;}
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 736 "feiparser.l"
{return token::FROM;}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 737 "feiparser.l"
{return token::EVERY;}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 738 "feiparser.l"
{return token::LEVEL;}
	YY_BREAK
/* Greek */
case 434:
YY_RULE_SETUP
#line 741 "feiparser.l"
{return token::alpha;}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 742 "feiparser.l"
{return token::beta;}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 743 "feiparser.l"
{return token::gamma;}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 744 "feiparser.l"
{return token::lambda;}
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 745 "feiparser.l"
{return token::kappa;}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 746 "feiparser.l"
{return token::delta;}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 749 "feiparser.l"
{return token::INTEGRATIONPOINTS;}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 750 "feiparser.l"
{return token::IntegrationRule;}
	YY_BREAK
/* DOFS */
case 442:
#line 755 "feiparser.l"
case 443:
#line 756 "feiparser.l"
case 444:
#line 757 "feiparser.l"
case 445:
#line 758 "feiparser.l"
case 446:
#line 759 "feiparser.l"
case 447:
#line 760 "feiparser.l"
case 448:
#line 761 "feiparser.l"
case 449:
#line 762 "feiparser.l"
case 450:
#line 763 "feiparser.l"
case 451:
YY_RULE_SETUP
#line 763 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::DOF;
									}
	YY_BREAK
/*Other language commands*/
case 452:
#line 770 "feiparser.l"
case 453:
#line 771 "feiparser.l"
case 454:
YY_RULE_SETUP
#line 771 "feiparser.l"
{
									yylval->ident = new string(yytext);
									return token::BYE;
								}
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 775 "feiparser.l"
{void show_einstein(); show_einstein();}
	YY_BREAK
/* ================================================================================================= */
/* ========                     NON KEYWORDS                                               ========= */
/* ================================================================================================= */
/* names */
case 456:
YY_RULE_SETUP
#line 785 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::IDENT;
									}
	YY_BREAK
/*numbers*/
case 457:
#line 792 "feiparser.l"
case 458:
YY_RULE_SETUP
#line 792 "feiparser.l"
{
										yylval->value = new Quantity(atof(yytext), ESSIunits::unitless);
										return token::NUMBER;
									}
	YY_BREAK
/* End-of-file discards current file and returns to the previous, otherwise to the interactive prompt */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IFILE):
case YY_STATE_EOF(COMMENT):
#line 797 "feiparser.l"
{
										if (popfile()==0)
										{
											if(FLAG_interactive_mode == 1)
											{
												newstdin();
												yyrestart(yyin);
												//yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
												prompt = thePrompt;
												//cout << prompt;
											}
											else
											{
												cout << endl << "You forgot to say \"bye\"... " << endl;
												wipe_model();
												exit(0);
											}

										}
										if (strncmp(curfilename, initial, 5) == 0) //I dont like strncmp :(
										{
											prompt = thePrompt;
											//cout << prompt;
										}
										yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
									}
	YY_BREAK
/* comments */
case 459:
YY_RULE_SETUP
#line 825 "feiparser.l"

	YY_BREAK
case 460:
YY_RULE_SETUP
#line 826 "feiparser.l"

	YY_BREAK
/* ignore white space, tabs and carriage return*/
case 461:
YY_RULE_SETUP
#line 830 "feiparser.l"
//{yylloc -> step();}
	YY_BREAK
/* ignore newline*/
/*\n                                  {yylloc -> lines(1);} */
case 462:
YY_RULE_SETUP
#line 834 "feiparser.l"
{
										yycolumn = 1;
									}
	YY_BREAK
/* Match text strings */
case 463:
YY_RULE_SETUP
#line 839 "feiparser.l"
{
										std::string* thisString = new std::string(yytext);
										yylval->ident = thisString;
										return token::STRING;
									}
	YY_BREAK
/* catch-all of the rest and report (only useless characters like ? get to this point */
case 464:
YY_RULE_SETUP
#line 846 "feiparser.l"
{ cout << "Failed to parse the character at line " << yylineno << " : " << *yytext << endl; }
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 848 "feiparser.l"
ECHO;
	YY_BREAK
#line 5035 "feiparser.lex.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2854 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2854 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2853);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 848 "feiparser.l"



int newfile(char* fn) {
	FILE *f = fopen(fn, "r");

	bufstack *bs = (bufstack*) malloc(sizeof( bufstack)) ;

	if (!f)     {perror(fn); return 0 ;}
	if (!bs)    {perror("Out of memory."); exit(1);}

	if (curbs) curbs->lineno = yylineno;
	bs->prev = curbs;

	bs->bs = yy_create_buffer(f, YY_BUF_SIZE);
	bs -> f = f;
	bs -> filename = fn;
	bs -> lineno = 1;
	yy_switch_to_buffer(bs->bs);
	curbs = bs;
	yylineno = 1;
	curfilename = fn;

	cout << "Including: \"" << fn << "\"" << endl << endl;

	return 1;
}



int newstdin()
{

	FILE *f = stdin;

	bufstack *bs = (bufstack *) malloc(sizeof( bufstack)) ;


	if (!f)
	{
		perror("Could not open STDIN!");
		return 0 ;
	}
	if (!bs)
	{
		perror("Out of memory.");
		exit(1);
	}

	if (curbs)
	{
		curbs->lineno = yylineno;
	}
	bs->prev = curbs;
	bs->bs = yy_create_buffer(f, YY_BUF_SIZE);
	bs -> f = f;
	bs -> lineno = 1;
	bs -> filename = initial;

	yy_switch_to_buffer(bs->bs);
	curbs = bs;


	yylineno = 1;
	curfilename = initial;

	cout << "Input: STDIN" << endl << endl;
	prompt = thePrompt;
	//cout << prompt ;
	return 1;
}

int popfile(void)
{
	bufstack *bs = curbs;
	bufstack *prevbs;

	if (!bs)
	{
		return 0;
	}

	fclose(bs->f);
	yy_delete_buffer(bs->bs);

	prevbs = bs-> prev;
	free(bs);

	if (!prevbs)
	{
		return 0;
	}

	yy_switch_to_buffer(prevbs->bs);
	curbs = prevbs;

	cout << "Done including: \"" << curfilename << "\" (" << yylineno << " lines included)." << endl;
	cout << "Continuing with \"" << curbs->filename << "\" at line " << curbs->lineno << "." << endl;

	cout << endl << prompt;

	yylineno = curbs->lineno;
	curfilename = curbs->filename;

	return 1;
}

int error_behavior()
{
	//while (popfile() != 0); // Discard everything!

	//Start new interactive mode
	if ( FLAG_interactive_mode == 1 )
	{
		newstdin();
		yyrestart(yyin);

		prompt = thePrompt;
		//if (recovery_mode == 1)
		//    prompt = "(safe) " + thePrompt;
	}
	else
	{
		exit(-1);
	}

	return 0;
}


void print_usage()
{
	cout <<
		 "RealESSI Simulator: UCDavis Earthquake-Soil-Structure-Interaction Simulator \n"
		 "              -          -    -         -                     \n"
		 "Usage: essi [-cfhnsmbe FILENAME]\n"
		 "  -c --cpp-output                : Output cpp version of the analysis done. \n"
		 "  -f --filename [FILENAME]       : Include and run FILENAME. \n"
		 "  -h --help                      : Print this message. \n"
		 "  -n --no-interactive            : Disable interactive mode. \n"
		 "  -s --set-variable              : Set a variable from the command line. \n"
		 "  -d --dry-run                   : Do not execute ESSI API calls. Just parse. \n"
		 "  -m --model-name [NAME]         : Set the model name from the command line. \n"
		 "  -p --profile-report [FILENAME] : Set the filename for the profiler report (and activate lightweight profiling)\n"
		 " \n\n"
		 "Example to set a variable name from command line:\n"
		 "    essi -s a=10,b=20,c=30\n"
		 "Runs ESSI with variables a, b, and c set to 10, 20 and 30 respectively.\n"
		 "At this time, only ESSIunits::unitless variables can be set. \n"
		 "\n\n";

}





#ifdef _PARALLEL_PROCESSING
  #include "../ModifiedOpenSeesServices/domain/domain/partitioned/PartitionedDomain.h"
  #include "../ModifiedOpenSeesServices/graph/partitioner/GraphPartitioner.h"
  #include <../ModifiedOpenSeesServices/actor/objectBroker/FEM_ObjectBroker.h>
  #include <../ModifiedOpenSeesServices/actor/machineBroker/MachineBroker.h>
  #include <../ModifiedOpenSeesServices/actor/machineBroker/MPI_MachineBroker.h>

  extern PartitionedDomain theDomain;
  extern int OPS_PARALLEL_PROCESSING;
  extern int OPS_NUM_SUBDOMAINS;
  extern bool OPS_PARTITIONED;
  extern FEM_ObjectBroker *OPS_OBJECT_BROKER;
  extern MachineBroker  *OPS_MACHINE;
  extern GraphPartitioner  *OPS_GRAPH_PARTITIONER;
  static MPI_MachineBroker *theMachineBroker = 0;
#endif


int start_parser(int argc, char**argv)
{

	//Allegedly, this forces cout to be non-buffered. Always flushes!!
	std::cout<<std::unitbuf; 

	
	//Welcome message
	welcome_msg();

	// Generate previously known units list
	set_known_units();

	//Parse Command Line Parameters
	int c;
	char *filename_from_command_line = 0;

	while (1)
	{
		static struct option long_options[] =
		{
			{"cpp-output",       no_argument,       0, 'c'},
			{"file",             required_argument, 0, 'f'},
			{"help",             no_argument,       0, 'h'},
			{"model-name",       required_argument, 0, 'm'},
			{"no-interactive",   no_argument,       0, 'n'},
			{"set-variable",     required_argument, 0, 's'},
			{"no-cpp-output",    no_argument,       0, 'x'},
			{"dry-run",          no_argument,       0, 'd'},
			{"profile-report",   required_argument, 0, 'p'},
			{0, 0, 0, 0}
		};

		/* getopt_long stores the option index here. */
		int option_index = 0;

		//This is the command line option parser
		c = getopt_long(argc, argv, "cf:hns:xm:dp:", long_options, &option_index);

		/* Detect the end of the options. */
		if (c == -1)
		{
			break;
		}

		switch (c)
		{

			case 'c':  // -c --cpp-output: Create .cpp output
				FLAG_generate_cpp_output = 1;
				break;
			case 'f': // -f --file: Take input from file
				filename_from_command_line = optarg;
				FLAG_run_file = 1;
				break;
			case 'h': // -h --help: print usage
				print_usage();
				return (0);
				break;
			case 'n': // -n --no-interactive: disable interactive mode
				FLAG_interactive_mode = 0;
				break;
			case 's': // -s --set-variable: Set a variable from the command line
				set_variables(optarg);
				break;
			case 'x': // -x --no-cpp-output: disable cpp output (default)
				FLAG_generate_cpp_output = 0;
				break;
			case 'd': // -d --dry-run: do not call API... just make parser call and produce cpp output if so enabled
				FLAG_dry_run = 1;
				set_dry_run_mode(FLAG_dry_run);
				break;
			case 'm': // -m --model-name: Set model name from the command line
				set_model_name(optarg);
				break;
			case 'b': //  -b --binary-output: The output generated will be in binary instead of plain text.
				FLAG_binary_output = 1;
				break;
			case 'p': // -p --profile-report: Set the filename for the profiler report (and activate profiling)
				//cout << "Setting report file to:" << optarg << endl;
				set_profiling_results_filename(optarg);
				break;
			default:
				print_usage();
				return (0);
		}
	}

	if (optind < argc)
	{
		cout << "Unexpected option" << endl << endl;
		print_usage();
		return (0);
	}

	if (FLAG_interactive_mode)
	{
		newstdin();
	}

	if (FLAG_run_file)
	{
		newfile(filename_from_command_line);
		set_outcppfile_name(string(filename_from_command_line));
		prompt = "";
	}

#ifdef _PARALLEL_PROCESSING
	//Kill other processes in case of dry run... parallel is not needed.
	if(FLAG_dry_run)
	{
		theMachineBroker->shutdown();
	}
#endif

	// Parse flag
	int exitflag = -1;

	//Construct a parser object
	yy::feiparser parser;

	// Start parsing!
	cout << prompt;
	exitflag = parser.parse();

	//Exit
	return exitflag;
}




/*  SIGNAL HANDLING  */


void signalHandler(int signum)
{
	if(signum == SIGINT)
	{
		cout << "Caught SIGINT! Program ending." << endl;
	}
	else if(signum == SIGABRT)
	{
		cout << "Caught SIGABRT! Program ending." << endl;
	}
	else if(signum == SIGSEGV)
	{
		cout << "Caught SIGSEGV! Program ending." << endl;
	}
	else if(signum == SIGTERM)
	{
		cout << "Caught SIGTERM! Program ending." << endl;
	}
	else if(signum == SIGILL)
	{
		cout << "Caught SIGILL! Program ending." << endl;
	}
	else if(signum == SIGFPE)
	{
		cout << "Caught SIGFPE! Program ending." << endl;
	}
	else if(signum == SIGUSR1 || signum == SIGUSR2)
	{
		cout << "HDF5 set to flush, please wait...\n\n";
		call_hdf5_flush_next_chance();
		return; // Do not quit on these signals.
	}
	exit(signum);
}

/* END SIGNALS */

int main (int argc, char**argv)
{

	signal(SIGINT, signalHandler);
	signal(SIGABRT, signalHandler);
	signal(SIGSEGV, signalHandler);
	signal(SIGTERM, signalHandler);
	signal(SIGILL, signalHandler);
	signal(SIGFPE, signalHandler);
	signal(SIGUSR1, signalHandler);
	signal(SIGUSR2, signalHandler);


	int exitflag = -1;

#ifdef _PARALLEL_PROCESSING
	// In parallel processing, a few things have to be setup before starting.

   FEM_ObjectBroker theBroker;
   MPI_MachineBroker theMachine(&theBroker, argc, argv);
   theMachineBroker = &theMachine;
   int rank = theMachine.getPID();
   int np = theMachine.getNP();

   if (rank != 0) //If this is the main machine
   {
		exitflag = theMachine.runActors();
   } 
   else  // Or if it is a slave node
   {
		OPS_OBJECT_BROKER       = &theBroker;
		OPS_MACHINE             = &theMachine;
		OPS_PARALLEL_PROCESSING = np;
		OPS_NUM_SUBDOMAINS      = np - 1;
		OPS_PARTITIONED         = false;

		exitflag = start_parser(argc, argv);
	}

	//this got moved to the wipe_model() API call...... 
	theDomain.clearAll();
	theMachine.shutdown();

	cout << "Process # " << rank << " ended with exitflag = " << exitflag << endl;
#else
	exitflag = start_parser(argc, argv);
#endif


	return exitflag;
}
  


int smaller(int a, int b)
{
	if (a >= b)
	{
		return b;
	}
	else
	{
		return a;
	}
}

// =================================================================================
// Please do not erase! Might make it into the code some day. (Jose Abell)
//
// This code replaces standard input as the main input mechanism, and implements
// a smarter prompt, which has auto replace, code history, etc.
//
// Buggy and unstable as it is. (To make it work, the is a macro that needs to be enabled on top of
// this file)
//
//static int my_yyinput(char *buf, int max_size)
//{
//    int   len;
//
//    if (st_readline_buffer == NULL)
//    {
//        st_readline_used_len = 0;
//        st_readline_buffer = readline(prompt.c_str());
//
//        if (st_readline_buffer == NULL)
//            return 0;
//        else
//        {
//            //strncat(st_readline_buffer, " ", 1);
//        }
//    }
//
//    len = smaller(strlen(st_readline_buffer) - st_readline_used_len, max_size);
//
//    if (len == 0)
//    {
//        strncat(st_readline_buffer, " ", 1);
//        len = 1;
//    }
//
//    strncpy(buf, &st_readline_buffer[st_readline_used_len], len);
//    add_history(st_readline_buffer);
//
//    st_readline_used_len += len;
//    if (st_readline_buffer[st_readline_used_len] == '\0')
//    {
//        free(st_readline_buffer);
//        st_readline_buffer = NULL;
//    }
//
//    return len;
//}
//// =================================================================================

#include <ctime>
void welcome_msg()
{
	time_t rawtime;
	struct tm *timeinfo;
	char timestring[80];
	time ( &rawtime );
	timeinfo = localtime ( &rawtime );
	strftime (timestring, 80, "%b %d %Y at %H:%M:%S", timeinfo);
	cout << "                                                               " << endl;
	cout << "                                                               " << endl;
	cout << "  The Finite Element Interpreter                               " << endl;
	cout << "                                                               " << endl;
	cout << "  Real ESSI                                                  " << endl;
	cout << "  Earthquake Soil Structure Interaction Simulator            " << endl;
	cout << "                                                             " << endl;
	#ifdef _PARALLEL_PROCESSING
	cout << " Parallel processing mode. Main machine!                     " << endl;
	#else
	cout << "  Sequential processing mode.                                " << endl;
	#endif
	cout << "                                                             " << endl;
	cout << "Compiled: " << __DATE__ << " at " << __TIME__  << endl;
	cout << "Time Now: " << timestring  << endl;
	cout << "                                                               " << endl;
	cout << "Static startup tips:                                           " << endl;
	cout << " * Remember: Every command ends with a semicolon ';'.          " << endl;
	cout << " * Type 'quit;' or 'exit;' to finish.                          " << endl;
	cout << " * Run 'essi -h to see available command line options.        " << endl;
	cout << "                                                               " << endl;
}

void set_known_units()
{
	//Base units*/
	global_variables["m"] = Quantity(1.0, ESSIunits::m);
	global_variables["kg"] = Quantity(1.0, ESSIunits::kg);
	global_variables["s"] = Quantity(1.0, ESSIunits::s);

	// Length
	global_variables["cm"] = Quantity(1.0, ESSIunits::cm);
	global_variables["mm"] = Quantity(1.0, ESSIunits::mm);
	global_variables["Km"] = Quantity(1.0, ESSIunits::km);

	//Time
	global_variables["Hz"] = Quantity(1.0, ESSIunits::Hz);
	global_variables["ms"] = Quantity(1.0, ESSIunits::ms);
	global_variables["ns"] = Quantity(1.0, ESSIunits::ns);

	//Force
	global_variables["N"] = Quantity(1.0, ESSIunits::N);
	global_variables["kN"] = Quantity(1.0, ESSIunits::kN);

	//Pressure
	global_variables["Pa"] = Quantity(1.0, ESSIunits::Pa);
	global_variables["kPa"] = Quantity(1.0, ESSIunits::kPa);
	global_variables["MPa"] = Quantity(1.0, ESSIunits::MPa);
	global_variables["GPa"] = Quantity(1.0, ESSIunits::GPa);

	//Constants
	global_variables["g"] = ESSIunits::g;  // gravitational acceleration on Earth at sea level and 45degrees of latitude
	global_variables["pi"] = Quantity(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986, ESSIunits::unitless); // pi to a useless ammount of significant digits

	// Put these variables in the locked list.... cuz we own this!
	map<string, Quantity>::const_iterator it;
	for (it = global_variables.begin();
			it != global_variables.end();
			it++)
	{
		locked_global_variables.insert(it->first);
	}
}

void set_variables(char *cstring)
{
	string variables(cstring);

	cout << endl << "The following variables are being set from the command line:" << endl << endl;

	while (1)
	{
		size_t i1 = variables.find("=");
		size_t i2 = variables.find(",");

		if (i1 == string::npos)
		{
			break;
		}

		string var_name(variables.substr(0, i1));
		string var_value(variables.substr(i1 + 1, i2 - i1 - 1));

		if (i2 == string::npos)
		{
			variables = "";
		}
		else
		{
			variables = variables.substr(i2 + 1);
		}

		cout << var_name << " = " << var_value << endl;

		double value = boost::lexical_cast<double>(var_value);
		global_variables[var_name] = Quantity(value, ESSIunits::unitless); // :) love boost!
	}
	cout << endl << endl;
}




























void show_einstein()
{

	cout << " "                                                                                 << endl;
	cout << "                    .+~                :xx++::"                                    << endl;
	cout << "                   :`. -          .!!X!~\"?!`~!~!. :-:."                           << endl;
	cout << "                  <             .!!!H\":.~ ::+!~~!!!~ `%X."                        << endl;
	cout << "                  '             ~~!M!!>!!X?!!!!!!!!!!...!~."                       << endl;
	cout << "                              <!:!MM!~:XM!!!!!!.:!..~ !.  `<"                      << endl;
	cout << "                  <: `   :~ .:<~!!M!XXHM!!!X!XXHtMMHHHX!  ~ ~"                     << endl;
	cout << "                ~~~~<' ~!!!:!!!!!XM!!M!!!XHMMMRMSXXX!!!!!!:  <`"                   << endl;
	cout << "                  `<  <::!!!!!X!X?M!!M!!XMMMMXXMMMM?!!!!!!?!:~<"                   << endl;
	cout << "               : '~~~<!!!XMMH!!XMXMXHHXXXXM!!!!MMMMSXXXX!!!!!!!~"                  << endl;
	cout << "            :    ::`~!!!MMMMXXXtMMMMMMMMMMMHX!!!!!!HMMMMMX!!!!!: ~"                << endl;
	cout << "               '~:~!!!!!MMMMMMMMMMMMMMMMMMMMMMXXX!!!M??MMMM!!X!!i:"                << endl;
	cout << "               <~<!!!!!XMMMMMMMMMMMM8M8MMMMM8MMMMMXX!!!!!!!!X!?t?!:"               << endl;
	cout << "               ~:~~!!!!?MMMMMM@M@RMRRR$@@MMRMRMMMMMMXSX!!!XMMMX<?X!"               << endl;
	cout << "             :XX <!!XHMMMM88MM88BR$M$$$$8@8RN88MMMMMMMMHXX?MMMMMX!!!"              << endl;
	cout << "           .:X! <XMSM8M@@$$$$$$$$$$$$$$$$$$$B8R$8MMMMMMMMMMMMMMMMX!X"              << endl;
	cout << "          :!?! !?XMMMMM8$$$$8$$$$$$$$$$$$$$BBR$$MMM@MMMMMMMMMMMMMM!!X"             << endl;
	cout << "        ~<!!~ <!!XMMMB$$$$$$$$$$$$$$$$$$$$$$$$MMR$8MR$MMMMMMMMMMMMM!?!:"           << endl;
	cout << "        :~~~ !:X!XMM8$$$$$$$$$$$$$$$$$$$$$$$RR$$MMMMR8NMMMMMMMMMMMMM<!`-"          << endl;
	cout << "    ~:<!:~`~':!:HMM8N$$$$$$$$$$$$$$$$$$$$$$$$$8MRMM8R$MRMMMMMMMMRMMMX!"            << endl;
	cout << "  !X!``~~   :~XM?SMM$B$$$$$$$$$$$$$$$$$$$$$$BR$$MMM$@R$M$MMMMMM$MMMMX?L"           << endl;
	cout << " X~.      : `!!!MM#$RR$$$$$$$$$$$$$$$$$R$$$$$R$M$MMRRRM8MMMMMMM$$MMMM!?:"          << endl;
	cout << " ! ~ <~  !! !!~`` :!!MR$$$$$$$$$$RMM!?!??RR?#R8$M$MMMRM$RMMMM8MM$MMM!M!:>"         << endl;
	cout << ": ' >!~ '!!  !   .!XMM8$$$$$@$$$R888HMM!!XXHWX$8$RM$MR5$8MMMMR$$@MMM!!!< ~"        << endl;
	cout << "!  ' !  ~!! :!:XXHXMMMR$$$$$$$$$$$$$$$$8$$$$8$$$MMR$M$$$MMMMMM$$$MMM!!!!"          << endl;
	cout << " ~<!!!  !!! !!HMMMMMMMM$$$$$$$$$$$$$$$$$$$$$$$$$$MMM$M$$MM8MMMR$$MMXX!!!!/:`"      << endl;
	cout << "  ~!!!  !!! !XMMMMMMMMMMR$$$$$$$$$$$$R$RRR$$$$$$$MMMM$RM$MM8MM$$$M8MMMX!!!!:"      << endl;
	cout << "  !~ ~  !!~ XMMM%!!!XMMX?M$$$$$$$$B$MMSXXXH?MR$$8MMMM$$@$8$M$B$$$$B$MMMX!!!!"      << endl;
	cout << "  ~!    !! 'XMM?~~!!!MMMX!M$$$$$$MRMMM?!%MMMH!R$MMMMMM$$$MM$8$$$$$$MR@M!!!!!"      << endl;
	cout << "  <>    !!  !Mf x@#\"~!t?M~!$$$$$RMMM?Xb@!~`??MS$M@MMM@RMRMMM$$$$$$RMMMMM!!!!"     << endl;
	cout << "  !    '!~ <!!:!?M   !@!M<XM$$R5M$8MMM$! -XXXMMRMBMMM$RMMM@$R$BR$MMMMXX?!X!!"      << endl;
	cout << "  !    '!  !!X!!!?::xH!HM:MM$RM8M$RHMMMX...XMMMMM$RMMRRMMMMMMM8MMMMMMMMX!!X!"      << endl;
	cout << "  !     ~  !!?:::!!!MXMR~!MMMRMM8MMMMMS!!M?XXMMMMM$$M$M$RMMMM8$RMMMMMMMM%X!!"      << endl;
	cout << "  ~     ~  !~~X!!XHMMM?~ XM$MMMMRMMMMMM@MMMMMMMMMM$8@MMMMMMMMRMMMMM?!MMM%HX!"      << endl;
	cout << "           !!!!XSMMXXMM .MMMMMMMM$$$BB8MMM@MMMMMMMR$RMMMMMMMMMMMMMMMXX!?H!XX"      << endl;
	cout << "           XHXMMMMMMMM!.XMMMMMMMMMR$$$8M$$$$$M@88MMMMMMMMMMMMMMM!XMMMXX!!!XM"      << endl;
	cout << "      ~   <!MMMMMMMMRM:XMMMMMMMMMM8R$$$$$$$$$$$$$$$NMMMMMMMM?!MM!M8MXX!!/t!M"      << endl;
	cout << "      '   ~HMMMMMMMMM~!MM8@8MMM!MM$$8$$$$$$$$$$$$$$8MMMMMMM!!XMMMM$8MR!MX!MM"      << endl;
	cout << "          'MMMMMMMMMM'MM$$$$$MMXMXM$$$$$$$$$$$$$$$$RMMMMMMM!!MMM$$$$MMMMM<!M"      << endl;
	cout << "          'MMMMMMMMM!'MM$$$$$RMMMMMM$$$$$$$$$$$$$$$MMM!MMMX!!MM$$$$$M$$M$M!M"      << endl;
	cout << "           !MMMMMM$M! !MR$$$RMM8$8MXM8$$$$$$$$$$$$NMMM!MMM!!!?MRR$$RXM$$MR!M"      << endl;
	cout << "           !M?XMM$$M.< !MMMMMMSUSRMXM$8R$$$$$$$$$$#$MM!MMM!X!t8$M$MMMHMRMMX$"      << endl;
	cout << "    ,-,   '!!!MM$RMSMX:.?!XMHRR$RM88$$$8M$$$$$R$$$$8MM!MMXMH!M$$RMMMMRNMMX!$"      << endl;
	cout << "   -'`    '!!!MMMMMMMMMM8$RMM8MBMRRMR8RMMM$$$$8$8$$$MMXMMMMM!MR$MM!M?MMMMMM$"      << endl;
	cout << "          'XX!MMMMMMM@RMM$MM@$$BM$$$M8MMMMR$$$$@$$$$MM!MMMMXX$MRM!XH!!??XMMM"      << endl;
	cout << "          `!!!M?MHMMM$RMMMR@$$$$MR@MMMM8MMMM$$$$$$$WMM!MMMM!M$RMM!!.MM!%M?~!"      << endl;
	cout << "           !!!!!!MMMMBMM$$RRMMMR8MMMMMRMMMMM8$$$$$$$MM?MMMM!f#RM~    `~!!!~!"      << endl;
	cout << "           ~!!HX!!~!?MM?MMM??MM?MMMMMMMMMRMMMM$$$$$MMM!MMMM!!"                     << endl;
	cout << "           '!!!MX!:`~~`~~!~~!!!!XM!!!?!?MMMM8$$$$$MMMMXMMM!!"                      << endl;
	cout << "            !!~M@MX.. <!!X!!!!XHMHX!!``!XMMMB$MM$$B$M!MMM!!"                       << endl;
	cout << "            !!!?MRMM!:!XHMHMMMMMMMM!  X!SMMX$$MM$$$RMXMMM~"                        << endl;
	cout << "             !M!MMMM>!XMMMMMMMMXMM!!:!MM$MMMBRM$$$$8MMMM~"                         << endl;
	cout << "             `?H!M$R>'MMMM?MMM!MM6!X!XM$$$MM$MM$$$$MX$f"                           << endl;
	cout << " _______      `MXM$8X MMMMMMM!!MM!!!!XM$$$MM$MM$$$RX@\""                           << endl;
	cout << "/       \\_/|   ~M?$MM !MMMMXM!!MM!!!XMMM$$$8$XM$$RM!`"                            << endl;
	cout << "|Go AGS! _/    !XMMM !MMMMXX!XM!!!HMMMM$$$$RH$$M!~"                                << endl;
	cout << "\\_______/       'M?MM `?MMXMM!XM!XMMMMM$$$$$RM$$#"                                << endl;
	cout << "                 `>MMk ~MMHM!XM!XMMM$$$$$$BRM$M\""                                 << endl;
	cout << "                  ~`?M. !M?MXM!X$$@M$$$$$$RMM#"                                    << endl;
	cout << "                    `!M  !!MM!X8$$$RM$$$$MM#`"                                     << endl;
	cout << "                      !% `~~~X8$$$$8M$$RR#`"                                       << endl;
	cout << "                       !!x:xH$$$$$$$R$R*`"                                         << endl;
	cout << "                        ~!?MMMMRRRM@M#`       -Sushil-"                            << endl;
	cout << "                         `~???MMM?M\"`"                                            << endl;
	cout << "                             ``~~"                                                 << endl;
}

