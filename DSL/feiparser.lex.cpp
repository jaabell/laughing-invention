#line 2 "feiparser.lex.c"

#line 4 "feiparser.lex.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 475
#define YY_END_OF_BUFFER 476
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3028] =
    {   0,
        0,    0,    0,    0,    0,    0,  476,  474,  471,  472,
      471,    8,  474,  431,    4,   29,   10,   15,    3,    1,
        9,    2,  474,    5,  468,  468,  468,  468,  468,   16,
       24,    7,   23,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,   13,   14,
        6,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  461,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,   11,   30,   12,
       60,   61,  475,    0,    0,    0,  473,    0,  470,   21,
       19,   17,   18,  468,  469,   20,  467,  468,    0,  468,

      468,    0,    0,    0,   28,   25,   26,   27,  466,  466,
      466,  466,  466,  466,  466,  309,  310,  311,  466,  466,
      466,  466,  466,  466,    0,  466,  466,  466,  466,  312,
      313,  314,  466,  466,  430,  466,  252,  466,  466,  458,
      459,  460,  466,   22,  349,  350,  249,  250,  251,  466,
      466,  466,  466,  466,  466,  466,  466,  422,  318,  319,
      320,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,   54,  466,  466,  223,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,   50,  466,   56,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      340,  341,  342,  466,  466,  466,  466,  466,  432,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  455,
      456,  457,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  434,  466,  466,  466,
      466,  466,  452,  453,  454,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,   60,    0,  470,
      469,  467,    0,    0,  468,    0,    0,    0,    0,    0,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  343,
      344,  345,  466,  466,  145,  144,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
       80,  466,  423,  466,  466,  424,  466,  466,  466,  466,
      466,  466,  466,  464,  253,  254,  466,  466,  466,  466,
      466,   62,  466,  466,  466,  466,  466,  466,  466,  466,
      440,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,   73,  466,  466,  466,
       82,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  141,  142,  143,  466,  466,
      466,  466,   55,  466,  466,   78,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,   92,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,   63,  466,  466,
      466,  466,  466,  466,  466,  466,   64,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  436,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,    0,
        0,  467,    0,    0,    0,    0,    0,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  299,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  306,  466,   68,  466,  466,  466,  466,   69,   70,
      466,  466,  445,  466,  466,   75,  466,  466,  466,  466,
      466,   65,  466,  466,  466,  466,  466,  466,  466,  466,
      466,    0,  425,  466,  466,  466,  466,  294,  466,  466,
      466,  466,   52,  466,  466,  466,  466,  463,  466,   76,
      466,  442,  466,  466,   83,  466,  466,  443,  466,  302,
       87,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  100,  466,  303,  466,

      103,  466,  466,  466,  466,  283,   90,  466,  466,  466,
      305,  428,  466,   96,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  462,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,   66,  466,  466,   72,
      466,  466,  466,  466,  466,  466,  466,  466,  466,   67,
      466,  466,  419,   51,  466,  466,  466,  466,  466,  466,
      466,  435,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,   88,  437,  466,  466,  466,  466,
      466,  466,  466,  466,  466,    0,    0,    0,    0,    0,

        0,  466,  466,  466,  466,  466,  466,  293,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  444,  466,  466,   71,
      466,  466,  466,  466,  466,   89,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  449,  466,  466,
      466,    0,  466,  466,  466,  466,  414,  466,  466,  466,
      466,  466,  466,  466,    0,  466,  466,   77,  466,  466,
      466,  466,  446,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  448,  300,  466,  466,  466,    0,  466,

       74,  466,  466,  466,  466,  466,  466,  466,   79,  466,
      466,  438,  466,  466,  466,  466,  466,  466,  466,  330,
      466,  296,  466,  466,  466,   86,  466,  466,  466,  466,
      466,  466,  466,  140,  139,  466,    0,  466,  466,  466,
      466,  288,  466,  466,  466,  358,  466,   94,  466,  466,
      433,  466,  466,  466,  466,  466,  466,  466,  466,    0,
      466,  466,  466,  466,  466,  133,  466,  466,  466,  415,
      298,  466,  466,  466,  466,  466,  466,   53,  466,  367,
      368,  301,  466,  369,  370,  466,  371,  372,    0,    0,
        0,    0,    0,    0,  466,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      392,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  418,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
       81,  466,  466,  466,    0,  439,  466,  466,  466,  466,
      466,  466,  420,  466,  466,    0,  466,    0,  466,  426,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,   35,  466,  466,  466,  466,  466,   32,  466,   34,
      466,  466,  466,  466,  466,  447,  323,    0,    0,  466,
      466,  466,  357,  466,  466,  466,  466,  466,  391,  466,

      466,  429,  386,  466,  466,  466,  466,  329,  190,  295,
      466,  466,  466,  466,  466,   84,  466,  466,  466,  466,
      466,    0,  466,  466,  466,  466,  466,  287,  466,  297,
      383,  466,  410,  466,  209,  210,  466,  466,  466,  466,
      466,  466,    0,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
        0,    0,    0,    0,    0,    0,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  407,  466,  466,  466,  466,  406,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  176,  466,  466,

      466,  466,  136,  466,  211,  466,  466,  466,  466,  105,
      466,  421,  466,    0,    0,  285,  466,  411,  466,  466,
       97,  466,  466,    0,  466,    0,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,   37,  466,  466,  466,  466,  466,  466,  466,  466,
      466,    0,    0,   93,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  134,  466,  466,
      466,  466,  466,  466,   91,  466,   95,  466,  466,    0,
      466,  108,  466,  466,  466,  466,  466,    0,  466,  466,
      326,  466,  466,  466,  281,  466,    0,  466,  466,  466,

      466,  466,  466,  405,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,    0,    0,    0,    0,    0,
        0,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      346,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      304,  466,  466,  282,  466,  466,  466,   58,  466,  466,
      466,  466,  466,  466,    0,    0,  466,    0,  466,  466,
      466,   98,  328,  466,    0,  356,    0,  212,  466,  466,
      466,  466,  213,    0,    0,   59,  466,  466,  466,  466,
      466,  466,   38,   33,  466,   39,   36,  466,  466,  466,

      466,  466,    0,    0,  466,  466,   99,  337,  466,  466,
      466,  466,  466,  466,  404,  466,  466,    0,  466,  193,
      466,  138,  146,  466,  466,  441,    0,  466,    0,  466,
      466,  466,  466,   85,  466,    0,  466,  466,  466,  466,
      466,  466,  466,  466,    0,  466,  466,  466,  466,  466,
      284,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,    0,    0,    0,    0,    0,  466,  466,  466,
      466,  466,  466,  315,  316,  317,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      381,  331,  466,  466,  466,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  156,  466,    0,    0,
      466,    0,  465,  466,  466,  466,  355,    0,  466,  332,
      466,  466,    0,  427,  466,  466,  466,  466,  466,  466,
      466,  466,   42,  466,  466,  466,  466,  466,  466,    0,
        0,  339,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,    0,  466,  466,  466,
      466,  466,    0,  466,    0,  466,  466,  466,  466,  466,
        0,  157,  466,  466,  466,  466,  466,  466,  165,    0,
      466,  416,  396,  466,  412,  286,  466,    0,  466,  466,
      466,  466,  466,  466,  466,  466,  466,    0,    0,    0,

        0,  114,  466,  347,  348,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  402,
      466,  466,  466,  466,  466,  466,  151,  150,  466,  466,
      466,  106,  466,  466,  466,  466,  466,  466,    0,    0,
      466,    0,  466,  466,  466,    0,  378,  333,  334,  335,
      336,  466,  466,    0,  466,  466,  466,  466,  466,  466,
      466,  466,   40,  466,  466,  466,  466,  466,    0,  111,
      338,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      374,  466,  466,  466,  466,    0,  466,  466,  466,  403,
      466,    0,  466,    0,  466,  466,  466,  466,  327,    0,

      466,  466,  466,  466,  466,  466,  466,    0,  466,  466,
      149,  466,  466,  466,    0,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  116,  117,
        0,    0,    0,    0,  466,  466,  466,  466,  466,   49,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,    0,    0,
      466,    0,  466,  466,  466,    0,  466,  466,    0,  466,
      466,  466,  466,  466,  466,  466,   41,  466,  466,  466,
      466,  466,    0,  466,  161,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  321,  466,
        0,  466,  466,  466,  466,    0,  466,  112,  466,  325,
      379,  466,    0,  466,  466,  466,  466,  466,  466,  466,
        0,  466,  291,  292,  466,  466,  466,    0,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,    0,    0,    0,    0,    0,    0,    0,  115,    0,
        0,   45,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  194,  466,  466,  466,
      466,  466,  466,  466,  126,  466,  466,  280,  466,    0,
      466,  466,  466,  466,    0,    0,  466,    0,  466,  373,

      308,    0,  466,  466,    0,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  109,  152,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,    0,  466,  466,  466,  466,    0,
      178,  175,  360,  466,    0,  466,  466,  466,  466,  466,
      466,  466,  466,  102,  466,  466,  466,  466,    0,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,    0,    0,  118,    0,    0,    0,    0,    0,
        0,  123,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,    0,

      466,  466,  466,  466,  466,  466,  466,  466,    0,  466,
      147,  466,  466,    0,    0,  466,    0,  466,    0,  466,
      466,    0,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,    0,
      466,  199,  466,  466,    0,  466,  466,  148,    0,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,    0,  466,  377,  466,  398,  466,  466,  466,  466,
      466,  466,  466,  466,  466,    0,    0,    0,    0,    0,
        0,    0,    0,  122,  466,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  394,
      466,    0,  466,  466,  466,  466,  466,  466,  466,  466,
      466,    0,  466,  466,  466,  466,  466,    0,    0,  466,
        0,  466,   57,  160,  324,  104,  466,  466,  466,  466,
      466,  466,   31,  466,  154,  155,  466,  466,  466,  466,
      278,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,    0,  466,  466,  466,  466,  113,  466,
      466,  466,  466,  265,  466,  466,  466,  269,  466,  466,
      466,  466,  466,  466,  466,  466,  242,  466,  229,  466,
      466,  466,  466,  233,  466,  466,  466,  466,  466,  466,

      466,    0,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,    0,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  247,    0,  124,    0,    0,
        0,    0,    0,    0,  466,  466,  466,  466,  466,  451,
      466,  466,  389,  466,   48,  466,   43,  466,  466,  466,
        0,  466,  466,  466,  466,  466,  466,  466,  466,  466,
        0,  466,  466,  466,  466,  466,    0,    0,  466,  466,
      466,  466,    0,  195,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  390,  466,
      466,  466,  466,  417,  364,  466,  466,  466,    0,  466,

      466,  466,  466,  273,  262,  264,  466,  271,  276,  466,
      270,  466,  272,  274,  466,  267,  466,  237,  227,  226,
      466,  466,  235,  244,  466,  234,  466,  466,  236,  238,
      245,  466,  466,  466,  230,  466,  466,    0,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
        0,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      153,    0,    0,  131,  132,  129,    0,    0,  466,  466,
      395,  466,  466,  466,  466,  466,  466,  466,  466,  466,
        0,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      382,  466,  466,  466,  466,  466,  359,    0,  466,  466,

      466,  466,    0,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  158,
      466,  466,  466,  466,  466,  322,    0,  466,  466,  466,
      466,  261,  466,  466,  466,  466,  224,  466,  466,  225,
      466,  466,  239,  466,  466,  466,  466,    0,  351,  466,
      466,  466,  466,  466,  259,  466,  380,  466,  186,  187,
      188,    0,  466,  466,  466,  203,  466,  466,  466,  466,
      466,    0,    0,    0,    0,  353,  466,  466,  352,  466,
      466,  466,  466,  466,  466,  466,    0,  376,  466,  466,
      127,  466,  466,  466,  466,  466,  466,  257,  466,  375,

      466,    0,  466,  466,  466,  466,    0,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  400,  466,  399,  466,  466,  466,  466,  466,
        0,  466,  201,  200,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  246,  466,  466,  466,  202,  385,  466,
      466,  466,  466,  466,  466,  466,    0,  466,  466,  466,
      466,  466,  466,  466,  466,    0,    0,    0,  119,  466,
      466,  466,  466,   44,  466,  466,  466,  466,  101,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,    0,
      466,  466,  466,  466,  384,  466,  466,  466,  466,  466,

      466,  466,  216,  450,  466,  466,  466,  466,  397,  466,
      466,  466,  466,  466,  466,  466,    0,  466,  466,  466,
      466,  466,  263,  275,  466,  466,  466,  240,  466,  243,
      466,  466,  466,  466,  466,  466,  466,  413,  466,  466,
      466,  466,  466,  466,  466,  466,  120,  121,  130,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  177,  466,  466,  466,  466,  466,    0,  204,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  365,  466,  466,  466,
        0,  466,  466,  466,  268,  466,  466,  232,  231,  466,

      466,  466,  466,  466,  466,  466,  189,  466,  362,  466,
      466,  466,  466,  466,  466,  466,  408,  466,  163,  466,
      466,  466,  466,  466,  466,  466,  466,  255,  162,  466,
      409,  466,    0,  466,  466,  466,  307,  466,  466,  218,
      466,  466,  466,  466,  466,  466,  466,  466,  221,  466,
      401,  466,  466,  110,  466,  466,  219,  466,  466,  241,
      466,  466,  466,  466,  159,  466,  466,  198,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,    0,  466,  466,  466,
      466,  466,  466,  222,  217,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  208,  266,  228,  466,  466,  466,
      277,  466,  466,  466,  466,  466,  466,  466,  164,  466,
      466,  466,  466,  466,  466,  206,  205,  466,  466,  466,
      466,    0,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  366,  466,  466,  466,  466,  466,  248,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  363,  125,  466,  220,  361,  107,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  289,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  354,   47,   46,  466,  466,  128,  466,  466,  466,

      466,  197,  207,  214,  215,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      387,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  388,  466,
      466,  466,  466,  196,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  167,  393,  466,  466,
      466,  466,  166,  466,  466,  466,  466,  258,  260,  137,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  290,
      466,  466,  466,  169,  171,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  192,

      466,  466,  466,  466,  466,  191,  466,  466,  256,  466,
      466,  466,  466,  466,  466,  183,  185,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  179,  181,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  172,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  168,  466,  466,  466,  279,
      466,  466,  466,  466,  466,  466,  466,  466,  170,  173,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  184,  466,  466,  466,  466,  466,  466,
      180,  182,  135,  466,  466,  174,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   24,   25,   26,   27,    1,   28,   29,
       30,   31,    1,    1,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   48,   48,
       56,   57,   58,   59,   60,    1,   61,   62,   63,   64,

       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   87,   88,   89,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[90] =
    {   0,
        1,    2,    3,    1,    2,    1,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[3035] =
    {   0,
        0,    0,   88,   94,    0,    0, 3257, 3258,   98, 3258,
     3258, 3258,   85, 3250, 3225, 3258, 3258, 3258, 3224, 3223,
     3258, 3222,   85,   84,   96,  114,  132,  163,  190, 3258,
       94, 3221, 3220,    0,  110,   54,   88, 3188, 3179,   96,
     3187,  120,  158,  154, 3168,  141,  119, 3176, 3258, 3258,
     3214,  237,  155,  173,  200,  212,  202, 3182,  133,  173,
     3167,  230,  201,  243,  259,   63,  270, 3160,  110,  281,
      298,  295,  218,   96,  167,  132, 3180, 3258, 3258, 3258,
        0, 3258, 3258,  328, 3165,  193, 3258, 3235,    0, 3258,
     3258, 3258, 3258,  365,    0, 3258,  383,  401,  419,  432,

      459, 3162, 3161, 3160, 3258, 3258, 3258, 3258,    0, 3185,
     3152, 3154, 3170, 3165, 3163,    0,    0,    0, 3147, 3155,
     3166,  221,  152,   64,  238, 3146, 3155, 3150, 3158,    0,
        0,    0, 3177, 3137, 3141, 3143,    0, 3132, 3179,    0,
        0,    0, 3135, 3258,    0,    0,    0,    0,    0, 3145,
      162, 3149,  265, 3136, 3147, 3137, 3140, 3147,    0,    0,
        0,  290, 3133, 3141,  247, 3132, 3135, 3138,  281,  296,
     3129,  226,  235,  270,  221, 3127,    0, 3137,  308,  333,
      332, 3127, 3117,  360,  263,  327, 3122, 3118,  395, 3122,
     3125, 3121,    0, 3116,  425,  466, 3122,  329, 3114, 3129,

     3114, 3114, 3106, 3111,  311, 3115,  383,  193, 3109, 3118,
        0,    0,    0, 3112, 3107, 3096,  353, 3105,    0, 3097,
       67,   20, 3115, 3096,  396,  431, 3105,  441, 3098,    0,
        0,    0,  387, 3111,  449, 3106,  398, 3109, 3097, 3090,
      461, 3089, 3092,  273,  422, 3092,  451,  447, 3088, 3097,
      331,  424,    0,    0,    0,  453,  460, 3083, 3087,  465,
     3080, 3086, 3098, 3097, 3083, 3090, 3081,    0, 3090,    0,
        0,  523,  541,  550,  559, 3077, 3076, 3086, 3085, 3084,
     3098, 3079, 3067, 3065, 3065, 3070, 3062, 3078, 3092,    0,
        0,    0, 3058, 3072,    0,    0, 3056, 3061, 3072, 3064,

     3099,  527, 3058, 3064, 3057, 3081, 3059, 3052, 3060, 3045,
        0, 3048,    0, 3054, 3049,    0, 3041, 3045, 3044, 3044,
     3052, 3054, 3053,    0,    0,    0, 3050, 3040, 3048, 3034,
      472, 3041, 3028, 3028, 3027, 3029, 3035, 3023, 3037,  188,
      411, 3040, 3031, 3036, 3037, 3029, 3031, 3016, 3015, 3020,
     3027, 3029, 3030, 3026, 3027, 3007, 3014, 3006, 3004, 3018,
        0, 3007, 3018,  524, 3017, 3006, 3005, 3003, 3000,  461,
      518, 2995, 3009,  527, 2998, 3007, 2997, 2995, 3004, 3007,
     2989,  523, 2991, 2985, 2990,    0,    0,    0, 2987, 2993,
     2996, 2998,    0, 2994, 2994, 3037, 2982, 2981,  514, 2989,

      535, 2979, 2984, 2982,  446, 2976, 2984, 2968, 2982, 2973,
     2983, 2968, 2982, 2974, 2980, 2971, 2960, 2977,  479, 2962,
     2957, 2961, 2968, 2953, 2967, 2956, 2949,  523, 2969, 2959,
     2962, 2954, 2945, 2958, 2954, 2961,  521,  541, 2939, 2938,
     2939,  539, 2942, 2951,  549, 2950,  544, 2936, 2934, 2933,
     2938, 2948, 2945, 2944, 2929, 2933, 2945, 2926, 2939, 2927,
     2924, 2940,    0, 2926, 2918, 2929, 2922, 2934, 2932,  374,
     2922, 2914, 2924,  552, 2922, 2914,  554, 2917,  555, 2916,
      606,  615, 2923, 2922, 2920, 2919, 2918, 2946, 2913, 2915,
     2899, 2911, 2896, 2897, 2910, 2942, 2904, 2905, 2911,    0,

     2892, 2903, 2932, 2920, 2905, 2890, 2904, 2894, 2897, 2900,
     2900,    0, 2887,    0, 2880, 2896, 2887, 2875,    0, 2933,
     2893, 2883, 2891, 2872, 2877,    0, 2877, 2869, 2866,  582,
     2880,    0, 2875, 2864, 2874, 2872, 2866, 2878, 2875, 2875,
     2864, 2855,    0, 2865, 2859, 2861, 2858,    0, 2856, 2849,
     2848, 2862,    0, 2854, 2845, 2843, 2851, 2917, 2852,    0,
     2845,    0, 2841, 2853,    0, 2836, 2836, 2855, 2853,    0,
        0, 2844, 2833, 2830, 2845, 2840, 2841, 2838, 2841, 2841,
     2830, 2838, 2824, 2827, 2821, 2834, 2825, 2819, 2824, 2817,
     2814, 2832, 2818, 2818, 2826, 2828,  161, 2869,    0, 2818,

     2826, 2820, 2806, 2803, 2809,    0,    0, 2808, 2808, 2813,
        0,    0, 2803, 2798, 2815, 2810, 2793, 2801, 2812, 2799,
     2795, 2804, 2794, 2787, 2787, 2786, 2785, 2783, 2793,    0,
     2783, 2778, 2790, 2783,  583,  580, 2778, 2851, 2790, 2785,
     2793, 2787, 2773, 2778, 2777, 2776,    0, 2782, 2781,    0,
     2780, 2764, 2774, 2763, 2775, 2771, 2760, 2777, 2772,    0,
     2767, 2766,    0,    0, 2763,  613, 2755, 2763, 2752, 2746,
     2750,    0, 2767, 2766, 2742, 2758, 2759, 2762, 2759, 2746,
     2745, 2746, 2749, 2752,    0, 2756, 2731, 2740, 2739, 2740,
     2727, 2736, 2745, 2724, 2733, 2725, 2740, 2739, 2753, 2752,

     2768, 2755, 2734, 2724, 2728, 2711, 2726,    0, 2716, 2744,
     2731, 2713, 2756, 2728, 2719, 2738, 2717, 2707, 2710,  440,
     2711, 2713, 2718, 2706, 2714, 2709,    0, 2697, 2698,    0,
      618, 2701, 2701, 2688, 2711,    0, 2706,  586, 2707, 2695,
     2693, 2689, 2703, 2705, 2695, 2689, 2696,    0, 2677, 2681,
     2691,  101,  358,  408,  470,  468,    0,  491,  551,  548,
      583,  580,  577,  647,  574,  591,  578,    0,  597,  596,
      593,  585,    0,  602,  601,  603,  595,  608,  592,  598,
      611,  589,  596,  598,  614,  611,  600,  601,  616,  607,
      604,  611,  627,    0,    0,  627,  628,  612,  615,  618,

        0,  613,  630,  617,  627,  629,  618,  619,    0,  632,
      628,  643,  632,  627,  626,  635,  629,  630,  648,    0,
      638,  635,  640,  647,  636,    0,  646,  654,  655,  643,
      648,  645,  646,    0,    0,  664,  660,  667,  653,  646,
      651,  671,  667,  672,  669,    0,  657,    0,  676,  674,
        0,  664,  665,  661,  678,  668,  671,  670,  671,  679,
      669,  688,  675,  682,  683,    0,  690,  685,  686,    0,
        0,  694,  688,  679,  694,  691,  682,    0,  688,    0,
        0,    0,  702,    0,    0,  704,    0,    0,  701,  733,
      734,  700,  701,  692,  720,  687,  693,  711,  715,  712,

      717,  746,  707,  719,  706,  708,  718,  724,  706,  715,
        0,  718,  714,  724,  723,  720,  717,  715,  714,  714,
      721,  733,  729,  727,  733,  732,    0,  717,  724,  730,
      725,  745,  727,  727,  737,  743,  750,  733,  739,  747,
        0,  746,  751,  754,  813,  814,  756,  743,  759,  754,
      761,  745,    0,  753,  767,  764,  754,  769,  762,    0,
      766,  759,  759,  770,  767,  773,  773,  774,  768,  780,
      777,    0,  806,  775,  778,  781,  767,    0,  769,    0,
      768,  777,  775,  832,  774,    0,  795,  795,  796,  791,
      778,  795,    0,  800,  789,  790,  791,  800,    0,  800,

      807,  808,    0,  804,  805,  802,  787,    0,  830,    0,
      800,  795,  798,  812,  804,    0,  814,  801,  801,  817,
      809,  809,  819,  812,  822,  828,  816,    0,  810,    0,
        0,  811,  887,  828,  834,    0,  830,  816,  832,  824,
      832,  835,  832,  837,  829,  830,  840,  845,  836,  834,
      848,  838,  831,  847,  841,  835,  850,  841,  844,  840,
      855,  843,  844,  858,  859,  856,  866,  905,  869,  870,
      891,  872,  894,  891,  875,  856,  864,  873,  875,  894,
      880,    0,  863,  881,  894,  877,    0,  886,  886,  880,
      885,  876,  876,  873,  892,  894,  881,  896,  878,  878,

      878,  891,  901,  897,    0,  898,  892,  900,  899,    0,
      892,    0,  903,  906,  892,    0,  895,  967,  899,  914,
      915,  911,  914,  903,  913,  914,  901,  913,  920,  910,
      924,  906,  982,  986,  915,  930,  912,  921,  921,  917,
      913,    0,  931,  919,  936,  937,  934,  944,  945,  937,
      942,  928,  937,    0,  946,  937,  940,  948,  954,  955,
      952,  948,  939,  944,  948,  943,  949, 1018,  973,  965,
      941,  962,  949,  966,    0,  965,    0, 1026,  968,  955,
      973,    0,  966,  970,  962,  973,  970,  971,  962,  981,
        0,  974,  984,  985,    0,  967,  968,  970,  986,  989,

      993,  980,  983,    0,  991,  985,  993,  974, 1000, 1000,
      997,  984, 1004, 1000,  986, 1065,  999, 1000,  999, 1001,
     1011, 1024,  998,  997, 1029, 1036, 1007,  998, 1004, 1043,
     1037, 1019, 1016, 1030, 1031, 1055, 1019, 1018, 1034, 1049,
        0, 1034, 1018, 1026, 1035, 1034, 1036, 1027, 1025, 1065,
        0, 1045, 1038,    0, 1028, 1035, 1034,    0, 1037, 1052,
     1050, 1054, 1041, 1043, 1042, 1053, 1041, 1051, 1093, 1049,
     1057,    0,    0, 1046, 1059,    0, 1061,    0, 1055, 1043,
     1069, 1067,    0, 1058, 1130, 3258, 1053, 1076, 1065, 1057,
     1062, 1056,    0,    0, 1064,    0,    0, 1080, 1069, 1070,

     1083, 1075, 1068, 1069, 1086, 1073,    0,    0, 1087, 1091,
     1097, 1087, 1080, 1096,    0, 1094, 1099, 1101, 1102,    0,
     1091,    0, 1110, 1096, 1108,    0, 1108, 1154, 1113, 1114,
     1111, 1110, 1116,    0, 1108, 1108, 1104, 1104, 1124, 1112,
     1126, 1109, 1110, 1111, 1111, 1123, 1117, 1129, 1154, 1116,
        0, 1133, 1138, 1194, 1140, 1129, 1123, 1124, 1144, 1142,
     1146, 1129, 1145, 1146, 1138, 1139, 1141, 1173, 1150, 1147,
     1136, 1152, 1155,    0,    0,    0, 1152, 1184, 1141, 1147,
     1154, 1177, 1180, 1166, 1152, 1156, 1157, 1195, 1156, 1163,
        0,    0, 1173, 1174, 1163, 1156, 1152, 1176, 1158, 1172,

     1162, 1171, 1181, 1166, 1166, 1168,    0, 1183, 1175, 1186,
     1190, 1178, 3258, 1178, 1186, 1196, 3258, 1252, 1193, 1239,
     1185, 1184, 1190,    0, 1185, 1192, 1203, 1201, 1195, 1196,
     1203, 1210,    0, 1209, 1215, 1210, 1211, 1218, 1218, 1215,
     1216, 1203, 1214, 1223, 1205, 1205, 1207, 1219, 1208, 1221,
     1217, 1227, 1224, 1234, 1230, 1236, 1228, 1223, 1238, 1222,
     1237, 1242, 1228, 1285, 1240, 1226, 1239, 1236, 1228, 1245,
     1231, 1252, 1253, 1236, 1252, 1244, 1237, 1243,    0, 1244,
     1255,    0, 1261, 1238,    0,    0, 1260, 1244, 1252, 1261,
     1263, 1249, 1270, 1262, 1257, 1253, 1271, 1266, 1270, 1282,

     1283, 1301, 1301,    0,    0, 1277, 1274, 1270, 1281, 1307,
     1282, 1278, 1273, 1282, 1290, 1320, 1314, 1297, 1298,    0,
     1286, 1287, 1300, 1302, 1307, 1300,    0,    0, 1308, 1307,
     1291,    0, 1313, 1310, 1296, 1308, 1298, 1305, 1301, 1300,
     1315, 1303, 1320, 1313, 1317, 1314,    0,    0,    0,    0,
        0, 1327, 1320, 1310, 1319, 1318, 1332, 1329, 1326, 1322,
     1322, 1333,    0, 1331, 1334, 1335, 1334, 1324, 1326, 3258,
        0, 1325, 1330, 1342, 1335, 1331, 1337, 1339, 1339, 1348,
        0, 1348, 1351, 1337, 1338, 1339, 1341, 1341, 1357,    0,
     1341, 1347, 1407, 1348, 1353, 1349, 1367, 1361,    0, 1369,

     1355, 1373, 1373, 1360, 1379, 1362, 1375, 1364, 1364, 1424,
        0, 1371, 1375, 1368, 1371, 1375, 1382, 1389, 1371, 1385,
     1377, 1377, 1388, 1389, 1394, 1386, 1396, 1388, 1403, 1421,
     1433, 1434, 1416, 1403, 1433, 1404, 1409, 1407, 1408,    0,
     1408, 1426, 1396, 1416, 1397, 1439, 1437, 1438, 1440, 1440,
     1437, 1426, 1416, 1409, 1418, 1415, 1422, 1432, 1433, 1432,
     1438, 1434, 1426, 1496, 1424, 1428, 1426, 1425, 1426, 1444,
     1443, 1444, 1429, 1446, 1438, 1438, 1434, 1440, 1447, 1446,
     1452, 1445, 1459, 1457, 1462, 1449,    0, 1463, 1446, 1447,
     1466, 1448, 1455, 1445,    0, 1453, 1470, 1472, 1469, 1464,

     1471, 1454, 1472, 1461, 1460, 1466, 1462, 1475,    0, 1480,
     1470, 1487, 1479, 1483, 1475, 1488, 1529, 3258, 1475,    0,
        0, 1473, 1489, 1482, 1483, 1494, 1495, 1483, 1498, 1484,
     1480, 1506,    0,    0, 1493, 1507, 1504, 1509, 1507, 1500,
     1512, 1509, 1512, 1515, 1502, 1504, 1505, 1502, 1499, 1519,
     1516, 1519, 1534, 1521, 1542, 1543, 1549, 1525, 3258, 1519,
     1516,    0, 1527, 1516, 1522, 1517, 1531, 1517, 1534, 1521,
     1522, 1567, 1572, 1545, 1571, 1547,    0, 1543, 1546, 1545,
     1606, 1547, 1552, 1549, 1555, 1544, 1538,    0, 1553, 1539,
     1555, 1547, 1557, 1563, 1546, 1545, 1548, 1560, 1556,    0,

        0, 1565, 1561, 1557, 1557, 1573, 1565, 1575, 1558, 1577,
     1562, 1578, 1562, 1576, 1577, 1565, 1575, 3258,    0, 1584,
     1581, 1578, 1588, 1589, 1590, 1571, 1578, 1580, 1589, 1591,
     1591, 1595, 1585, 1581, 1588, 1600, 1587, 1598, 1595, 1600,
     1607, 1608,    0, 1590, 1592, 1611, 1599, 1592, 1600, 1602,
     1596, 1603, 1613, 3258, 1613, 1617, 1602, 1617, 1609, 1619,
     1620, 1614, 1615, 1628, 1625, 1610, 1626, 1627, 1627, 1629,
     1615, 1616, 1625, 1622, 3258, 1627, 1665, 1666, 1651, 1620,
     1643, 1653, 1632, 1646, 1643, 1649, 1636, 1639, 1648, 1648,
     1639, 1671, 1681, 1683, 1682, 1685, 1647, 1656, 1644, 1657,

     1658, 1661, 1647, 1654, 1656, 1664, 1650, 1671, 1667, 1654,
        0, 1660, 1672, 1675, 1670, 1680, 1663, 1661, 1678, 1669,
     1666, 1672, 1674, 1674, 1673, 1690, 1674, 1678, 1682, 1691,
     1676, 1677, 1694, 1696, 1680, 1683, 1688, 1684, 1691, 1686,
     1691, 1702, 1708, 1691, 1705, 1695, 1703, 1708, 1705, 1714,
     1700, 1717, 1700, 1715, 1701, 1749, 1804, 1722, 1722, 1703,
     1709, 1707, 1719, 1724, 1721, 1724, 1718, 1725, 1717, 1717,
     1726, 1720, 1740,    0, 1736,    0, 1729, 1734, 1726, 1732,
     1745, 1742, 1730, 1734, 1742, 1750, 1761, 1754, 1780, 1782,
     1785, 1776, 1745, 3258, 1761, 1753, 1754, 1778, 1765, 1766,

     1772, 1774, 1763, 1802, 1789, 1794, 1791, 1797, 1779,    0,
     1778, 1778, 1779, 1786, 1785, 1772, 1788, 1773, 1777, 1778,
     1775, 1779, 1781, 1794, 1787, 1794, 1801, 1797, 1793, 1810,
     1809, 1794, 3258,    0,    0, 3258, 1799, 1814, 1807, 1814,
     1828, 1822,    0, 1827,    0,    0, 1828, 1834, 1826, 1836,
        0, 1817, 1823, 1819, 1826, 1822, 1837, 1842, 1825, 1826,
     1832, 1828, 1843, 1846, 1834, 1844, 1848, 1854, 3258, 1896,
     1897, 1854, 1857, 1851, 1857, 1902, 1861,    0, 1861, 1864,
     1857, 1867, 1909, 1910, 1911, 1870,    0, 1860, 1865, 1871,
     1916, 1876, 1877,    0, 1877, 1921, 1874, 1875, 1875, 1885,

     1878, 1867, 1869, 1871, 1882, 1878, 1879, 1888, 1875, 1887,
     1885, 1893, 1890, 1941, 1892, 1900, 1903, 1889, 1884, 1891,
     1906, 1890, 1906, 1903, 1893,    0, 1893, 3258, 1894, 1924,
     1925, 1953, 1937, 1898, 1900, 1915, 1902, 1922, 1905,    0,
     1935, 1949,    0, 1942,    0, 1943,    0, 1944, 1916, 1926,
     1927, 1921, 1933, 1917, 1927, 1923, 1925, 1938, 1935, 1936,
     1922, 1943, 1924, 1931, 1934, 1946, 1934, 1935, 1936, 1932,
     1943, 1948, 1934, 1955, 1952, 1943, 1953, 1944, 1940, 1947,
     1948, 1949, 1961, 1950, 1951, 1962, 1964, 1964,    0, 1952,
     1960, 1958, 1954,    0,    0, 1972, 1976, 1958, 1973, 1967,

     1980, 1967, 1964,    0,    0,    0, 1963,    0,    0, 1984,
        0, 1972,    0,    0, 1983,    0, 1974,    0,    0,    0,
     1968, 1973,    0,    0, 1990,    0, 1988, 1979,    0,    0,
        0, 1984, 1979, 1990,    0, 1983, 1997, 1983, 1994, 1995,
     1992, 1996, 1984, 1999, 1998, 1993, 2003, 1989, 2007, 2051,
     2008, 1996, 1994, 2012, 1998, 2002, 1999, 2020, 2001, 2017,
        0, 2003, 2004, 3258, 3258, 3258, 2034, 2017, 2008, 2028,
        0, 2004, 2011, 2011, 2023, 2042, 2044, 2045, 2016, 2023,
     2026, 2034, 2028, 2032, 2039, 2023, 2028, 2025, 2032, 2044,
     3258, 2030, 2041, 2030, 2046, 2040, 3258, 2108, 2047, 2040,

     2042, 2039, 2043, 2099, 2039, 2054, 2043, 2059, 2055, 2045,
     2057, 2058, 2050, 2050, 2056, 2065, 2056, 2052, 2058,    0,
     2070, 2072, 2068, 2060, 2061,    0, 2067, 2056, 2074, 2080,
     2083,    0, 2067, 2084, 2066, 2087,    0, 2081, 2072,    0,
     2089, 2078,    0, 2093, 2074, 2094, 2075, 2080,    0, 2080,
     2086, 2101, 2102, 2089,    0, 2097,    0, 2100,    0,    0,
        0, 2092, 2099, 2095, 2089,    0, 2102, 2103, 2102, 2102,
     2101, 2107, 2108, 2144, 2116,    0, 2133, 2110,    0, 2114,
     2122, 2135, 2135, 2136, 2128, 2126, 2126,    0, 2126, 2129,
        0, 2133, 2129, 2130, 2129, 2117, 2137,    0, 2121,    0,

     2135, 2128, 2130, 2123, 2139, 2139, 2128, 2146, 2133, 2144,
     2138, 2151, 2133, 2132, 2139, 2136, 2142, 2143, 2143, 2144,
     2141, 2161,    0, 2150,    0, 2150, 2159, 2150, 2161, 2162,
     2163, 2160,    0,    0, 2165, 2151, 2167, 2169, 2154, 2151,
     2175, 2172, 2174,    0, 2176, 2179, 2157,    0, 3258, 2163,
     2176, 2166, 2166, 2181, 2187, 2229, 2169, 2187, 2182, 2180,
     2190, 2191, 2186, 2171, 2194, 2195, 2196, 2237, 3258, 2189,
     2187, 2197, 2199,    0, 2216, 2217, 2227, 2203, 3258, 2209,
     2199, 2209, 2208, 2209, 2194, 2200, 2196, 2202, 2218, 2214,
     2215, 2203, 2209, 2218, 3258, 2204, 2207, 2208, 2206, 2209,

     2208, 2218,    0,    0, 2224, 2225, 2214, 2214,    0, 2226,
     2215, 2232, 2219, 2225, 2227, 2240, 2228, 2229, 2244, 2236,
     2240, 2246,    0,    0, 2248, 2243, 2249,    0, 2251,    0,
     2243, 2253, 2253, 2246, 2237, 2238, 2297, 3258, 2248, 2240,
     2240, 2262, 2263, 2250, 2265, 2261, 3258, 3258, 3258, 2266,
     2250, 2263, 2252, 2299, 2300, 2259, 2274, 2254, 2276, 2276,
     2278,    0, 2271, 2262, 2272, 2270, 2262, 2264,    0, 2270,
     2285, 2284, 2275, 2280, 2270, 2272, 2272, 2275, 2273, 2295,
     2296, 2278, 2280, 2279, 2281, 2287,    0, 2283, 2298, 2301,
     2285, 2299, 2291, 2293,    0, 2309, 2307,    0,    0, 2308,

     2290, 2294, 2294, 2289, 2297, 2297,    0, 2318,    0, 2300,
     2312, 2313, 2317, 2307, 2324, 2305,    0, 2312,    0, 2347,
     2348, 2326, 2327, 2317, 2329, 2314, 2321,    0,    0, 2320,
        0, 2322, 2330, 2323, 2320, 2321,    0, 2316, 2334,    0,
     2326, 2340, 2327, 2329, 2330, 2348, 2335, 2346,    0, 2332,
        0, 2339, 2346, 3258, 2355, 2397,    0, 2354, 2355,    0,
     2354, 2340, 2352, 2357,    0, 2354, 2398,    0, 2364, 2365,
     2354, 2356, 2366, 2365, 2366, 2387, 2388, 2356, 2367, 2367,
     2359, 2377, 2374, 2379, 2381, 2373, 2368, 2375, 2376, 2374,
     2372, 2385, 2384,    0,    0, 2389, 2390, 2378, 2377, 2376,

     2376, 2376, 2388, 2391,    0,    0,    0, 2399, 2382, 2386,
        0, 2396, 2403, 2386, 2387, 2405, 2406, 2400,    0, 2390,
     2419, 2420, 2407, 2408, 2394,    0,    0, 2411, 2397, 2433,
     2398, 2415, 2417, 2418, 2397, 2409, 2423, 2406, 2406, 2407,
     2419, 2420, 2429,    0, 2412, 2418, 2428, 2415, 2430,    0,
     2430, 2417, 2434, 2435, 2420, 2422, 2437, 2424, 2454, 2455,
     2433, 2444,    0,    0, 2429,    0,    0, 3258, 2449, 2450,
     2451, 2432, 2441, 2435, 2450, 2451, 2438, 2455, 2439,    0,
     2453, 2447, 2442, 2449, 2450, 2450, 2461, 2462, 2459, 2449,
     2467,    0,    0,    0, 2466, 2461,    0, 2465, 2466, 2459,

     2475,    0,    0,    0,    0, 2462, 2478, 2470, 2480, 2476,
     2464, 2476, 2479, 2485, 2472, 2473, 2485, 2480, 2479, 2477,
        0, 2491, 2492, 2482, 2483, 2476, 2535, 2483, 2486, 2482,
     2496, 2482, 2484, 2543, 2496, 2497, 2507, 2505,    0, 2489,
     2492, 2493, 2511,    0, 2495, 2510, 2501, 2515, 2516, 2504,
     2511, 2501, 2556, 2508, 2509, 2516, 2525,    0, 2522, 2523,
     2509, 2514, 2530, 2512, 2508, 2521, 2527,    0,    0,    0,
     2528, 2529, 2536, 2555, 2534, 2535, 2521, 2526, 2560,    0,
     2535, 2536, 2526, 2547, 2548, 2531, 2559, 2548, 2538, 2539,
     2545, 2546, 2566, 2545, 2533, 2552, 2560, 2561, 2559,    0,

     2561, 2556, 2557, 2564, 2565,    0, 2548, 2565,    0, 2568,
     2569, 2568, 2569, 2561, 2562, 2577,    0, 2565, 2575, 2577,
     2578, 2568, 2571, 2577, 2578, 2585, 2587, 2588, 2584, 2585,
     2582, 2587, 2593, 2594, 2592, 2577, 2593, 2586, 2587, 2586,
     2583, 2601, 2602, 2601, 2585, 2597, 2602, 2603, 2602, 2609,
     2608, 2609, 2608, 2596, 2596, 2598, 2599, 2618, 2599, 2617,
     2618, 2610, 2622, 2608, 2624, 2625, 2626, 2623, 2624, 2625,
     2626, 2623, 2621, 2614, 2615, 2633, 2633, 2626, 2627, 2622,
     2627, 2641, 2638, 2639, 2642,    0, 2641, 2642, 2647,    0,
     2646, 2646, 2647, 2647, 2635, 2636, 2635, 2651,    0,    0,

     2645, 2657, 2658, 2655, 2648, 2657, 2643, 2644, 2661, 2661,
     2649, 2663, 2664,    0, 2656, 2670, 2668, 2669, 2654, 2655,
        0,    0,    0, 2671, 2673,    0, 3258, 2737, 2741, 2745,
     2746, 2750, 2754, 2758
    } ;

static yyconst flex_int16_t yy_def[3035] =
    {   0,
     3027,    1, 3028, 3028, 3029, 3029, 3027, 3027, 3027, 3027,
     3027, 3027, 3030, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027,
     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027, 3027,
     3032, 3027, 3027, 3027, 3027, 3030, 3027, 3030, 3033, 3027,
     3027, 3027, 3027, 3027, 3034, 3027, 3027, 3027, 3027, 3027,

     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3030, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3032, 3027, 3033,
     3034, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3027, 3027, 3027, 3027, 3027,

     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027,
     3027, 3027, 3027, 3027, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3027, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3027, 3027, 3027, 3027, 3027, 3027, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3027, 3027, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3027, 3031, 3027, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3027, 3027, 3027, 3027, 3027,
     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3027, 3027, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3027, 3031, 3027, 3031, 3031, 3031,
     3031, 3031, 3031, 3027, 3027, 3027, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3027, 3027, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3027, 3031,
     3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3027, 3027, 3027, 3027, 3027, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027,
     3031, 3027, 3027, 3031, 3031, 3031, 3027, 3027, 3031, 3031,
     3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027,
     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031,
     3031, 3031, 3027, 3031, 3027, 3031, 3031, 3031, 3031, 3031,
     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027, 3027,

     3027, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027,
     3031, 3027, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031,
     3031, 3027, 3031, 3027, 3031, 3031, 3031, 3031, 3031, 3027,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027,
     3027, 3027, 3027, 3027, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027,
     3031, 3027, 3031, 3031, 3031, 3027, 3031, 3031, 3027, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3027, 3031, 3031, 3031, 3031, 3027, 3031, 3027, 3031, 3031,
     3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027,
     3031, 3031, 3031, 3031, 3027, 3027, 3031, 3027, 3031, 3031,

     3031, 3027, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3027,
     3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3027, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031,
     3031, 3031, 3031, 3027, 3027, 3031, 3027, 3031, 3027, 3031,
     3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027,
     3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3027, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3031, 3031, 3031, 3031, 3031, 3027, 3027, 3031,
     3027, 3031, 3027, 3031, 3031, 3027, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3027, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3027, 3031, 3031, 3031, 3031, 3031, 3027, 3027, 3031, 3031,
     3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3027, 3031, 3031, 3031, 3031, 3031, 3027, 3027, 3031, 3031,

     3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3027, 3027, 3027, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3027, 3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3027, 3027, 3027, 3027, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027,
     3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3027, 3027, 3027, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3027, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3027, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,

     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031, 3031,
     3031, 3031, 3031, 3031, 3031, 3031,    0, 3027, 3027, 3027,
     3027, 3027, 3027, 3027
    } ;

static yyconst flex_int16_t yy_nxt[3348] =
    {   0,
        8,    9,   10,   11,    9,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   25,
       26,   27,   28,   25,   25,   29,   25,   30,   31,   32,
       33,   34,   34,   35,   34,   36,   37,   38,   39,   40,
       34,   41,   42,   43,   44,   34,   45,   34,   46,   34,
       34,   47,   34,   48,   34,   49,    8,   50,   51,   34,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   82,
       82,   87,   82,  415,   82,   82,   82,  416,   82,   84,

       82,   95,   84,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   97,   96,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  105,  106,  113,  125,  114,  219,  295,
       97,   99,  100,   98,   98,   98,   98,   98,  101,   98,
       98,   88,  296,  220,  413,  121,  414,  115,   97,   99,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  137,
       99,  110,  139,  260,  261,  799,   85,   99,  122,  123,
      111,  116,  117,  118,  228,  945,  102,  229,   99,   97,
      126,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      112,  265,  191,  230,  231,  232,   99,  192,   99,   87,

      266,  138,  140,  141,  142,  133,   97,  103,   98,   98,
       98,   98,   98,   98,   98,   98,   98,  127,  134,  162,
      293,  165,  128,  163,  309,   99,  262,   99,  135,  800,
      177,  294,  129,  166,  104,  263,  310,  167,  193,  164,
      168,  130,  131,  132,   87,  194,  195,  169,  540,   88,
      170,  196,  264,  402,   99,  145,  146,  147,  148,  149,
      171,  202,  185,  541,  172,  203,  325,  326,  173,  204,
      186,  403,  178,  187,  174,  205,  188,  175,  256,  189,
      179,  343,  257,  180,  176,  181,  258,  182,  183,  198,
      199,  337,  259,  200,   88,  184,  150,  338,  201,  151,

      152,  344,  206,  207,  290,  291,  292,  208,  153,  154,
      155,  209,  339,  340,  156,  157,  158,  210,  214,  215,
      159,  160,  161,  216,  358,  359,  211,  212,  213,   84,
      221,  312,   84,  217,  222,  341,  313,  223,  224,  218,
      314,  233,  342,  234,  225,  235,  448,  226,  236,  237,
      320,  449,  238,  330,  331,  239,  450,  240,  243,  332,
      241,  242,  244,  321,  333,  245,  246,  250,  251,  322,
      334,  395,  247,  252,  347,  248,  335,  396,  253,  254,
      255,  348,  249,   94,   94,   94,   94,   94,   94,   94,
       94,   94,  352,  349,  461,  353,   85,  350,  360,  462,

       99,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      361,  351,  386,  387,  388,  542,  409,   97,  273,   98,
       98,   98,   98,   98,   98,   98,   98,   98,  356,   99,
      410,  946,  274,  682,  274,  357,   99,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  683,  273,   97,  398,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  364,
      430,  399,  400,  365,  419,   99,  401,   99,  431,  366,
      437,  438,  947,  420,  912,   97,  276,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  451,  371,  463,  543,
      452,  913,  464,  372,   99,  421,   99,  374,  375,  422,

      376,  377,  378,  277,  373,  423,  425,  456,  379,  380,
      609,  433,  381,  426,  610,  457,  382,  427,  383,  428,
      434,  442,  454,   99,  465,  443,  435,  458,  455,  444,
      466,  467,  572,  471,  948,  573,  949,  468,  445,  472,
      384,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      529,  530,  624,  531,  481,  950,  481,  625,  273,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  504,  273,  565,  574,
      578,  587,  601,  602,  604,  575,  644,  588,  634,  505,

      566,  645,  635,  605,  579,  651,  506,  646,  647,  656,
      659,  660,  687,  657,  691,  694,  652,  860,  653,  951,
      688,  952,  692,  695,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  739,  832,  922,  834,  930,  953,  954,  955,
      740,  956,  958,  959,  931,  960,  961,  833,  835,  741,
      962,  963,  964,  932,  965,  966,  967,  968,  969,  970,
      971,  972,  861,  973,  974,  975,  976,  977,  978,  979,
      980,  923,  924,  981,  982,  983,  984,  985,  986,  987,
      988,  990,  991,  992,  993,  994,  989,  995,  996,  997,

      998,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
      957, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
     1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
     1037, 1038, 1039, 1041, 1042, 1040, 1043, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
     1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
     1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
     1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
     1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,

     1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
     1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
     1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
     1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
     1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
     1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
     1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
     1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,

     1197, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
     1208, 1209, 1210, 1211, 1212, 1213, 1199, 1214, 1215, 1216,
     1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
     1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
     1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
     1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
     1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
     1267, 1268, 1269, 1270, 1271, 1273, 1274, 1275, 1276, 1277,
     1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1287, 1288,
     1285, 1289, 1286, 1272, 1290, 1291, 1292, 1293, 1294, 1295,

     1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
     1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
     1316, 1317, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
     1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
     1337, 1338, 1341, 1342, 1343, 1344, 1345, 1346, 1339, 1340,
     1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1359, 1360, 1361, 1362, 1285, 1363, 1364, 1285,
     1365, 1286, 1366, 1367, 1368, 1369, 1370, 1319, 1371, 1372,
     1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
     1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,

     1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
     1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
     1423, 1285, 1424, 1430, 1285, 1431, 1286, 1425, 1426, 1432,
     1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1427, 1441,
     1442, 1443, 1449, 1444, 1428, 1445, 1451, 1429, 1452, 1453,
     1446, 1454, 1455, 1456, 1457, 1447, 1448, 1458, 1459, 1460,
     1450, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
     1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
     1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1490,

     1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
     1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
     1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
     1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530,
     1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
     1541, 1542, 1543, 1489, 1544, 1545, 1546, 1547, 1548, 1549,
     1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
     1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569,
     1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
     1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,

     1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
     1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
     1610, 1611, 1612, 1615, 1613, 1616, 1617, 1619, 1620, 1621,
     1622, 1626, 1623, 1624, 1627, 1628, 1629, 1625, 1614, 1618,
     1630, 1631, 1632, 1633, 1635, 1636, 1637, 1638, 1639, 1640,
     1641, 1642, 1643, 1644, 1645, 1646, 1651, 1652, 1653, 1654,
     1634, 1655, 1647, 1648, 1649, 1656, 1657, 1658, 1659, 1650,
     1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
     1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
     1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,

     1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
     1700, 1701, 1702, 1703, 1704, 1709, 1710, 1711, 1712, 1705,
     1713, 1714, 1715, 1706, 1716, 1717, 1718, 1719, 1720, 1707,
     1708, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
     1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
     1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
     1750, 1751, 1752, 1753, 1755, 1756, 1759, 1760, 1762, 1763,
     1764, 1765, 1766, 1767, 1768, 1769, 1770, 1757, 1758, 1771,
     1754, 1772, 1773, 1761, 1774, 1775, 1776, 1777, 1778, 1779,
     1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,

     1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
     1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
     1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
     1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
     1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
     1840, 1841, 1843, 1844, 1842, 1845, 1846, 1847, 1849, 1850,
     1848, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
     1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
     1870, 1871, 1872, 1873, 1875, 1876, 1877, 1878, 1879, 1880,
     1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1874,

     1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
     1900, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
     1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
     1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
     1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
     1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
     1951, 1952, 1953, 1954, 1955, 1901, 1956, 1957, 1958, 1959,
     1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
     1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
     1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,

     1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
     2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
     2010, 2011, 2012, 2013, 2015, 2016, 2017, 2018, 2019, 2020,
     2021, 2022, 2023, 2024, 2025, 2028, 2014, 2026, 2029, 2030,
     2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
     2027, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
     2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
     2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
     2070, 2101, 2102, 2103, 2104, 2105, 2071, 2106, 2107, 2108,
     2109, 2110, 2072, 2111, 2112, 2073, 2113, 2114, 2115, 2116,

     2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
     2127, 2074, 2128, 2075, 2129, 2130, 2076, 2131, 2132, 2133,
     2077, 2078, 2079, 2134, 2080, 2135, 2136, 2137, 2138, 2139,
     2140, 2141, 2081, 2142, 2082, 2083, 2143, 2144, 2145, 2146,
     2147, 2084, 2148, 2149, 2150, 2085, 2151, 2152, 2153, 2154,
     2086, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2087, 2162,
     2163, 2164, 2165, 2166, 2088, 2167, 2089, 2168, 2090, 2173,
     2169, 2091, 2174, 2175, 2092, 2093, 2094, 2095, 2170, 2096,
     2171, 2097, 2176, 2098, 2177, 2172, 2178, 2099, 2179, 2100,
     2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189,

     2190, 2191, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200,
     2192, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2210,
     2211, 2212, 2213, 2215, 2214, 2216, 2217, 2218, 2219, 2220,
     2221, 2222, 2223, 2225, 2226, 2227, 2209, 2228, 2229, 2231,
     2230, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241,
     2224, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250,
     2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260,
     2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270,
     2232, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279,
     2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289,

     2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299,
     2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309,
     2310, 2311, 2312, 2313, 2315, 2316, 2317, 2318, 2319, 2314,
     2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329,
     2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339,
     2340, 2341, 2342, 2344, 2345, 2346, 2347, 2348, 2349, 2350,
     2351, 2343, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359,
     2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369,
     2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379,
     2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389,

     2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399,
     2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2411,
     2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421,
     2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431,
     2432, 2433, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442,
     2443, 2444, 2445, 2446, 2447, 2434, 2448, 2449, 2450, 2451,
     2452, 2453, 2454, 2455, 2456, 2457, 2409, 2458, 2459, 2460,
     2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470,
     2410, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479,
     2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489,

     2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499,
     2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509,
     2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519,
     2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529,
     2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539,
     2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549,
     2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559,
     2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569,
     2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579,
     2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589,

     2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599,
     2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609,
     2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619,
     2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629,
     2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639,
     2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649,
     2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659,
     2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669,
     2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679,
     2680, 2681, 2683, 2684, 2685, 2686, 2682, 2687, 2688, 2689,

     2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699,
     2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709,
     2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719,
     2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729,
     2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739,
     2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749,
     2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759,
     2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769,
     2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779,
     2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789,

     2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799,
     2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809,
     2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819,
     2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829,
     2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839,
     2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849,
     2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859,
     2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869,
     2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879,
     2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2889, 2890,

     2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900,
     2901, 2902, 2903, 2904, 2905, 2888, 2906, 2907, 2908, 2909,
     2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919,
     2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929,
     2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939,
     2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949,
     2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959,
     2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969,
     2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979,
     2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989,

     2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999,
     3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009,
     3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019,
     3020, 3021, 3022, 3023, 3024, 3025, 3026,   81,   81,   81,
       81,   83,   83,   83,   83,   86,   86,   86,   86,  109,
      268,  944,  943,  268,  270,  270,  942,  270,  271,  271,
      941,  271,  940,  939,  938,  937,  936,  935,  934,  933,
      929,  928,  927,  926,  925,  921,  920,  919,  918,  917,
      916,  915,  914,  911,  910,  909,  908,  907,  906,  905,
      904,  903,  902,  901,  900,  899,  898,  897,  896,  895,

      894,  893,  892,  891,  890,  889,  888,  887,  886,  885,
      884,  883,  882,  881,  880,  879,  878,  877,  876,  875,
      874,  873,  872,  871,  870,  869,  868,  867,  866,  865,
      864,  863,  862,  859,  858,  857,  856,  855,  854,  853,
      852,  851,  850,  849,  848,  847,  846,  845,  844,  843,
      842,  841,  840,  839,  838,  837,  836,  831,  830,  829,
      828,  827,  826,  825,  824,  823,  822,  821,  820,  819,
      818,  817,  816,  815,  814,  813,  812,  811,  810,  809,
      808,  807,  806,  805,  804,  803,  802,  801,  798,  797,
      796,  795,  794,  793,  792,  791,  790,  789,  788,  787,

      786,  785,  784,  783,  782,  781,  780,  779,  778,  777,
      776,  775,  774,  773,  772,  771,  770,  769,  768,  767,
      766,  765,  764,  763,  762,  761,  760,  759,  758,  757,
      756,  755,  754,  753,  752,  751,  750,  749,  748,  747,
      746,  745,  744,  743,  742,  738,  737,  736,  735,  734,
      733,  732,  731,  730,  729,  728,  727,  726,  725,  724,
      723,  722,  721,  720,  719,  718,  717,  716,  715,  714,
      713,  712,  711,  710,  709,  708,  707,  706,  705,  704,
      703,  702,  701,  700,  699,  698,  697,  696,  693,  690,
      689,  686,  685,  684,  681,  680,  679,  678,  677,  676,

      675,  674,  673,  672,  671,  670,  669,  668,  667,  666,
      665,  664,  663,  662,  661,  658,  655,  654,  650,  649,
      648,  643,  642,  641,  640,  639,  638,  637,  636,  633,
      632,  631,  630,  629,  628,  627,  626,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      608,  607,  606,  603,  600,  599,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  586,  585,  584,  583,
      582,  581,  580,  577,  576,  571,  570,  569,  568,  567,
      564,  563,  562,  561,  560,  559,  558,  557,  556,  555,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,

      544,  539,  538,  537,  536,  535,  534,  533,  532,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  514,  513,  512,  511,  510,  509,  508,
      507,  503,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  480,  479,  478,  477,  476,  475,  474,  473,
      470,  469,  460,  459,  453,  447,  446,  441,  440,  439,
      436,  432,  429,  424,  418,  417,  412,  411,  408,  407,
      406,  405,  404,  397,  394,  393,  392,  391,  390,  389,
      385,  370,  369,  368,  367,  363,  362,  355,  354,  346,

      345,  336,  329,  328,  327,  324,  323,  319,  318,  317,
      316,  315,  311,  308,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278, 3027,  269,  267,
      227,  197,  190,  144,  143,  136,  124,  120,  119,  108,
      107,   93,   92,   91,   90,   89, 3027,    7, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,

     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027
    } ;

static yyconst flex_int16_t yy_chk[3348] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,   13,    3,  222,    3,    4,    4,  222,    4,    9,

        4,   24,    9,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   25,   24,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   31,   31,   36,   42,   36,   66,  124,
       26,   25,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   13,  124,   66,  221,   40,  221,   37,   27,   26,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   46,
       25,   35,   47,   74,   74,  597,    9,   27,   40,   40,
       35,   37,   37,   37,   69,  752,   27,   69,   26,   28,
       42,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       35,   76,   59,   69,   69,   69,   27,   59,   28,   86,

       76,   46,   47,   47,   47,   44,   29,   28,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   43,   44,   53,
      123,   54,   43,   53,  151,   29,   75,   28,   44,  597,
       56,  123,   43,   54,   29,   75,  151,   54,   60,   53,
       54,   43,   43,   43,  125,   60,   60,   54,  340,   86,
       54,   60,   75,  208,   29,   52,   52,   52,   52,   52,
       55,   63,   57,  340,   55,   63,  165,  165,   55,   63,
       57,  208,   56,   57,   55,   63,   57,   55,   73,   57,
       56,  175,   73,   56,   55,   56,   73,   56,   56,   62,
       62,  172,   73,   62,  125,   56,   52,  172,   62,   52,

       52,  175,   64,   64,  122,  122,  122,   64,   52,   52,
       52,   64,  173,  173,   52,   52,   52,   64,   65,   65,
       52,   52,   52,   65,  185,  185,   64,   64,   64,   84,
       67,  153,   84,   65,   67,  174,  153,   67,   67,   65,
      153,   70,  174,   70,   67,   70,  244,   67,   70,   70,
      162,  244,   70,  169,  169,   70,  244,   70,   71,  169,
       70,   70,   71,  162,  170,   71,   71,   72,   72,  162,
      170,  205,   71,   72,  179,   71,  170,  205,   72,   72,
       72,  179,   71,   94,   94,   94,   94,   94,   94,   94,
       94,   94,  181,  180,  251,  181,   84,  180,  186,  251,

       94,   97,   97,   97,   97,   97,   97,   97,   97,   97,
      186,  180,  198,  198,  198,  341,  217,   98,   97,   98,
       98,   98,   98,   98,   98,   98,   98,   98,  184,   94,
      217,  753,   99,  470,   99,  184,   98,   99,   99,   99,
       99,   99,   99,   99,   99,   99,  470,   97,  100,  207,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  189,
      233,  207,  207,  189,  225,   98,  207,  100,  233,  189,
      237,  237,  754,  225,  720,  101,  100,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  245,  195,  252,  341,
      245,  720,  252,  195,  101,  226,  100,  196,  196,  226,

      196,  196,  196,  101,  195,  226,  228,  248,  196,  196,
      405,  235,  196,  228,  405,  248,  196,  228,  196,  228,
      235,  241,  247,  101,  256,  241,  235,  248,  247,  241,
      256,  257,  370,  260,  755,  370,  756,  257,  241,  260,
      196,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      331,  331,  419,  331,  273,  758,  273,  419,  272,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  302,  272,  364,  371,
      374,  382,  399,  399,  401,  371,  437,  382,  428,  302,

      364,  437,  428,  401,  374,  442,  302,  438,  438,  445,
      447,  447,  474,  445,  477,  479,  442,  666,  442,  759,
      474,  760,  477,  479,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  530,  635,  731,  636,  738,  761,  762,  763,
      530,  764,  765,  766,  738,  767,  769,  635,  636,  530,
      770,  771,  772,  738,  774,  775,  776,  777,  778,  779,
      780,  781,  666,  782,  783,  784,  785,  786,  787,  788,
      789,  731,  731,  790,  791,  792,  793,  796,  797,  798,
      799,  800,  802,  803,  804,  805,  799,  806,  807,  808,

      810,  811,  812,  813,  814,  815,  816,  817,  817,  818,
      764,  819,  821,  822,  823,  824,  825,  827,  828,  829,
      830,  831,  832,  833,  836,  837,  838,  839,  840,  841,
      842,  843,  844,  845,  847,  849,  850,  852,  853,  854,
      855,  856,  857,  858,  859,  857,  860,  861,  862,  863,
      864,  865,  867,  868,  869,  872,  873,  874,  875,  876,
      877,  879,  883,  886,  889,  890,  891,  892,  893,  894,
      895,  896,  897,  898,  899,  900,  901,  902,  903,  904,
      905,  906,  907,  908,  909,  910,  912,  913,  914,  915,
      916,  917,  918,  919,  920,  921,  922,  923,  924,  925,

      926,  928,  929,  930,  931,  932,  933,  934,  935,  936,
      937,  938,  939,  940,  942,  943,  944,  945,  946,  947,
      948,  949,  950,  951,  952,  954,  955,  956,  957,  958,
      959,  961,  962,  963,  964,  965,  966,  967,  968,  969,
      970,  971,  973,  974,  975,  976,  977,  979,  981,  982,
      983,  984,  984,  985,  987,  988,  989,  990,  991,  992,
      994,  995,  996,  997,  998, 1000, 1001, 1002, 1004, 1005,
     1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1017, 1018,
     1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029,
     1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042,

     1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
     1053, 1054, 1055, 1056, 1057, 1058, 1044, 1059, 1060, 1061,
     1062, 1063, 1064, 1065, 1066, 1067, 1068, 1068, 1069, 1070,
     1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
     1081, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092,
     1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
     1103, 1104, 1106, 1107, 1108, 1109, 1111, 1113, 1114, 1115,
     1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
     1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
     1134, 1137, 1134, 1121, 1138, 1139, 1140, 1141, 1143, 1144,

     1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155,
     1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176,
     1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188,
     1189, 1190, 1192, 1193, 1194, 1196, 1197, 1198, 1190, 1190,
     1199, 1200, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209,
     1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1216,
     1219, 1216, 1220, 1221, 1222, 1223, 1224, 1168, 1225, 1226,
     1227, 1228, 1228, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
     1235, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245,

     1246, 1247, 1248, 1249, 1250, 1252, 1253, 1255, 1256, 1257,
     1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
     1269, 1270, 1271, 1274, 1275, 1277, 1279, 1280, 1281, 1282,
     1284, 1285, 1287, 1289, 1285, 1290, 1285, 1288, 1288, 1291,
     1292, 1295, 1298, 1299, 1300, 1301, 1302, 1303, 1288, 1304,
     1305, 1306, 1310, 1309, 1288, 1309, 1311, 1288, 1312, 1313,
     1309, 1314, 1316, 1317, 1318, 1309, 1309, 1319, 1321, 1323,
     1310, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
     1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
     1345, 1346, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1355,

     1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
     1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1377, 1378,
     1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
     1389, 1390, 1393, 1394, 1395, 1396, 1397, 1397, 1398, 1399,
     1400, 1401, 1402, 1403, 1404, 1405, 1406, 1408, 1409, 1410,
     1411, 1412, 1414, 1354, 1415, 1416, 1418, 1419, 1420, 1420,
     1420, 1420, 1421, 1422, 1423, 1425, 1426, 1427, 1428, 1429,
     1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
     1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
     1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,

     1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
     1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1480, 1481,
     1483, 1484, 1487, 1488, 1487, 1489, 1490, 1491, 1492, 1493,
     1494, 1495, 1494, 1494, 1496, 1497, 1498, 1494, 1487, 1490,
     1499, 1500, 1501, 1502, 1503, 1506, 1507, 1508, 1509, 1510,
     1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1521,
     1502, 1522, 1516, 1516, 1516, 1523, 1524, 1525, 1526, 1516,
     1529, 1530, 1531, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
     1540, 1541, 1542, 1543, 1544, 1545, 1546, 1552, 1553, 1554,
     1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1564, 1565,

     1566, 1567, 1568, 1569, 1572, 1573, 1574, 1575, 1576, 1577,
     1578, 1579, 1580, 1582, 1583, 1584, 1585, 1586, 1587, 1583,
     1588, 1589, 1591, 1583, 1592, 1593, 1594, 1595, 1596, 1583,
     1583, 1597, 1598, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
     1607, 1608, 1609, 1610, 1610, 1612, 1613, 1614, 1615, 1616,
     1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
     1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
     1637, 1638, 1639, 1641, 1642, 1643, 1644, 1632, 1632, 1645,
     1630, 1646, 1647, 1634, 1648, 1649, 1650, 1651, 1652, 1653,
     1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,

     1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
     1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
     1684, 1685, 1686, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
     1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
     1706, 1707, 1707, 1708, 1710, 1711, 1712, 1713, 1714, 1715,
     1716, 1717, 1719, 1722, 1717, 1723, 1724, 1725, 1726, 1727,
     1725, 1728, 1729, 1730, 1731, 1732, 1735, 1736, 1737, 1738,
     1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748,
     1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758,
     1760, 1761, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1752,

     1770, 1771, 1772, 1773, 1774, 1775, 1776, 1778, 1779, 1780,
     1781, 1782, 1783, 1784, 1785, 1786, 1787, 1789, 1790, 1791,
     1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1802, 1803,
     1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
     1814, 1815, 1816, 1817, 1820, 1821, 1822, 1823, 1824, 1825,
     1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
     1836, 1837, 1838, 1839, 1840, 1781, 1841, 1842, 1844, 1845,
     1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1855, 1856,
     1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
     1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1876, 1877,

     1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
     1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
     1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
     1908, 1909, 1910, 1912, 1913, 1914, 1901, 1913, 1915, 1916,
     1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
     1913, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
     1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
     1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
     1956, 1958, 1959, 1960, 1961, 1962, 1956, 1963, 1964, 1965,
     1966, 1967, 1956, 1968, 1969, 1956, 1970, 1971, 1972, 1973,

     1975, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
     1986, 1956, 1987, 1956, 1988, 1989, 1956, 1990, 1991, 1992,
     1956, 1956, 1956, 1993, 1956, 1995, 1996, 1997, 1998, 1999,
     2000, 2001, 1956, 2002, 1956, 1957, 2003, 2004, 2005, 2006,
     2007, 1957, 2008, 2009, 2011, 1957, 2012, 2013, 2014, 2015,
     1957, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 1957, 2023,
     2024, 2025, 2026, 2027, 1957, 2028, 1957, 2029, 1957, 2031,
     2030, 1957, 2032, 2037, 1957, 1957, 1957, 1957, 2030, 1957,
     2030, 1957, 2038, 1957, 2039, 2030, 2040, 1957, 2041, 1957,
     2042, 2044, 2047, 2048, 2049, 2050, 2052, 2053, 2054, 2055,

     2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
     2057, 2066, 2067, 2068, 2070, 2071, 2072, 2073, 2074, 2075,
     2076, 2077, 2079, 2080, 2079, 2081, 2082, 2083, 2084, 2085,
     2086, 2088, 2089, 2090, 2091, 2092, 2074, 2093, 2095, 2096,
     2095, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
     2089, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114,
     2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124,
     2125, 2127, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136,
     2096, 2137, 2138, 2139, 2141, 2142, 2144, 2146, 2148, 2149,
     2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159,

     2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169,
     2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179,
     2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2183,
     2190, 2191, 2192, 2193, 2196, 2197, 2198, 2199, 2200, 2201,
     2202, 2203, 2207, 2210, 2212, 2215, 2217, 2221, 2222, 2225,
     2227, 2228, 2232, 2233, 2234, 2236, 2237, 2238, 2239, 2240,
     2241, 2232, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249,
     2250, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258,
     2259, 2260, 2262, 2263, 2267, 2268, 2269, 2270, 2272, 2273,
     2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283,

     2284, 2285, 2286, 2287, 2288, 2289, 2290, 2292, 2293, 2294,
     2295, 2296, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305,
     2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315,
     2316, 2317, 2318, 2319, 2321, 2322, 2323, 2324, 2325, 2327,
     2328, 2329, 2330, 2331, 2333, 2334, 2335, 2336, 2338, 2339,
     2341, 2342, 2344, 2345, 2346, 2329, 2347, 2348, 2350, 2351,
     2352, 2353, 2354, 2356, 2358, 2362, 2304, 2363, 2364, 2365,
     2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2377,
     2304, 2378, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387,
     2389, 2390, 2392, 2393, 2394, 2395, 2396, 2397, 2399, 2401,

     2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411,
     2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421,
     2422, 2424, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2435,
     2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2445, 2446,
     2447, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458,
     2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468,
     2470, 2471, 2472, 2473, 2475, 2476, 2477, 2478, 2480, 2481,
     2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491,
     2492, 2493, 2494, 2496, 2497, 2498, 2499, 2500, 2501, 2502,
     2505, 2506, 2507, 2508, 2510, 2511, 2512, 2513, 2514, 2515,

     2516, 2517, 2518, 2519, 2520, 2521, 2522, 2525, 2526, 2527,
     2529, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2539, 2540,
     2541, 2542, 2543, 2544, 2545, 2546, 2550, 2551, 2552, 2553,
     2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2563, 2564,
     2565, 2566, 2567, 2568, 2570, 2571, 2572, 2573, 2574, 2575,
     2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585,
     2586, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2596, 2597,
     2600, 2601, 2602, 2603, 2604, 2605, 2606, 2608, 2610, 2611,
     2612, 2613, 2614, 2615, 2616, 2618, 2620, 2621, 2622, 2623,
     2624, 2625, 2626, 2627, 2630, 2632, 2625, 2633, 2634, 2635,

     2636, 2638, 2639, 2641, 2642, 2643, 2644, 2645, 2646, 2647,
     2648, 2650, 2652, 2653, 2655, 2656, 2658, 2659, 2661, 2662,
     2663, 2664, 2666, 2667, 2669, 2670, 2671, 2672, 2673, 2674,
     2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684,
     2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2696,
     2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2708, 2709,
     2710, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2720, 2721,
     2722, 2723, 2724, 2725, 2728, 2729, 2730, 2731, 2732, 2733,
     2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743,
     2745, 2746, 2747, 2748, 2749, 2751, 2752, 2753, 2754, 2755,

     2756, 2757, 2758, 2759, 2760, 2761, 2762, 2765, 2769, 2770,
     2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2781,
     2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791,
     2795, 2796, 2798, 2799, 2800, 2801, 2806, 2807, 2808, 2809,
     2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819,
     2820, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830,
     2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2840, 2841,
     2842, 2843, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852,
     2853, 2854, 2855, 2856, 2857, 2859, 2860, 2861, 2862, 2863,
     2864, 2865, 2866, 2867, 2871, 2872, 2873, 2874, 2875, 2876,

     2877, 2878, 2879, 2881, 2882, 2883, 2884, 2885, 2886, 2887,
     2888, 2889, 2890, 2891, 2892, 2874, 2893, 2894, 2895, 2896,
     2897, 2898, 2899, 2901, 2902, 2903, 2904, 2905, 2907, 2908,
     2910, 2911, 2912, 2913, 2914, 2915, 2916, 2918, 2919, 2920,
     2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930,
     2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940,
     2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950,
     2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960,
     2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970,
     2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980,

     2981, 2982, 2983, 2984, 2985, 2987, 2988, 2989, 2991, 2992,
     2993, 2994, 2995, 2996, 2997, 2998, 3001, 3002, 3003, 3004,
     3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3015,
     3016, 3017, 3018, 3019, 3020, 3024, 3025, 3028, 3028, 3028,
     3028, 3029, 3029, 3029, 3029, 3030, 3030, 3030, 3030, 3031,
     3032,  751,  750, 3032, 3033, 3033,  749, 3033, 3034, 3034,
      747, 3034,  746,  745,  744,  743,  742,  741,  740,  739,
      737,  735,  734,  733,  732,  729,  728,  726,  725,  724,
      723,  722,  721,  719,  718,  717,  716,  715,  714,  713,
      712,  711,  710,  709,  707,  706,  705,  704,  703,  702,

      701,  700,  699,  698,  697,  696,  695,  694,  693,  692,
      691,  690,  689,  688,  687,  686,  684,  683,  682,  681,
      680,  679,  678,  677,  676,  675,  674,  673,  671,  670,
      669,  668,  667,  665,  662,  661,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  649,  648,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  634,  633,  632,
      631,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  610,  609,
      608,  605,  604,  603,  602,  601,  600,  598,  596,  595,
      594,  593,  592,  591,  590,  589,  588,  587,  586,  585,

      584,  583,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  573,  572,  569,  568,  567,  566,  564,  563,  561,
      559,  558,  557,  556,  555,  554,  552,  551,  550,  549,
      547,  546,  545,  544,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  531,  529,  528,  527,  525,  524,
      523,  522,  521,  520,  518,  517,  516,  515,  513,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  480,  478,  476,
      475,  473,  472,  471,  469,  468,  467,  466,  465,  464,

      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  446,  444,  443,  441,  440,
      439,  436,  435,  434,  433,  432,  431,  430,  429,  427,
      426,  425,  424,  423,  422,  421,  420,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  407,  406,
      404,  403,  402,  400,  398,  397,  396,  395,  394,  392,
      391,  390,  389,  385,  384,  383,  381,  380,  379,  378,
      377,  376,  375,  373,  372,  369,  368,  367,  366,  365,
      363,  362,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,

      342,  339,  338,  337,  336,  335,  334,  333,  332,  330,
      329,  328,  327,  323,  322,  321,  320,  319,  318,  317,
      315,  314,  312,  310,  309,  308,  307,  306,  305,  304,
      303,  301,  300,  299,  298,  297,  294,  293,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  269,  267,  266,  265,  264,  263,  262,  261,
      259,  258,  250,  249,  246,  243,  242,  240,  239,  238,
      236,  234,  229,  227,  224,  223,  220,  218,  216,  215,
      214,  210,  209,  206,  204,  203,  202,  201,  200,  199,
      197,  194,  192,  191,  190,  188,  187,  183,  182,  178,

      176,  171,  168,  167,  166,  164,  163,  158,  157,  156,
      155,  154,  152,  150,  143,  139,  138,  136,  135,  134,
      133,  129,  128,  127,  126,  121,  120,  119,  115,  114,
      113,  112,  111,  110,  104,  103,  102,   88,   85,   77,
       68,   61,   58,   51,   48,   45,   41,   39,   38,   33,
       32,   22,   20,   19,   15,   14,    7, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,

     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027, 3027,
     3027, 3027, 3027, 3027, 3027, 3027, 3027
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[476] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "feiparser.l"
/* FEI Lexer! */
/* NOTE: To comment this file use C "standard comments"  BUT leave a space before the slash-star */


#line 9 "feiparser.l"
    #include <iostream>
    #include <fstream>
    #include <string>

    //Old C libraries are used in lexer....
    #include <cstdlib>
    #include <cstring>
    #include <csignal>
    #include <stdio.h>                         // Provides printf, etc.
    #include <string.h>
    #include <getopt.h>                        // For the command-line argument parser
    // =================================================================================
    // Please do not erase! Might make it into code someday.
    // #include <readline/readline.h>
    // #include <readline/history.h>
    // =================================================================================

    //Our FEI libraries
    #include "feiast.h"
    #include "dsl_actions.h"
    #include "siunit.h"
    #include "quantity.h"

    //From the parser generator
    #include "feiparser.tab.hh"

    //Boost for string to double conversion
    //#include <../boost/boost/lexical_cast.hpp>
    #include <boost/lexical_cast.hpp>


    int yycolumn = 1;
    #define YY_DECL int yylex(yy::feiparser::semantic_type *yylval,\
                              yy::feiparser::location_type *yylloc)
    //#define YY_USER_ACTION yylloc -> columns (yyleng);
    #define YY_USER_ACTION yylloc->end.line = yylineno; \
    yylloc->end.column = yycolumn+yyleng; \
    yycolumn += yyleng;

    // =================================================================================
    // Please do not erase! Might make it into code someday.
    // This is to replace STDIN with GNU Readline (Caution!!! GPL Licence).
    // #undef YY_INPUT
    // #define YY_INPUT(buf, result, max_size) (result = my_yyinput(buf, max_size))
    // =================================================================================

    //static int my_yyinput(char *buf, int max_size);
    //static char *st_readline_buffer;
    //static int  st_readline_used_len;

    //Simplify the usage of tokens...
    typedef yy::feiparser::token token;

    //Standard namespace
    using namespace std;

    //
    //FILE * ;

    struct bufstack
    {
        struct bufstack *prev;
        YY_BUFFER_STATE bs;
        int lineno;
        char* filename;
        FILE *f;
    } *curbs = 0;

    char* curfilename;

    int newfile(char* fn);
    int newstdin(void);
    int popfile(void);
    int error_behavior(void);
    void welcome_msg();
    void set_known_units();
    void set_variables(char* cstring);


    char initial[] = "STDIN";

    //Command line options flags
    int FLAG_interactive_mode    = 1;
    int FLAG_generate_cpp_output = 0;
    int FLAG_dry_run             = 0;
    int FLAG_execute_apis        = 1;
    int FLAG_inclusion_mode      = 0;
    int FLAG_run_file            = 0;
    int FLAG_binary_output       = 0;

    /* EXTERNS - All defined in feiparser.yy */
    extern const string thePrompt;
    extern string out_cpp_filename;
    extern string prompt;
    extern map<string,Quantity> global_variables;
    extern set<string> locked_global_variables;
    extern int recovery_mode;
    extern void set_model_name(char* cstring);
    extern void set_outcppfile_name(string newfilename);
    extern void wipe_model();
    extern void set_dry_run_mode(int);


/* float exponent */
#line 2352 "feiparser.lex.c"

#define INITIAL 0
#define IFILE 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 117 "feiparser.l"



    // start where previous token ended
    //yylloc -> step();


 /* ================================================================================================= */
 /* ========              BEGIN LEXER                                                       ========= */
 /* ================================================================================================= */
 
 /* The order in this file matters. Patterns which are higher up are matched first */
 
 /* single character ops are directly passed to the parser (more grammatical clarity) */
#line 2556 "feiparser.lex.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3028 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3258 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
#line 132 "feiparser.l"
case 2:
#line 133 "feiparser.l"
case 3:
#line 134 "feiparser.l"
case 4:
#line 135 "feiparser.l"
case 5:
#line 136 "feiparser.l"
case 6:
#line 137 "feiparser.l"
case 7:
#line 138 "feiparser.l"
case 8:
#line 139 "feiparser.l"
case 9:
#line 140 "feiparser.l"
case 10:
#line 141 "feiparser.l"
case 11:
#line 142 "feiparser.l"
case 12:
#line 143 "feiparser.l"
case 13:
#line 144 "feiparser.l"
case 14:
#line 145 "feiparser.l"
case 15:
YY_RULE_SETUP
#line 145 "feiparser.l"
{ return yytext[0]; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 147 "feiparser.l"
{
                                yylloc->begin.line = yylineno;
                                yylloc->begin.column = yycolumn;

                                return yytext[0];
                            }
	YY_BREAK
/* assign operate */
case 17:
YY_RULE_SETUP
#line 155 "feiparser.l"
{ return token::PLUSEQUAL; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 156 "feiparser.l"
{ return token::MINUSEQUAL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 157 "feiparser.l"
{ return token::TIMESEQUAL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "feiparser.l"
{ return token::DIVIDEEQUAL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 159 "feiparser.l"
{ return token::MODULUSEQUAL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 160 "feiparser.l"
{ return token::POWEQUAL; }
	YY_BREAK
/* comparison ops */
case 23:
YY_RULE_SETUP
#line 164 "feiparser.l"
{ yylval->fn = 1; return token::CMP; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 165 "feiparser.l"
{ yylval->fn = 2; return token::CMP; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 166 "feiparser.l"
{ yylval->fn = 3; return token::CMP; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 167 "feiparser.l"
{ yylval->fn = 4; return token::CMP; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 168 "feiparser.l"
{ yylval->fn = 5; return token::CMP; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 169 "feiparser.l"
{ yylval->fn = 6; return token::CMP; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 170 "feiparser.l"
{ yylval->fn = 7; return token::CMP; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 171 "feiparser.l"
{ yylval->fn = 8; return token::CMP; }
	YY_BREAK
/* test for units */
case 31:
#line 176 "feiparser.l"
case 32:
#line 177 "feiparser.l"
case 33:
#line 178 "feiparser.l"
case 34:
#line 179 "feiparser.l"
case 35:
#line 180 "feiparser.l"
case 36:
#line 181 "feiparser.l"
case 37:
#line 182 "feiparser.l"
case 38:
#line 183 "feiparser.l"
case 39:
#line 184 "feiparser.l"
case 40:
#line 185 "feiparser.l"
case 41:
#line 186 "feiparser.l"
case 42:
YY_RULE_SETUP
#line 186 "feiparser.l"
{yylval->ident = new string(yytext); return token::ISUNITTYPE;}
	YY_BREAK
/* Auto-variables (keywords)  */
case 43:
YY_RULE_SETUP
#line 189 "feiparser.l"
{return token::NUMBER_OF_NODES;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 190 "feiparser.l"
{return token::NUMBER_OF_ELEMENTS;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 191 "feiparser.l"
{return token::CURRENT_TIME;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 192 "feiparser.l"
{return token::NUMBER_OF_SP_CONSTRAINTS;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 193 "feiparser.l"
{return token::NUMBER_OF_MP_CONSTRAINTS;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 194 "feiparser.l"
{return token::NUMBER_OF_LOADS;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 195 "feiparser.l"
{return token::IS_PARALLEL;}
	YY_BREAK
/* Flow control keywords */
case 50:
YY_RULE_SETUP
#line 198 "feiparser.l"
{ return token::IF; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 199 "feiparser.l"
{ return token::THEN; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 200 "feiparser.l"
{ return token::ELSE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 201 "feiparser.l"
{ return token::WHILE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 202 "feiparser.l"
{ return token::DO; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 203 "feiparser.l"
{ return token::LET;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 204 "feiparser.l"
{ return token::IN; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 205 "feiparser.l"
{ return token::EXITSAFEMODE;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 206 "feiparser.l"
{ return token::CONTINUE;}
	YY_BREAK
/* Include statement is handled by the lexer */
case 59:
YY_RULE_SETUP
#line 209 "feiparser.l"
{BEGIN IFILE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 210 "feiparser.l"
{
                                {
                                    //This ignores anything up to the newline.
                                    int c;
                                    while((c=yyinput()) && c != '\n');
                                }
                                yylineno++;
                                if(newfile(yytext) == 0)
                                    yyterminate();  /*file not found*/
                                yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
                                prompt = "";
                                BEGIN INITIAL;
                                FLAG_inclusion_mode = 1;
                            }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 224 "feiparser.l"
{
                                cerr << curfilename << ":" << yylineno << ": bad include line." << endl;
                                yyterminate();
                            }
	YY_BREAK
/* built in functions */
case 62:
#line 232 "feiparser.l"
case 63:
#line 233 "feiparser.l"
case 64:
#line 234 "feiparser.l"
case 65:
#line 235 "feiparser.l"
case 66:
#line 236 "feiparser.l"
case 67:
#line 237 "feiparser.l"
case 68:
#line 238 "feiparser.l"
case 69:
#line 239 "feiparser.l"
case 70:
#line 240 "feiparser.l"
case 71:
#line 241 "feiparser.l"
case 72:
#line 242 "feiparser.l"
case 73:
#line 243 "feiparser.l"
case 74:
#line 244 "feiparser.l"
case 75:
#line 245 "feiparser.l"
case 76:
#line 246 "feiparser.l"
case 77:
#line 247 "feiparser.l"
case 78:
YY_RULE_SETUP
#line 247 "feiparser.l"
{ yylval->ident = new string(yytext); return token::FUNCTION; }
	YY_BREAK
/* ================================================================================================= */
/* ========              INITIAL COMMANDS (VERBS)                                          ========= */
/* ================================================================================================= */
case 79:
YY_RULE_SETUP
#line 254 "feiparser.l"
{return token::MODEL;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 255 "feiparser.l"
{return token::ADD;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 256 "feiparser.l"
{return token::DEFINE;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 257 "feiparser.l"
{return token::FIX;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 258 "feiparser.l"
{return token::FREE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 259 "feiparser.l"
{return token::REMOVE;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 260 "feiparser.l"
{return token::SIMULATE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 261 "feiparser.l"
{return token::CMD_print;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 262 "feiparser.l"
{return token::CMD_help;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 263 "feiparser.l"
{return token::CMD_whos;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 264 "feiparser.l"
{return token::CMD_check;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 265 "feiparser.l"
{return token::MESH;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 266 "feiparser.l"
{return token::REQUIRE;}
	YY_BREAK
/* New loading stage.... should change */
case 92:
YY_RULE_SETUP
#line 270 "feiparser.l"
{return token::NEW;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 271 "feiparser.l"
{return token::LOADING;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 272 "feiparser.l"
{return token::STAGE;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 273 "feiparser.l"
{return token::RESTART;}
	YY_BREAK
/* ================================================================================================= */
/* ========                     ADD                                                        ========= */
/* ================================================================================================= */
/* Things which can be added (nouns). May be several phrases */
case 96:
YY_RULE_SETUP
#line 280 "feiparser.l"
{return token::NODE;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 281 "feiparser.l"
{return token::ELEMENT;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 282 "feiparser.l"
{return token::ELEMENTS;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 283 "feiparser.l"
{return token::MATERIAL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 284 "feiparser.l"
{return token::LOAD;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 285 "feiparser.l"
{return token::ACCELERATION_FIELD;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 286 "feiparser.l"
{return token::TIMEHISTORY;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 287 "feiparser.l"
{return token::MASS;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 288 "feiparser.l"
{return token::IMPOSEDMOTION;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 289 "feiparser.l"
{return token::DAMPING;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 290 "feiparser.l"
{return token::CONSTRAINT;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 291 "feiparser.l"
{return token::DRM;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 292 "feiparser.l"
{return token::SECTION;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 293 "feiparser.l"
{return token::LOADPATTERN;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 294 "feiparser.l"
{return token::PENALTYDISPLACEMENT;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 295 "feiparser.l"
{return token::LOADVALUE;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 296 "feiparser.l"
{return token::SAVEFORCES;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 297 "feiparser.l"
{return token::RESTOREFORCES;}
	YY_BREAK
/* Element names */
case 114:
YY_RULE_SETUP
#line 300 "feiparser.l"
{return token::EightNodeBrick;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 301 "feiparser.l"
{return token::EightNodeBrickLT;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 302 "feiparser.l"
{return token::TwentyNodeBrick;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 303 "feiparser.l"
{return token::TwentySevenNodeBrick;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 304 "feiparser.l"
{return token::TwentySevenNodeBrickLT;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 305 "feiparser.l"
{return token::EightNodeBrickElastic;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 306 "feiparser.l"
{return token::TwentyNodeBrickElastic;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 307 "feiparser.l"
{return token::TwentySevenNodeBrickElastic;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 308 "feiparser.l"
{return token::EightNodeBrick_upU;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 309 "feiparser.l"
{return token::EightNodeBrick_up;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 310 "feiparser.l"
{return token::TwentyNodeBrick_uPU;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 311 "feiparser.l"
{return token::beam_displacement_based;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 312 "feiparser.l"
{return token::beam_elastic;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 313 "feiparser.l"
{return token::beam_9dof_elastic;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 314 "feiparser.l"
{return token::beam_elastic_lumped_mass;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 315 "feiparser.l"
{return token::FourNodeShellMITC4;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 316 "feiparser.l"
{return token::FourNodeShellNewMITC4;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 317 "feiparser.l"
{return token::ThreeNodeShellANDES;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 318 "feiparser.l"
{return token::FourNodeShellANDES;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 319 "feiparser.l"
{return token::truss;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 320 "feiparser.l"
{return token::penalty;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 321 "feiparser.l"
{return token::penalty_for_applying_generalized_displacement;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 322 "feiparser.l"
{return token::contact;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 323 "feiparser.l"
{return token::variable_node_brick_8_to_27;}
	YY_BREAK
/* Element options */
case 138:
YY_RULE_SETUP
#line 327 "feiparser.l"
{return token::porosity;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 328 "feiparser.l"
{return token::rho_s;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 329 "feiparser.l"
{return token::rho_f;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 330 "feiparser.l"
{return token::k_x;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 331 "feiparser.l"
{return token::k_y;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 332 "feiparser.l"
{return token::k_z;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 333 "feiparser.l"
{return token::K_s;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 334 "feiparser.l"
{return token::K_f;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 335 "feiparser.l"
{return token::pressure;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 336 "feiparser.l"
{return token::cross_section;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 337 "feiparser.l"
{return token::shear_modulus;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 338 "feiparser.l"
{return token::torsion_Jx;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 339 "feiparser.l"
{return token::bending_Iz;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 340 "feiparser.l"
{return token::bending_Iy;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 341 "feiparser.l"
{return token::mass_density;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 342 "feiparser.l"
{return token::xz_plane_vector;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 343 "feiparser.l"
{return token::joint_1_offset;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 344 "feiparser.l"
{return token::joint_2_offset;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 345 "feiparser.l"
{return token::direction;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 346 "feiparser.l"
{return token::stiffness;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 347 "feiparser.l"
{return token::normal_stiffness;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 348 "feiparser.l"
{return token::tangential_stiffness;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 349 "feiparser.l"
{return token::friction_ratio;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 350 "feiparser.l"
{return token::maximum_gap;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 351 "feiparser.l"
{return token::contact_plane_vector;}
	YY_BREAK
/* section types */
case 163:
YY_RULE_SETUP
#line 355 "feiparser.l"
{return token::MembranePlateFiber;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 356 "feiparser.l"
{return token::ElasticMembranePlate;}
	YY_BREAK
/* section options */
case 165:
YY_RULE_SETUP
#line 359 "feiparser.l"
{return token::thickness;}
	YY_BREAK
/* Material Names*/
case 166:
YY_RULE_SETUP
#line 362 "feiparser.l"
{return token::linear_elastic_isotropic_3d;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 363 "feiparser.l"
{return token::vonmises_perfectly_plastic;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 364 "feiparser.l"
{return token::vonmises_perfectly_plastic_accelerated;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 365 "feiparser.l"
{return token::vonmises_isotropic_hardening;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 366 "feiparser.l"
{return token::vonmises_isotropic_hardening_accelerated;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 367 "feiparser.l"
{return token::vonmises_kinematic_hardening;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 368 "feiparser.l"
{return token::vonmises_linear_kinematic_hardening;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 369 "feiparser.l"
{return token::vonmises_kinematic_hardening_accelerated;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 370 "feiparser.l"
{return token::vonmises_linear_kinematic_hardening_accelerated;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 371 "feiparser.l"
{return token::sanisand2008;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 372 "feiparser.l"
{return token::camclay;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 373 "feiparser.l"
{return token::camclay_accelerated;}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 374 "feiparser.l"
{return token::sanisand2004;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 375 "feiparser.l"
{return token::druckerprager_isotropic_hardening;}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 376 "feiparser.l"
{return token::druckerprager_isotropic_hardening_accelerated;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 377 "feiparser.l"
{return token::druckerprager_kinematic_hardening;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 378 "feiparser.l"
{return token::druckerprager_kinematic_hardening_accelerated;}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 379 "feiparser.l"
{return token::druckerprager_perfectly_plastic;}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 380 "feiparser.l"
{return token::druckerprager_perfectly_plastic_accelerated;}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 381 "feiparser.l"
{return token::linear_elastic_crossanisotropic;}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 382 "feiparser.l"
{return token::uniaxial_elastic_1d;}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 383 "feiparser.l"
{return token::uniaxial_steel01;}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 384 "feiparser.l"
{return token::uniaxial_steel02;}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 385 "feiparser.l"
{return token::uniaxial_concrete02;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 386 "feiparser.l"
{return token::pisano;}
	YY_BREAK
/* LTensor based materials */
case 191:
YY_RULE_SETUP
#line 389 "feiparser.l"
{return token::linear_elastic_isotropic_3d_LT;}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 390 "feiparser.l"
{return token::vonmises_perfectly_plastic_LT;}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 391 "feiparser.l"
{return token::pisanoLT;}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 392 "feiparser.l"
{return token::New_PisanoLT;}
	YY_BREAK
/* Material options */
case 195:
YY_RULE_SETUP
#line 396 "feiparser.l"
{return token::elastic_modulus;}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 397 "feiparser.l"
{return token::elastic_modulus_horizontal;}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 398 "feiparser.l"
{return token::elastic_modulus_vertical;}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 399 "feiparser.l"
{return token::viscoelastic_modulus;}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 400 "feiparser.l"
{return token::poisson_ratio;}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 401 "feiparser.l"
{return token::poisson_ratio_h_v;}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 402 "feiparser.l"
{return token::poisson_ratio_h_h;}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 403 "feiparser.l"
{return token::shear_modulus_h_v;}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 404 "feiparser.l"
{return token::von_mises_radius;}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 405 "feiparser.l"
{return token::druckerprager_angle;}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 406 "feiparser.l"
{return token::armstrong_frederick_ha;}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 407 "feiparser.l"
{return token::armstrong_frederick_cr;}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 408 "feiparser.l"
{return token::initial_confining_stress;}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 409 "feiparser.l"
{return token::pressure_reference_p0;}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 410 "feiparser.l"
{return token::strain;}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 411 "feiparser.l"
{return token::stress;}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 412 "feiparser.l"
{return token::control;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 414 "feiparser.l"
{
                                        yylval->value = new Quantity(0.0,unitless);
                                        return token::NUMBER;
                                    }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 418 "feiparser.l"
{
                                        yylval->value = new Quantity(1.0,unitless);
                                        return token::NUMBER;
                                    }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 422 "feiparser.l"
{return token::isotropic_hardening_rate;}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 423 "feiparser.l"
{return token::kinematic_hardening_rate;}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 424 "feiparser.l"
{return token::initial_void_ratio;}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 425 "feiparser.l"
{return token::initial_shear_modulus;}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 426 "feiparser.l"
{return token::initial_bulk_modulus;}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 427 "feiparser.l"
{return token::reference_void_ratio;}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 428 "feiparser.l"
{return token::critical_stress_ratio_M;}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 429 "feiparser.l"
{return token::minimum_bulk_modulus;}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 430 "feiparser.l"
{return token::initial_mean_pressure;}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 431 "feiparser.l"
{return token::e0;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 432 "feiparser.l"
{return token::sanisand2008_Pat;}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 433 "feiparser.l"
{return token::sanisand2008_k_c;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 434 "feiparser.l"
{return token::sanisand2008_K0;}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 435 "feiparser.l"
{return token::sanisand2008_G0;}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 436 "feiparser.l"
{return token::sanisand2008_alpha_cc;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 437 "feiparser.l"
{return token::sanisand2008_c;}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 438 "feiparser.l"
{return token::sanisand2008_xi;}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 439 "feiparser.l"
{return token::sanisand2008_lambda;}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 440 "feiparser.l"
{return token::sanisand2008_ec_ref;}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 441 "feiparser.l"
{return token::sanisand2008_m;}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 442 "feiparser.l"
{return token::sanisand2008_h0;}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 443 "feiparser.l"
{return token::sanisand2008_ch;}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 444 "feiparser.l"
{return token::sanisand2008_nb;}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 445 "feiparser.l"
{return token::sanisand2008_A0;}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 446 "feiparser.l"
{return token::sanisand2008_nd;}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 447 "feiparser.l"
{return token::sanisand2008_p_r;}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 448 "feiparser.l"
{return token::sanisand2008_rho_c;}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 449 "feiparser.l"
{return token::sanisand2008_theta_c;}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 450 "feiparser.l"
{return token::sanisand2008_X;}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 451 "feiparser.l"
{return token::sanisand2008_z_max;}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 452 "feiparser.l"
{return token::sanisand2008_cz;}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 453 "feiparser.l"
{return token::sanisand2008_p0;}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 454 "feiparser.l"
{return token::sanisand2008_p_in;}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 455 "feiparser.l"
{return token::yield_strength;}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 456 "feiparser.l"
{return token::strain_hardening_ratio;}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 457 "feiparser.l"
{return token::a2;}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 458 "feiparser.l"
{return token::a3;}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 459 "feiparser.l"
{return token::a4;}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 460 "feiparser.l"
{return token::R0;}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 461 "feiparser.l"
{return token::cR1;}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 462 "feiparser.l"
{return token::cR2;}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 463 "feiparser.l"
{return token::compressive_strength;}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 464 "feiparser.l"
{return token::strain_at_compressive_strength;}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 465 "feiparser.l"
{return token::crushing_strength;}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 466 "feiparser.l"
{return token::strain_at_crushing_strength;}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 467 "feiparser.l"
{return token::tensile_strength;}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 468 "feiparser.l"
{return token::tension_softening_stiffness;}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 469 "feiparser.l"
{return token::sanisand2004_Pat;}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 470 "feiparser.l"
{return token::sanisand2004_G0;}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 471 "feiparser.l"
{return token::sanisand2004_p_cut;}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 472 "feiparser.l"
{return token::sanisand2004_Mc;}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 473 "feiparser.l"
{return token::sanisand2004_c;}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 474 "feiparser.l"
{return token::sanisand2004_lambda_c;}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 475 "feiparser.l"
{return token::sanisand2004_xi;}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 476 "feiparser.l"
{return token::sanisand2004_ec_ref;}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 477 "feiparser.l"
{return token::sanisand2004_m;}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 478 "feiparser.l"
{return token::sanisand2004_h0;}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 479 "feiparser.l"
{return token::sanisand2004_ch;}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 480 "feiparser.l"
{return token::sanisand2004_nb;}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 481 "feiparser.l"
{return token::sanisand2004_A0;}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 482 "feiparser.l"
{return token::sanisand2004_nd;}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 483 "feiparser.l"
{return token::sanisand2004_z_max;}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 484 "feiparser.l"
{return token::sanisand2004_cz;}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 485 "feiparser.l"
{return token::strain_increment_size;}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 486 "feiparser.l"
{return token::maximum_strain;}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 487 "feiparser.l"
{return token::number_of_times_reaching_maximum_strain;}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 488 "feiparser.l"
{return token::constitutive;}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 489 "feiparser.l"
{return token::testing;}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 490 "feiparser.l"
{return token::constant;}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 491 "feiparser.l"
{return token::mean;}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 492 "feiparser.l"
{return token::triaxial;}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 493 "feiparser.l"
{return token::drained;}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 494 "feiparser.l"
{return token::undrained;}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 495 "feiparser.l"
{return token::simple;}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 496 "feiparser.l"
{return token::shear;}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 497 "feiparser.l"
{return token::number_of_subincrements;}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 498 "feiparser.l"
{return token::maximum_number_of_iterations;}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 499 "feiparser.l"
{return token::tolerance_1;}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 500 "feiparser.l"
{return token::tolerance_2;}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 501 "feiparser.l"
{return token::Gauss;}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 502 "feiparser.l"
{return token::each;}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 503 "feiparser.l"
{return token::points;}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 504 "feiparser.l"
{return token::point;}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 505 "feiparser.l"
{return token::single;}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 506 "feiparser.l"
{return token::value;}
	YY_BREAK
/* Pisano Model options  */
case 299:
YY_RULE_SETUP
#line 510 "feiparser.l"
{return token::M_in;}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 511 "feiparser.l"
{return token::kd_in;}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 512 "feiparser.l"
{return token::xi_in;}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 513 "feiparser.l"
{return token::h_in;}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 514 "feiparser.l"
{return token::m_in;}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 515 "feiparser.l"
{return token::beta_min;}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 516 "feiparser.l"
{return token::n_in;}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 517 "feiparser.l"
{return token::a_in;}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 518 "feiparser.l"
{return token::elastic_modulus_1atm;}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 519 "feiparser.l"
{return token::eplcum_cr_in;}
	YY_BREAK
/* Load options */
case 309:
#line 523 "feiparser.l"
case 310:
#line 524 "feiparser.l"
case 311:
#line 525 "feiparser.l"
case 312:
#line 526 "feiparser.l"
case 313:
#line 527 "feiparser.l"
case 314:
#line 528 "feiparser.l"
case 315:
#line 529 "feiparser.l"
case 316:
#line 530 "feiparser.l"
case 317:
YY_RULE_SETUP
#line 530 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::FORCE;
                                    }
	YY_BREAK
/* Acceleration field options*/
case 318:
YY_RULE_SETUP
#line 536 "feiparser.l"
{return token::ax;}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 537 "feiparser.l"
{return token::ay;}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 538 "feiparser.l"
{return token::az;}
	YY_BREAK
/* Time-History types */
case 321:
YY_RULE_SETUP
#line 541 "feiparser.l"
{return token::TH_PATH_SERIES;}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 542 "feiparser.l"
{return token::TH_PATH_TIME_SERIES;}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 543 "feiparser.l"
{return token::TH_LINEAR;}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 544 "feiparser.l"
{return token::TH_FROM_REACTIONS;}
	YY_BREAK
/* Element load types */
case 325:
YY_RULE_SETUP
#line 547 "feiparser.l"
{return token::self_weight;}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 548 "feiparser.l"
{return token::surface;}
	YY_BREAK
/* Time-History options */
case 327:
YY_RULE_SETUP
#line 551 "feiparser.l"
{return token::startTime;}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 552 "feiparser.l"
{return token::endTime;}
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 553 "feiparser.l"
{return token::Period;}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 554 "feiparser.l"
{return token::Phase;}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 555 "feiparser.l"
{return token::Amplitude;}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 556 "feiparser.l"
{return token::frequency;}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 557 "feiparser.l"
{return token::frequency1;}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 558 "feiparser.l"
{return token::frequency2;}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 559 "feiparser.l"
{return token::frequency3;}
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 560 "feiparser.l"
{return token::frequency4;}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 561 "feiparser.l"
{return token::MaxTime;}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 562 "feiparser.l"
{return token::MAGNITUDES;}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 563 "feiparser.l"
{return token::MAGNITUDE;}
	YY_BREAK
/* Mass options */
case 340:
YY_RULE_SETUP
#line 566 "feiparser.l"
{return token::mx;}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 567 "feiparser.l"
{return token::my;}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 568 "feiparser.l"
{return token::mz;}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 569 "feiparser.l"
{return token::Imx;}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 570 "feiparser.l"
{return token::Imy;}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 571 "feiparser.l"
{return token::Imz;}
	YY_BREAK
/* Damping model types */
case 346:
YY_RULE_SETUP
#line 574 "feiparser.l"
{return token::DAMPING_RAYLEIGH;}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 575 "feiparser.l"
{return token::DAMPING_CAUGHEY3;}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 576 "feiparser.l"
{return token::DAMPING_CAUGHEY4;}
	YY_BREAK
/* Damping model options */
case 349:
YY_RULE_SETUP
#line 579 "feiparser.l"
{return token::a0;}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 580 "feiparser.l"
{return token::a1;}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 581 "feiparser.l"
{return token::stiffness_to_use;}
	YY_BREAK
case 352:
#line 583 "feiparser.l"
case 353:
#line 584 "feiparser.l"
case 354:
YY_RULE_SETUP
#line 584 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::stiffness_to_use_opt;
                                    }
	YY_BREAK
/* Constraint types */
case 355:
YY_RULE_SETUP
#line 590 "feiparser.l"
{return token::equaldof;}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 591 "feiparser.l"
{return token::equaldof;}
	YY_BREAK
/* Constraint options */
case 357:
YY_RULE_SETUP
#line 594 "feiparser.l"
{return token::master;}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 595 "feiparser.l"
{return token::slave;}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 596 "feiparser.l"
{return token::dof_to_constrain;}
	YY_BREAK
/* DRM OPtions */
case 360:
YY_RULE_SETUP
#line 599 "feiparser.l"
{return token::scale_factor;}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 600 "feiparser.l"
{return token::displacement_scale_unit;}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 601 "feiparser.l"
{return token::velocity_scale_unit;}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 602 "feiparser.l"
{return token::acceleration_scale_unit;}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 603 "feiparser.l"
{return token::number_of_steps;}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 604 "feiparser.l"
{return token::number_of_drm_nodes;}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 605 "feiparser.l"
{return token::number_of_drm_elements;}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 606 "feiparser.l"
{return token::x_max;}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 607 "feiparser.l"
{return token::x_min;}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 608 "feiparser.l"
{return token::y_max;}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 609 "feiparser.l"
{return token::y_min;}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 610 "feiparser.l"
{return token::z_max;}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 611 "feiparser.l"
{return token::z_min;}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 612 "feiparser.l"
{return token::element_file;}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 613 "feiparser.l"
{return token::nodes_file;}
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 614 "feiparser.l"
{return token::displacement_file;}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 615 "feiparser.l"
{return token::acceleration_file;}
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 616 "feiparser.l"
{return token::velocity_file;}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 617 "feiparser.l"
{return token::force_file;}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 618 "feiparser.l"
{return token::series_file;}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 619 "feiparser.l"
{return token::time_series_file;}
	YY_BREAK
/* ================================================================================================= */
/* ========                     DEFINE                                                     ========= */
/* ================================================================================================= */
/* Defineable things */
case 381:
YY_RULE_SETUP
#line 627 "feiparser.l"
{return token::ALGORITHM;}
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 628 "feiparser.l"
{return token::CONVERGENCE_TEST;}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 629 "feiparser.l"
{return token::SOLVER;}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 630 "feiparser.l"
{return token::DYNAMICINTEGRATOR;}
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 631 "feiparser.l"
{return token::STATICINTEGRATOR;}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 632 "feiparser.l"
{return token::OUTPUT;}
	YY_BREAK
/* Algorithm options*/
case 387:
#line 636 "feiparser.l"
case 388:
#line 637 "feiparser.l"
case 389:
#line 638 "feiparser.l"
case 390:
#line 639 "feiparser.l"
case 391:
#line 640 "feiparser.l"
case 392:
YY_RULE_SETUP
#line 640 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::ALGNAME;
                                     }
	YY_BREAK
/* Test options */
case 393:
#line 646 "feiparser.l"
case 394:
#line 647 "feiparser.l"
case 395:
YY_RULE_SETUP
#line 647 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::TESTNAME;
                                    }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 651 "feiparser.l"
{return token::tolerance;}
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 652 "feiparser.l"
{return token::maximum_iterations;}
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 653 "feiparser.l"
{return token::verbose_level;}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 654 "feiparser.l"
{return token::minimum_time_step;}
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 655 "feiparser.l"
{return token::maximum_time_step;}
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 656 "feiparser.l"
{return token::number_of_iterations;}
	YY_BREAK
/* define solver options */
case 402:
#line 660 "feiparser.l"
case 403:
#line 661 "feiparser.l"
case 404:
#line 662 "feiparser.l"
case 405:
#line 663 "feiparser.l"
case 406:
YY_RULE_SETUP
#line 663 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::SOLVERNAME;
                                    }
	YY_BREAK
/* define static and dynamic integrator options */
case 407:
YY_RULE_SETUP
#line 669 "feiparser.l"
{return token::DYNAMICINTEGRATOR_NEWMARK;}
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 670 "feiparser.l"
{return token::DYNAMICINTEGRATOR_HHT;}
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 671 "feiparser.l"
{return token::STATICINTEGRATOR_DISPLACEMENT;}
	YY_BREAK
/* SIMULATE*/
case 410:
YY_RULE_SETUP
#line 675 "feiparser.l"
{return token::STATIC;}
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 676 "feiparser.l"
{return token::DYNAMIC;}
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 677 "feiparser.l"
{return token::TRANSIENT;}
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 678 "feiparser.l"
{return token::VARIABLETRANSIENT;}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 679 "feiparser.l"
{return token::EIGEN;}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 680 "feiparser.l"
{return token::USING;}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 681 "feiparser.l"
{return token::time_step;}
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 682 "feiparser.l"
{return token::number_of_modes;}
	YY_BREAK
/* OUTPUT */
case 418:
YY_RULE_SETUP
#line 685 "feiparser.l"
{return token::BINARY;}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 686 "feiparser.l"
{return token::TEXT;}
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 687 "feiparser.l"
{return token::ENABLE;}
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 688 "feiparser.l"
{return token::DISABLE;}
	YY_BREAK
/* ================================================================================================= */
/* ========                    AUXILLIARY WORDS                                            ========= */
/* ================================================================================================= */
case 422:
YY_RULE_SETUP
#line 695 "feiparser.l"
{return token::AT;}
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 696 "feiparser.l"
{return token::ALL;}
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 697 "feiparser.l"
{return token::AND;}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 698 "feiparser.l"
{return token::TEXTDOFS;}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 699 "feiparser.l"
{return token::FACTOR;}
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 700 "feiparser.l"
{return token::INCREMENT;}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 701 "feiparser.l"
{return token::NAME;}
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 702 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 703 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 704 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 705 "feiparser.l"
{return token::of;}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 706 "feiparser.l"
{return token::STEPS;}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 707 "feiparser.l"
{return token::TO;}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 708 "feiparser.l"
{return token::TYPE;}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 709 "feiparser.l"
{return token::USE;}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 710 "feiparser.l"
{return token::WITH;}
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 711 "feiparser.l"
{return token::NODES;}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 712 "feiparser.l"
{return token::DOMAIN_;}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 713 "feiparser.l"
{return token::dof;}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 714 "feiparser.l"
{return token::RESPONSE;}
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 715 "feiparser.l"
{return token::FILE;}
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 716 "feiparser.l"
{return token::FROM;}
	YY_BREAK
/* Greek */
case 444:
YY_RULE_SETUP
#line 719 "feiparser.l"
{return token::alpha;}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 720 "feiparser.l"
{return token::beta;}
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 721 "feiparser.l"
{return token::gamma;}
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 722 "feiparser.l"
{return token::lambda;}
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 723 "feiparser.l"
{return token::kappa;}
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 724 "feiparser.l"
{return token::delta;}
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 727 "feiparser.l"
{return token::INTEGRATIONPOINTS;}
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 728 "feiparser.l"
{return token::IntegrationRule;}
	YY_BREAK
/* DOFS */
case 452:
#line 733 "feiparser.l"
case 453:
#line 734 "feiparser.l"
case 454:
#line 735 "feiparser.l"
case 455:
#line 736 "feiparser.l"
case 456:
#line 737 "feiparser.l"
case 457:
#line 738 "feiparser.l"
case 458:
#line 739 "feiparser.l"
case 459:
#line 740 "feiparser.l"
case 460:
#line 741 "feiparser.l"
case 461:
YY_RULE_SETUP
#line 741 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::DOF;
                                    }
	YY_BREAK
/*Other language commands*/
case 462:
#line 748 "feiparser.l"
case 463:
#line 749 "feiparser.l"
case 464:
YY_RULE_SETUP
#line 749 "feiparser.l"
{
                                    yylval->ident = new string(yytext);
                                    return token::BYE;
                                }
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 753 "feiparser.l"
{void show_einstein(); show_einstein();}
	YY_BREAK
/* ================================================================================================= */
/* ========                     NON KEYWORDS                                               ========= */
/* ================================================================================================= */
/* names */
case 466:
YY_RULE_SETUP
#line 763 "feiparser.l"
{
                                        yylval->ident = new string(yytext);
                                        return token::IDENT;
                                    }
	YY_BREAK
/*numbers*/
case 467:
#line 770 "feiparser.l"
case 468:
YY_RULE_SETUP
#line 770 "feiparser.l"
{
                                        yylval->value = new Quantity(atof(yytext), unitless);
                                        return token::NUMBER;
                                    }
	YY_BREAK
/* End-of-file discards current file and returns to the previous, otherwise to the interactive prompt */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IFILE):
case YY_STATE_EOF(COMMENT):
#line 775 "feiparser.l"
{
                                        if (popfile()==0)
                                        {
                                            if(FLAG_interactive_mode == 1)
                                            {
                                                newstdin();
                                                yyrestart(yyin);
                                                //yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
                                                prompt = thePrompt;
                                                //cout << prompt;
                                            }
                                            else
                                            {
                                                cout << endl << "You forgot to say \"bye\"... " << endl;
                                                wipe_model();
                                                exit(0);
                                            }

                                        }
                                        if (strncmp(curfilename, initial, 5) == 0) //I dont like strncmp :(
                                        {
                                            prompt = thePrompt;
                                            //cout << prompt;
                                        }
                                        yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
                                    }
	YY_BREAK
/* comments */
case 469:
YY_RULE_SETUP
#line 803 "feiparser.l"

	YY_BREAK
case 470:
YY_RULE_SETUP
#line 804 "feiparser.l"

	YY_BREAK
/* ignore white space, tabs and carriage return*/
case 471:
YY_RULE_SETUP
#line 808 "feiparser.l"
//{yylloc -> step();}
	YY_BREAK
/* ignore newline*/
/*\n                                  {yylloc -> lines(1);} */
case 472:
/* rule 472 can match eol */
YY_RULE_SETUP
#line 812 "feiparser.l"
{
                                        yycolumn = 1;
                                    }
	YY_BREAK
/* Match text strings */
case 473:
/* rule 473 can match eol */
YY_RULE_SETUP
#line 817 "feiparser.l"
{
                                        std::string* thisString = new std::string(yytext);
                                        yylval->ident = thisString;
                                        return token::STRING;
                                    }
	YY_BREAK
/* catch-all of the rest and report (only useless characters like ? get to this point */
case 474:
YY_RULE_SETUP
#line 824 "feiparser.l"
{ cout << "Failed to parse the character at line " << yylineno << " : " << *yytext << endl; }
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 826 "feiparser.l"
ECHO;
	YY_BREAK
#line 4958 "feiparser.lex.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3028 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3028 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3027);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 826 "feiparser.l"




int newfile(char* fn) {
    FILE *f = fopen(fn, "r");

    bufstack *bs = (bufstack*) malloc(sizeof( bufstack)) ;

    if (!f)     {perror(fn); return 0 ;}
    if (!bs)    {perror("Out of memory."); exit(1);}

    if (curbs) curbs->lineno = yylineno;
    bs->prev = curbs;

    bs->bs = yy_create_buffer(f,YY_BUF_SIZE);
    bs -> f = f;
    bs -> filename = fn;
    bs -> lineno = 1;
    yy_switch_to_buffer(bs->bs);
    curbs = bs;
    yylineno = 1;
    curfilename = fn;

    cout << "Including: \"" << fn << "\"" << endl << endl;

    return 1;
}



int newstdin()
{

    FILE *f = stdin;

    bufstack *bs = (bufstack *) malloc(sizeof( bufstack)) ;


    if (!f)
    {
        perror("Could not open STDIN!");
        return 0 ;
    }
    if (!bs)
    {
        perror("Out of memory.");
        exit(1);
    }

    if (curbs)
    {
        curbs->lineno = yylineno;
    }
    bs->prev = curbs;
    bs->bs = yy_create_buffer(f,YY_BUF_SIZE);
    bs -> f = f;
    bs -> lineno = 1;
    bs -> filename = initial;

    yy_switch_to_buffer(bs->bs);
    curbs = bs;


    yylineno = 1;
    curfilename = initial;

    cout << "Input: STDIN" << endl << endl;
    prompt = thePrompt;
    //cout << prompt ;
    return 1;
}

int popfile(void)
{
    bufstack *bs = curbs;
    bufstack *prevbs;

    if (!bs)
    {
        return 0;
    }

    fclose(bs->f);
    yy_delete_buffer(bs->bs);

    prevbs = bs-> prev;
    free(bs);

    if (!prevbs)
    {
        return 0;
    }

    yy_switch_to_buffer(prevbs->bs);
    curbs = prevbs;

    cout << "Done including: \"" << curfilename << "\" (" << yylineno << " lines included)." << endl;
    cout << "Continuing with \"" << curbs->filename << "\" at line " << curbs->lineno << "." << endl;

    cout << endl << prompt;

    yylineno = curbs->lineno;
    curfilename = curbs->filename;

    return 1;
}

int error_behavior()
{
    //while (popfile() != 0); // Discard everything!

    //Start new interactive mode
    if ( FLAG_interactive_mode == 1 )
    {
        newstdin();
        yyrestart(yyin);

        prompt = thePrompt;
        //if (recovery_mode == 1)
        //    prompt = "(safe) " + thePrompt;
    }
    else
    {
        exit(-1);
    }

    return 0;
}


void print_usage()
{
    cout <<
         "ESSI: UCDavis Earthquake-Soil-Structure-Interaction Simulator \n"
         "              -          -    -         -                     \n"
         "Usage: essi [-cfhnsmbe FILENAME]\n"
         "  -c --cpp-output          : Output cpp version of the analysis done. \n"
         "  -f --filename [FILENAME] : Include and run FILENAME. \n"
         "  -h --help                : Print this message. \n"
         "  -n --no-interactive      : Disable interactive mode. \n"
         "  -s --set-variable        : Set a variable from the command line. \n"
         "  -d --dry-run             : Do not execute ESSI API calls. Just parse. \n"
         "  -m --model-name [NAME]   : Set the model name from the command line. \n"
         "  -b --binary-output       : The output generated will be in binary instead of plain text. \n"
         " \n\n"
         "Example to set a variable name from command line:\n"
         "    essi -s a=10,b=20,c=30\n"
         "Runs ESSI with variables a, b, and c set to 10, 20 and 30 respectively.\n"
         "At this time, only unitless variables can be set. \n"
         "\n\n";

}





#ifdef _PARALLEL_PROCESSING
  #include "../ModifiedOpenSeesServices/domain/domain/partitioned/PartitionedDomain.h"
  #include "../ModifiedOpenSeesServices/graph/partitioner/GraphPartitioner.h"
  #include <../ModifiedOpenSeesServices/actor/objectBroker/FEM_ObjectBroker.h>
  #include <../ModifiedOpenSeesServices/actor/machineBroker/MachineBroker.h>
  #include <../ModifiedOpenSeesServices/actor/machineBroker/MPI_MachineBroker.h>

  extern PartitionedDomain theDomain;
  extern int OPS_PARALLEL_PROCESSING;
  extern int OPS_NUM_SUBDOMAINS;
  extern bool OPS_PARTITIONED;
  extern FEM_ObjectBroker *OPS_OBJECT_BROKER;
  extern MachineBroker  *OPS_MACHINE;
  extern GraphPartitioner  *OPS_GRAPH_PARTITIONER;
  static MPI_MachineBroker *theMachineBroker = 0;
#endif


int start_parser(int argc, char**argv)
{
    //Welcome message
    welcome_msg();

    // Generate previously known units list
    set_known_units();

    //Parse Command Line Parameters
    int c;
    char *filename_from_command_line = 0;

    while (1)
    {
        static struct option long_options[] =
        {
            {"binary-output",    no_argument,       0, 'b'},
            {"cpp-output",       no_argument,       0, 'c'},
            {"file",             required_argument, 0, 'f'},
            {"help",             no_argument,       0, 'h'},
            {"model-name",       required_argument, 0, 'm'},
            {"no-interactive",   no_argument,       0, 'n'},
            {"set-variable",     required_argument, 0, 's'},
            {"no-cpp-output",    no_argument,       0, 'x'},
            {"dry-run",          no_argument,       0, 'd'},
            {0, 0, 0, 0}
        };

        /* getopt_long stores the option index here. */
        int option_index = 0;

        //This is the command line option parser
        c = getopt_long(argc, argv, "cf:hns:xm:d", long_options, &option_index);

        /* Detect the end of the options. */
        if (c == -1)
        {
            break;
        }

        switch (c)
        {

            case 'c':  // -c --cpp-output: Create .cpp output
                FLAG_generate_cpp_output = 1;
                break;
            case 'f': // -f --file: Take input from file
                filename_from_command_line = optarg;
                FLAG_run_file = 1;
                break;
            case 'h': // -h --help: print usage
                print_usage();
                return (0);
                break;
            case 'n': // -n --no-interactive: disable interactive mode
                FLAG_interactive_mode = 0;
                break;
            case 's': // -s --set-variable: Set a variable from the command line
                set_variables(optarg);
                break;
            case 'x': // -x --no-cpp-output: disable cpp output (default)
                FLAG_generate_cpp_output = 0;
                break;
            case 'd': // -d --dry-run: do not call API... just make parser call and produce cpp output if so enabled
                FLAG_dry_run = 1;
                set_dry_run_mode(FLAG_dry_run);
                break;
            case 'm': // -m --model-name: Set model name from the command line
                set_model_name(optarg);
                break;
            case 'b': //  -b --binary-output: The output generated will be in binary instead of plain text.
                FLAG_binary_output = 1;
                break;
            default:
                print_usage();
                return (0);
        }
    }

    if (optind < argc)
    {
        cout << "Unexpected option" << endl << endl;
        print_usage();
        return (0);
    }

    if (FLAG_interactive_mode)
    {
        newstdin();
    }

    if (FLAG_run_file)
    {
        newfile(filename_from_command_line);
        set_outcppfile_name(string(filename_from_command_line));
        prompt = "";
    }

#ifdef _PARALLEL_PROCESSING
    //Kill other processes in case of dry run... parallel is not needed.
    if(FLAG_dry_run)
    {
        theMachineBroker->shutdown();
    }
#endif

    // Parse flag
    int exitflag = -1;

    //Construct a parser object
    yy::feiparser parser;

    // Start parsing!
    cout << prompt;
    exitflag = parser.parse();

    //Exit
    return exitflag;
}




/*  SIGNAL HANDLING  */


void signalHandler(int signum)
{
    if(signum == SIGINT)
    {
        cout << "Caught SIGINT! Program ending." << endl;
    }
    else if(signum == SIGABRT)
    {
        cout << "Caught SIGABRT! Program ending." << endl;
    }
    else if(signum == SIGSEGV)
    {
        cout << "Caught SIGSEGV! Program ending." << endl;
    }
    else if(signum == SIGTERM)
    {
        cout << "Caught SIGTERM! Program ending." << endl;
    }
    else if(signum == SIGILL)
    {
        cout << "Caught SIGILL! Program ending." << endl;
    }
    else if(signum == SIGFPE)
    {
        cout << "Caught SIGFPE! Program ending." << endl;
    }
    exit(signum);
}

/* END SIGNALS */

int main (int argc, char**argv)
{

    signal(SIGINT, signalHandler);
    signal(SIGABRT, signalHandler);
    signal(SIGSEGV, signalHandler);
    signal(SIGTERM, signalHandler);
    signal(SIGILL, signalHandler);
    signal(SIGFPE, signalHandler);


    int exitflag = -1;

#ifdef _PARALLEL_PROCESSING
    // In parallel processing, a few things have to be setup before starting.

   FEM_ObjectBroker theBroker;
   MPI_MachineBroker theMachine(&theBroker, argc, argv);
   theMachineBroker = &theMachine;
   int rank = theMachine.getPID();
   int np = theMachine.getNP();

   if (rank != 0) //If this is the main machine
   {
        exitflag = theMachine.runActors();
   } 
   else  // Or if it is a slave node
   {
        OPS_OBJECT_BROKER       = &theBroker;
        OPS_MACHINE             = &theMachine;
        OPS_PARALLEL_PROCESSING = np;
        OPS_NUM_SUBDOMAINS      = np - 1;
        OPS_PARTITIONED         = false;

    	exitflag = start_parser(argc, argv);
    }

    //this got moved to the wipe_model() API call...... 
    theDomain.clearAll();
    theMachine.shutdown();

    cout << "Process # " << rank << " ended with exitflag = " << exitflag << endl;
#else
    exitflag = start_parser(argc, argv);
#endif


    return exitflag;
}
  


int smaller(int a, int b)
{
    if (a >= b)
    {
        return b;
    }
    else
    {
        return a;
    }
}

// =================================================================================
// Please do not erase! Might make it into the code some day. (Jose Abell)
//
// This code replaces standard input as the main input mechanism, and implements
// a smarter prompt, which has auto replace, code history, etc.
//
// Buggy and unstable as it is. (To make it work, the is a macro that needs to be enabled on top of
// this file)
//
//static int my_yyinput(char *buf, int max_size)
//{
//    int   len;
//
//    if (st_readline_buffer == NULL)
//    {
//        st_readline_used_len = 0;
//        st_readline_buffer = readline(prompt.c_str());
//
//        if (st_readline_buffer == NULL)
//            return 0;
//        else
//        {
//            //strncat(st_readline_buffer, " ", 1);
//        }
//    }
//
//    len = smaller(strlen(st_readline_buffer) - st_readline_used_len, max_size);
//
//    if (len == 0)
//    {
//        strncat(st_readline_buffer, " ", 1);
//        len = 1;
//    }
//
//    strncpy(buf, &st_readline_buffer[st_readline_used_len], len);
//    add_history(st_readline_buffer);
//
//    st_readline_used_len += len;
//    if (st_readline_buffer[st_readline_used_len] == '\0')
//    {
//        free(st_readline_buffer);
//        st_readline_buffer = NULL;
//    }
//
//    return len;
//}
//// =================================================================================

#include <ctime>
void welcome_msg()
{
    time_t rawtime;
    struct tm *timeinfo;
    char timestring[80];
    time ( &rawtime );
    timeinfo = localtime ( &rawtime );
    strftime (timestring, 80, "%b %d %Y at %H:%M:%S", timeinfo);
    cout << "                                                               " << endl;
    cout << "                                                               " << endl;
    cout << "  The Finite Element Interpreter                               " << endl;
    cout << "                                                               " << endl;
    cout << "  Real ESSI                                                  " << endl;
    cout << "  Earthquake Soil Structure Interaction Simulator            " << endl;
    cout << "                                                             " << endl;
    #ifdef _PARALLEL_PROCESSING
    cout << " Parallel processing mode. Main machine!                     " << endl;
    #else
    cout << "  Sequential processing mode.                                " << endl;
    #endif
    cout << "                                                             " << endl;
    cout << "Compiled: " << __DATE__ << " at " << __TIME__  << endl;
    cout << "Time Now: " << timestring  << endl;
    cout << "                                                               " << endl;
    cout << "Static startup tips:                                           " << endl;
    cout << " * Remember: Every command ends with a semicolon ';'.          " << endl;
    cout << " * Type 'quit;' or 'exit;' to finish.                          " << endl;
    cout << " * Run 'essi -h to see available command line options.        " << endl;
    cout << "                                                               " << endl;
}

void set_known_units()
{
    //Base units*/
    global_variables["m"] = Quantity(1.0, m);
    global_variables["kg"] = Quantity(1.0, kg);
    global_variables["s"] = Quantity(1.0, s);

    // Length
    global_variables["cm"] = Quantity(1.0, cm);
    global_variables["mm"] = Quantity(1.0, mm);
    global_variables["Km"] = Quantity(1.0, km);

    //Time
    global_variables["Hz"] = Quantity(1.0, Hz);
    global_variables["ms"] = Quantity(1.0, ms);
    global_variables["ns"] = Quantity(1.0, ns);

    //Force
    global_variables["N"] = Quantity(1.0, N);
    global_variables["kN"] = Quantity(1.0, kN);

    //Pressure
    global_variables["Pa"] = Quantity(1.0, Pa);
    global_variables["kPa"] = Quantity(1.0, kPa);
    global_variables["MPa"] = Quantity(1.0, MPa);
    global_variables["GPa"] = Quantity(1.0, GPa);

    //Constants
    global_variables["g"] = g;  // gravitational acceleration on Earth at sea level and 45degrees of latitude
    global_variables["pi"] = Quantity(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986, unitless); // pi to a useless ammount of significant digits

    // Put these variables in the locked list.... cuz we own this!
    map<string, Quantity>::const_iterator it;
    for (it = global_variables.begin();
            it != global_variables.end();
            it++)
    {
        locked_global_variables.insert(it->first);
    }
}

void set_variables(char *cstring)
{
    string variables(cstring);

    cout << endl << "The following variables are being set from the command line:" << endl << endl;

    while (1)
    {
        size_t i1 = variables.find("=");
        size_t i2 = variables.find(",");

        if (i1 == string::npos)
        {
            break;
        }

        string var_name(variables.substr(0, i1));
        string var_value(variables.substr(i1 + 1, i2 - i1 - 1));

        if (i2 == string::npos)
        {
            variables = "";
        }
        else
        {
            variables = variables.substr(i2 + 1);
        }

        cout << var_name << " = " << var_value << endl;

        double value = boost::lexical_cast<double>(var_value);
        global_variables[var_name] = Quantity(value, unitless); // :) love boost!
    }
    cout << endl << endl;
}




























void show_einstein()
{

    cout << " "                                                                                 << endl;
    cout << "                    .+~                :xx++::"                                    << endl;
    cout << "                   :`. -          .!!X!~\"?!`~!~!. :-:."                           << endl;
    cout << "                  <             .!!!H\":.~ ::+!~~!!!~ `%X."                        << endl;
    cout << "                  '             ~~!M!!>!!X?!!!!!!!!!!...!~."                       << endl;
    cout << "                              <!:!MM!~:XM!!!!!!.:!..~ !.  `<"                      << endl;
    cout << "                  <: `   :~ .:<~!!M!XXHM!!!X!XXHtMMHHHX!  ~ ~"                     << endl;
    cout << "                ~~~~<' ~!!!:!!!!!XM!!M!!!XHMMMRMSXXX!!!!!!:  <`"                   << endl;
    cout << "                  `<  <::!!!!!X!X?M!!M!!XMMMMXXMMMM?!!!!!!?!:~<"                   << endl;
    cout << "               : '~~~<!!!XMMH!!XMXMXHHXXXXM!!!!MMMMSXXXX!!!!!!!~"                  << endl;
    cout << "            :    ::`~!!!MMMMXXXtMMMMMMMMMMMHX!!!!!!HMMMMMX!!!!!: ~"                << endl;
    cout << "               '~:~!!!!!MMMMMMMMMMMMMMMMMMMMMMXXX!!!M??MMMM!!X!!i:"                << endl;
    cout << "               <~<!!!!!XMMMMMMMMMMMM8M8MMMMM8MMMMMXX!!!!!!!!X!?t?!:"               << endl;
    cout << "               ~:~~!!!!?MMMMMM@M@RMRRR$@@MMRMRMMMMMMXSX!!!XMMMX<?X!"               << endl;
    cout << "             :XX <!!XHMMMM88MM88BR$M$$$$8@8RN88MMMMMMMMHXX?MMMMMX!!!"              << endl;
    cout << "           .:X! <XMSM8M@@$$$$$$$$$$$$$$$$$$$B8R$8MMMMMMMMMMMMMMMMX!X"              << endl;
    cout << "          :!?! !?XMMMMM8$$$$8$$$$$$$$$$$$$$BBR$$MMM@MMMMMMMMMMMMMM!!X"             << endl;
    cout << "        ~<!!~ <!!XMMMB$$$$$$$$$$$$$$$$$$$$$$$$MMR$8MR$MMMMMMMMMMMMM!?!:"           << endl;
    cout << "        :~~~ !:X!XMM8$$$$$$$$$$$$$$$$$$$$$$$RR$$MMMMR8NMMMMMMMMMMMMM<!`-"          << endl;
    cout << "    ~:<!:~`~':!:HMM8N$$$$$$$$$$$$$$$$$$$$$$$$$8MRMM8R$MRMMMMMMMMRMMMX!"            << endl;
    cout << "  !X!``~~   :~XM?SMM$B$$$$$$$$$$$$$$$$$$$$$$BR$$MMM$@R$M$MMMMMM$MMMMX?L"           << endl;
    cout << " X~.      : `!!!MM#$RR$$$$$$$$$$$$$$$$$R$$$$$R$M$MMRRRM8MMMMMMM$$MMMM!?:"          << endl;
    cout << " ! ~ <~  !! !!~`` :!!MR$$$$$$$$$$RMM!?!??RR?#R8$M$MMMRM$RMMMM8MM$MMM!M!:>"         << endl;
    cout << ": ' >!~ '!!  !   .!XMM8$$$$$@$$$R888HMM!!XXHWX$8$RM$MR5$8MMMMR$$@MMM!!!< ~"        << endl;
    cout << "!  ' !  ~!! :!:XXHXMMMR$$$$$$$$$$$$$$$$8$$$$8$$$MMR$M$$$MMMMMM$$$MMM!!!!"          << endl;
    cout << " ~<!!!  !!! !!HMMMMMMMM$$$$$$$$$$$$$$$$$$$$$$$$$$MMM$M$$MM8MMMR$$MMXX!!!!/:`"      << endl;
    cout << "  ~!!!  !!! !XMMMMMMMMMMR$$$$$$$$$$$$R$RRR$$$$$$$MMMM$RM$MM8MM$$$M8MMMX!!!!:"      << endl;
    cout << "  !~ ~  !!~ XMMM%!!!XMMX?M$$$$$$$$B$MMSXXXH?MR$$8MMMM$$@$8$M$B$$$$B$MMMX!!!!"      << endl;
    cout << "  ~!    !! 'XMM?~~!!!MMMX!M$$$$$$MRMMM?!%MMMH!R$MMMMMM$$$MM$8$$$$$$MR@M!!!!!"      << endl;
    cout << "  <>    !!  !Mf x@#\"~!t?M~!$$$$$RMMM?Xb@!~`??MS$M@MMM@RMRMMM$$$$$$RMMMMM!!!!"     << endl;
    cout << "  !    '!~ <!!:!?M   !@!M<XM$$R5M$8MMM$! -XXXMMRMBMMM$RMMM@$R$BR$MMMMXX?!X!!"      << endl;
    cout << "  !    '!  !!X!!!?::xH!HM:MM$RM8M$RHMMMX...XMMMMM$RMMRRMMMMMMM8MMMMMMMMX!!X!"      << endl;
    cout << "  !     ~  !!?:::!!!MXMR~!MMMRMM8MMMMMS!!M?XXMMMMM$$M$M$RMMMM8$RMMMMMMMM%X!!"      << endl;
    cout << "  ~     ~  !~~X!!XHMMM?~ XM$MMMMRMMMMMM@MMMMMMMMMM$8@MMMMMMMMRMMMMM?!MMM%HX!"      << endl;
    cout << "           !!!!XSMMXXMM .MMMMMMMM$$$BB8MMM@MMMMMMMR$RMMMMMMMMMMMMMMMXX!?H!XX"      << endl;
    cout << "           XHXMMMMMMMM!.XMMMMMMMMMR$$$8M$$$$$M@88MMMMMMMMMMMMMMM!XMMMXX!!!XM"      << endl;
    cout << "      ~   <!MMMMMMMMRM:XMMMMMMMMMM8R$$$$$$$$$$$$$$$NMMMMMMMM?!MM!M8MXX!!/t!M"      << endl;
    cout << "      '   ~HMMMMMMMMM~!MM8@8MMM!MM$$8$$$$$$$$$$$$$$8MMMMMMM!!XMMMM$8MR!MX!MM"      << endl;
    cout << "          'MMMMMMMMMM'MM$$$$$MMXMXM$$$$$$$$$$$$$$$$RMMMMMMM!!MMM$$$$MMMMM<!M"      << endl;
    cout << "          'MMMMMMMMM!'MM$$$$$RMMMMMM$$$$$$$$$$$$$$$MMM!MMMX!!MM$$$$$M$$M$M!M"      << endl;
    cout << "           !MMMMMM$M! !MR$$$RMM8$8MXM8$$$$$$$$$$$$NMMM!MMM!!!?MRR$$RXM$$MR!M"      << endl;
    cout << "           !M?XMM$$M.< !MMMMMMSUSRMXM$8R$$$$$$$$$$#$MM!MMM!X!t8$M$MMMHMRMMX$"      << endl;
    cout << "    ,-,   '!!!MM$RMSMX:.?!XMHRR$RM88$$$8M$$$$$R$$$$8MM!MMXMH!M$$RMMMMRNMMX!$"      << endl;
    cout << "   -'`    '!!!MMMMMMMMMM8$RMM8MBMRRMR8RMMM$$$$8$8$$$MMXMMMMM!MR$MM!M?MMMMMM$"      << endl;
    cout << "          'XX!MMMMMMM@RMM$MM@$$BM$$$M8MMMMR$$$$@$$$$MM!MMMMXX$MRM!XH!!??XMMM"      << endl;
    cout << "          `!!!M?MHMMM$RMMMR@$$$$MR@MMMM8MMMM$$$$$$$WMM!MMMM!M$RMM!!.MM!%M?~!"      << endl;
    cout << "           !!!!!!MMMMBMM$$RRMMMR8MMMMMRMMMMM8$$$$$$$MM?MMMM!f#RM~    `~!!!~!"      << endl;
    cout << "           ~!!HX!!~!?MM?MMM??MM?MMMMMMMMMRMMMM$$$$$MMM!MMMM!!"                     << endl;
    cout << "           '!!!MX!:`~~`~~!~~!!!!XM!!!?!?MMMM8$$$$$MMMMXMMM!!"                      << endl;
    cout << "            !!~M@MX.. <!!X!!!!XHMHX!!``!XMMMB$MM$$B$M!MMM!!"                       << endl;
    cout << "            !!!?MRMM!:!XHMHMMMMMMMM!  X!SMMX$$MM$$$RMXMMM~"                        << endl;
    cout << "             !M!MMMM>!XMMMMMMMMXMM!!:!MM$MMMBRM$$$$8MMMM~"                         << endl;
    cout << "             `?H!M$R>'MMMM?MMM!MM6!X!XM$$$MM$MM$$$$MX$f"                           << endl;
    cout << " _______      `MXM$8X MMMMMMM!!MM!!!!XM$$$MM$MM$$$RX@\""                           << endl;
    cout << "/       \\_/|   ~M?$MM !MMMMXM!!MM!!!XMMM$$$8$XM$$RM!`"                            << endl;
    cout << "|Go AGS! _/    !XMMM !MMMMXX!XM!!!HMMMM$$$$RH$$M!~"                                << endl;
    cout << "\\_______/       'M?MM `?MMXMM!XM!XMMMMM$$$$$RM$$#"                                << endl;
    cout << "                 `>MMk ~MMHM!XM!XMMM$$$$$$BRM$M\""                                 << endl;
    cout << "                  ~`?M. !M?MXM!X$$@M$$$$$$RMM#"                                    << endl;
    cout << "                    `!M  !!MM!X8$$$RM$$$$MM#`"                                     << endl;
    cout << "                      !% `~~~X8$$$$8M$$RR#`"                                       << endl;
    cout << "                       !!x:xH$$$$$$$R$R*`"                                         << endl;
    cout << "                        ~!?MMMMRRRM@M#`       -Sushil-"                            << endl;
    cout << "                         `~???MMM?M\"`"                                            << endl;
    cout << "                             ``~~"                                                 << endl;
}


