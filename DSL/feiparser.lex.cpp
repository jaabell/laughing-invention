#line 2 "feiparser.lex.c"

#line 4 "feiparser.lex.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 495
#define YY_END_OF_BUFFER 496
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[3229] =
    {   0,
        0,    0,    0,    0,    0,    0,  496,  494,  491,  492,
      491,    8,  494,  449,    4,   29,   10,   15,    3,    1,
        9,    2,  494,    5,  488,  488,  488,  488,  488,   16,
       24,    7,   23,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,   13,   14,    6,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  481,  486,  486,  486,  486,  486,  486,  486,  486,
      486,   11,   30,   12,   60,   61,  495,    0,    0,    0,
      493,    0,  490,   21,   19,   17,   18,  488,  489,   20,

      487,  488,    0,  488,  488,    0,    0,    0,   28,   25,
       26,   27,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  317,  318,  319,  486,
      486,  486,  486,  486,  486,    0,  486,  486,  486,  486,
      320,  321,  322,  486,  486,  486,  448,  486,  486,  260,
      486,  486,  486,  486,  486,  486,  478,  479,  480,  486,
      486,   22,  358,  359,  257,  258,  259,  486,  486,  486,
      486,  486,  486,  486,  486,  440,  326,  327,  328,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,   54,  486,  486,  231,  486,  486,  486,  486,

      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,   50,  486,   56,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  349,  350,  351,  486,  486,  486,  486,  486,  450,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  475,
      476,  477,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  452,  486,  486,  486,
      486,  486,  472,  473,  474,  486,  486,  486,  486,  486,
      486,  486,  486,  486,   60,    0,  490,  489,  487,    0,
        0,  488,    0,    0,    0,    0,    0,  486,  486,  486,

      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  352,  353,  354,  486,  486,  151,  150,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,   81,  486,  441,  486,  486,  442,  486,  486,  486,
      486,  486,  486,  486,  486,  484,  261,  262,  486,  486,
      486,  486,  486,   62,  486,  486,  486,  486,  486,  486,
      486,  486,  458,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,   73,
      486,  486,  486,  486,  486,   83,  486,  486,  486,  486,

      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  147,  148,  149,  486,  486,  486,  486,   55,  486,
      486,  486,   78,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,   95,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
       94,  486,  486,   63,  486,  486,  486,  486,  486,  486,
      486,  486,   64,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  454,  486,

      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,    0,    0,  487,    0,    0,    0,    0,
        0,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      307,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  314,  486,
       68,  486,  486,  486,  486,   69,   70,  486,  486,  465,
      486,  486,  486,   75,  486,  486,  486,  486,  486,   65,
      486,  486,  486,  486,  486,  486,  486,  486,  486,    0,
      443,  486,  486,  486,  486,  302,  486,  486,  486,  486,

       52,  486,  486,  486,  486,  486,  483,  486,  486,   76,
      486,  486,  460,  486,  486,   84,  486,  486,  461,  486,
      310,  486,   89,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  103,
      486,  311,  486,  106,  486,  486,  486,  486,  291,   92,
      486,  486,  486,  313,  446,  486,   99,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      482,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,   66,  486,  486,

       72,  486,  486,  486,  486,  486,  486,  486,  486,  486,
       67,  486,  486,  436,   51,  486,  486,  486,  486,  486,
      486,  486,  453,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,   90,  455,  486,  486,
      486,    0,    0,    0,    0,    0,    0,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      301,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  464,  486,  486,   71,  486,
      486,  486,  486,  486,  486,   91,  486,  486,  486,  486,

      486,  486,  486,  486,  486,  486,  486,  486,  469,  486,
      486,  486,    0,  486,  486,  486,  486,  431,  486,  486,
      486,  486,  486,  486,  486,  462,    0,  486,  486,  486,
      183,   77,  486,  486,  486,  486,  466,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  468,  308,
      486,  486,  463,  486,    0,  486,   74,  486,  486,  486,
      486,  486,  486,  486,   80,  486,  486,  456,  486,  486,
      486,  486,  486,  486,  338,  304,  486,  486,  486,   88,
      486,  486,  486,  486,  486,  486,  486,  146,  145,  486,

      486,  486,  486,  486,  296,  486,  486,  486,  367,  486,
       97,  486,  486,  451,  486,  486,  486,  486,  486,  486,
      486,  486,    0,  486,  486,  486,  486,  486,  139,  486,
      486,  486,  486,  432,  306,  486,  486,  486,  486,  486,
      486,   53,  486,  309,  486,  486,    0,    0,    0,    0,
        0,    0,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  404,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  435,  486,  486,

      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,   82,  486,  486,  486,    0,  457,  486,
      486,  486,  486,  486,  486,  437,  486,  486,    0,  486,
        0,  486,  486,  444,  486,  486,  112,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,   35,  486,
      486,  486,  486,  486,   32,  486,   34,  486,  486,  486,
      486,  486,  467,  331,    0,    0,  486,  486,  486,  366,
      486,  486,  486,  486,  486,  403,  486,  447,  393,  486,
      486,  486,  337,  303,  486,  486,  486,  486,  486,  486,
       85,  486,  486,  486,  486,  486,  486,  486,  486,  486,

      295,  486,  305,  390,  486,  427,  486,  217,  218,  486,
      486,  486,  486,  486,  486,    0,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,   79,  486,  486,  486,
      486,  486,  486,  486,    0,    0,    0,    0,    0,    0,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  424,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  423,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  190,  486,   87,  486,
      486,  486,  140,  486,  219,  486,  486,  486,  486,  109,

      486,  438,  486,    0,    0,  293,  486,  428,  486,  486,
      100,  486,  486,    0,  486,    0,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,   37,  486,  486,  486,  486,
      486,  486,  486,  486,  486,    0,    0,   96,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,   93,  486,   98,  486,
      486,  114,  486,  486,  486,  486,  486,    0,  486,  486,
      486,  334,  486,  486,  486,  289,  486,    0,  486,  486,
      486,  486,  486,  486,  422,  486,  486,  486,  486,  486,

      486,  486,  486,  486,  486,  486,  486,    0,    0,    0,
        0,    0,    0,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  201,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  200,
      486,  355,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  312,  486,  486,  486,
      290,  486,  486,  486,   58,  486,  486,  486,  486,  486,
      486,    0,    0,  486,    0,  486,  486,  486,  486,  101,
      336,  486,    0,  365,    0,  220,  486,  486,  486,  486,
      486,  486,  486,  486,  221,    0,    0,   59,  486,  486,

      486,  486,  486,  486,   38,   33,  486,   39,   36,  486,
      486,  486,  486,  486,    0,    0,  486,  486,  102,  345,
      486,  486,  486,  486,  486,  486,  421,  486,  486,  486,
      144,  152,  486,  111,  486,  459,  486,  486,  486,  486,
      486,  486,   86,  486,    0,  486,  486,  486,  486,  486,
      486,  486,  486,  486,    0,  486,  486,  486,  486,  486,
      292,  486,  486,    0,  486,  486,  486,  486,  486,  486,
      486,  486,  486,    0,    0,    0,    0,    0,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  323,
      324,  325,  486,  486,  486,  486,  486,  486,  486,  486,

      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  387,  339,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      162,  486,    0,    0,  486,    0,  485,  173,  486,  486,
      486,  364,    0,  486,  486,  486,  486,  340,  486,  486,
      382,    0,  445,  486,  486,  486,  486,  486,  486,  486,
      486,   42,  486,  486,  486,  486,  486,  486,    0,    0,
      347,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,    0,  163,  486,  486,

      486,  486,  486,  486,  486,  175,    0,  486,  433,  413,
      486,  429,  294,  486,    0,    0,  486,  486,  486,  486,
      486,  486,  486,  486,  486,    0,    0,    0,    0,  117,
      486,  486,  486,  356,  357,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  419,  486,  486,  486,  486,
      486,  185,  486,  486,  486,  486,  486,  486,  157,  156,
      486,  486,  486,  486,  486,  110,  486,  486,  486,  486,
      486,  486,    0,    0,  486,    0,  486,  486,  486,    0,
      486,  486,  486,  384,  341,  342,  343,  344,  486,  486,

        0,  486,  486,  486,  486,  486,  486,  486,  486,  486,
       40,  486,  486,  486,  486,  486,    0,  116,  346,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  420,  486,  486,  486,  486,
      486,  486,  486,  335,    0,  486,  486,  486,  486,  486,
      486,  486,  486,    0,  486,  486,  155,  486,  486,  486,
        0,    0,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  120,  122,    0,    0,    0,    0,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
       49,  486,  486,  486,  486,  486,  486,  486,  486,  486,

      486,  486,  486,  486,  486,  486,  486,  486,  143,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  439,  486,
      486,  486,  486,  486,  486,  486,  486,    0,    0,  486,
        0,  486,  486,  486,    0,  486,  486,  486,  486,  486,
        0,  486,  486,  486,  486,  486,  486,  389,  486,   41,
      486,  486,  486,  486,  486,    0,  486,  169,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  329,  486,  486,  486,  486,  486,
      486,  486,  333,  385,  486,    0,  486,  486,  486,  486,
      486,  486,  486,  486,    0,  486,  299,  300,  486,  486,

      486,    0,    0,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,    0,    0,    0,    0,    0,    0,    0,
        0,  118,    0,    0,  486,  486,   45,  486,  486,  486,
      486,  486,  486,  174,  486,  486,  486,  486,  486,  486,
      486,  486,  198,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  132,
      486,  486,  486,  288,  486,    0,  486,  486,  486,  486,
        0,    0,  486,    0,  486,  377,  316,    0,  486,  486,
      486,  486,  486,    0,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  115,  158,  486,

      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  192,  189,  369,  486,  486,    0,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  105,  486,  486,
      486,  486,    0,    0,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  121,    0,    0,  123,    0,    0,
        0,    0,    0,    0,    0,  128,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,    0,  486,  486,  486,  486,  486,

      486,  486,  486,  486,    0,  486,  153,  486,  486,    0,
        0,  486,    0,  486,    0,  486,  486,  486,  486,  486,
        0,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  206,  486,  486,  486,  486,  486,  154,
        0,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,    0,    0,  486,  383,  486,
      415,  486,  486,  486,  486,  486,  486,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  127,  398,  486,  486,

      486,  486,  486,  486,  486,  486,  394,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  408,  486,  486,  486,  486,  486,    0,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,    0,  486,
      486,  486,  486,  486,    0,    0,  486,    0,  486,   57,
      486,  486,  181,  168,  332,  107,  486,  486,  486,  486,
      486,  486,  486,   31,  486,  160,  161,  486,  486,  486,
      486,  286,  486,  486,  486,  486,  166,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  273,  486,  486,  486,  277,

      486,  486,  486,  486,  486,  486,  486,  486,  250,  486,
      237,  486,  486,  486,  486,  241,  486,  486,  486,  486,
      486,  486,  177,  486,    0,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,    0,
        0,  486,  486,  486,  486,  486,  486,  486,  255,    0,
      129,    0,    0,    0,    0,    0,    0,    0,  486,  486,
      486,  186,  486,  486,  486,  395,  486,  486,  486,  471,
      486,  486,  486,  401,  486,   48,  486,   43,  486,  486,
      486,  486,  486,  486,  486,  486,    0,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,    0,  486,  486,

      486,  486,  486,    0,    0,  486,  212,    0,  202,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  402,  486,  486,
      486,  486,  486,  486,  434,  373,  486,  486,  486,  486,
      486,  486,  281,  270,  272,  486,  279,  284,  486,  278,
      486,  280,  282,  486,  275,  486,  245,  235,  234,  486,
      486,  243,  252,  486,  242,  486,  486,  244,  246,  253,
      486,  486,  486,  238,  486,  486,    0,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,    0,    0,  486,  486,  486,  486,  486,  159,  486,

        0,    0,  137,  138,  135,    0,    0,    0,  486,  486,
      486,  486,  486,  409,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
        0,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  388,  486,  486,  486,  486,  486,  368,    0,  486,
        0,  486,  486,  486,  179,  180,  486,  486,  486,  486,
      348,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  164,  486,  486,  486,  486,  486,  486,  486,
      330,  486,  486,  486,  269,  486,  486,  486,  486,  232,
      486,  486,  233,  486,  486,  247,  486,  486,  486,  486,

        0,  360,  486,  486,  486,  486,  486,  486,  486,  267,
      486,  386,  486,  194,  195,  196,    0,    0,  486,  486,
      486,  210,  486,  486,    0,    0,    0,    0,    0,  486,
      362,  486,  486,  486,  486,  486,  361,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
        0,  381,  486,  486,  133,  486,  486,  486,  486,  486,
      486,  486,  265,  486,  380,  486,    0,  486,    0,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  417,  486,  416,  486,
      486,  486,  486,  486,  486,  486,  208,  207,  486,  486,

      486,  486,  486,  486,  486,  486,  486,  254,  486,  486,
      486,  209,  392,  486,  486,  486,  486,  486,  486,  486,
      486,  486,    0,    0,  486,  486,  486,  486,  486,    0,
        0,    0,    0,  124,  486,  486,  486,  486,  486,  486,
      486,  486,  486,   44,  486,  486,  486,  486,  486,  486,
      486,  182,  486,  104,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,    0,  486,  391,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  224,  470,  486,
      486,  486,  486,  414,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  271,  283,  486,

      486,  486,  248,  486,  251,  486,  486,  486,  486,  486,
      167,  486,  486,  486,    0,  430,  486,  486,  486,  486,
      486,  125,  126,  136,    0,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  378,  191,  486,  486,
      486,  486,  486,    0,  211,  486,  486,  486,  379,  178,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  276,
      486,  486,  240,  239,  486,  486,  486,  486,  486,  486,
      486,  486,  197,    0,  486,  371,  486,  486,  486,  119,

      486,  486,  486,  486,  486,  425,  486,  171,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  263,  170,  486,  426,  486,    0,  315,  486,  486,
      226,  486,  486,  486,  486,  486,  486,  486,  486,  229,
      486,  486,  486,  486,  418,  486,  486,  486,  227,  486,
      486,  249,  486,  486,  486,  486,  486,  165,  486,  108,
      486,  205,  486,  486,  131,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,    0,  486,  486,  486,
      230,  225,  486,  486,  486,  486,  486,  486,  486,  486,

      486,  486,  486,  216,  274,  236,  486,  486,  486,  285,
      486,  486,  486,  486,  486,  486,  486,  172,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      214,  213,  486,  486,  486,  486,    0,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  376,  486,  486,  486,
      486,  486,  486,  256,  486,  486,  486,  486,  486,  486,
      187,  486,  486,  486,  486,  486,  486,  486,  486,  411,
      486,  486,  372,  130,  486,  228,  370,  113,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  297,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  141,

      363,  486,   47,   46,  486,  486,  486,  486,  486,  134,
      486,  204,  215,  222,  223,  486,  486,  486,  374,  375,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  412,  486,  486,  399,  486,  486,  486,  486,
      486,  486,  486,  486,  406,  486,  486,  400,  486,  486,
      486,  486,  486,  486,  203,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  407,  486,  486,
      486,  184,  486,  486,  486,  486,  266,  268,  142,  486,
      486,  396,  486,  397,  486,  486,  298,  176,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,

      486,  199,  486,  264,  486,  486,  486,  193,  486,  486,
      486,  486,  486,  486,  188,  486,  486,  405,  486,  486,
      486,  486,  410,  486,  486,  486,  287,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,    1,   29,   30,
       31,   32,    1,    1,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,    1,   64,   65,   66,   67,

       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[93] =
    {   0,
        1,    2,    3,    1,    2,    1,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        1,    1,    6,    6,    6,    6,    5,    6,    6,    6,
        6,    6,    6,    6,    6,    5,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1,
        1,    1,    6,    6,    6,    6,    6,    5,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1,    1

    } ;

static yyconst flex_int16_t yy_base[3237] =
    {   0,
        0,    0,   91,   97,    0,    0, 3431, 3432,  101, 3432,
     3432, 3432,   88, 3424, 3398, 3432, 3432, 3432, 3397, 3396,
     3432, 3395,   88,   87,  100,  119,  112,  113, 3379, 3432,
      100, 3393, 3392,    0,   33,   98, 3341,   77,  103, 3357,
     3348,  102, 3356,  150,  108,  141,   88,  144, 3347, 3339,
      129, 3338, 3343, 3432, 3432, 3383,  210,  132,  171,  172,
      179,  193, 3349,  138,  193, 3334,  174,  121,  216,  232,
      119,  243, 3327,  238,  264,  281,  278,  251,   62,  135,
     3338, 3432, 3432, 3432,    0, 3432, 3432,  162, 3332,  163,
     3432, 3405,    0, 3432, 3432, 3432, 3432,  351,    0, 3432,

      370,  389,  408, 3361, 3360, 3327, 3326, 3325, 3432, 3432,
     3432, 3432,    0, 3336, 3337, 3350, 3315, 3317, 3313, 3332,
     3327, 3319, 3342, 3323, 3326, 3318,    0,    0,    0, 3305,
     3313, 3324,  138,  100,  133,  241, 3304, 3313, 3308, 3316,
        0,    0,    0, 3337, 3336, 3294, 3298, 3296, 3299,    0,
     3288, 3300, 3297, 3305, 3291, 3333,    0,    0,    0, 3293,
     3286, 3432,    0,    0,    0,    0,    0, 3296,  189, 3300,
      238, 3287, 3298, 3288, 3291, 3298,    0,    0,    0,  254,
     3284, 3276, 3291,  261, 3282, 3285, 3288,  264,  279, 3279,
      203,  208,  274,  199, 3277,    0, 3287,  291,  317,  316,

     3277, 3267, 3282,  365,  268,  374, 3271, 3267,  373, 3271,
     3274, 3276, 3269,    0, 3264,  380,  422, 3270,  313, 3262,
     3277, 3262, 3262,  128, 3260,  294, 3264,  395,  238, 3258,
     3267,    0,    0,    0, 3261, 3256, 3245,  180, 3254,    0,
     3246,  301, 3247, 3263,  381,  401, 3254,  411, 3247,    0,
        0,    0, 3247, 3259,  415, 3254,  310, 3257, 3245, 3238,
      420, 3237, 3240,  412,  353, 3240,  422,  438, 3236, 3245,
      351,  375,    0,    0,    0,  430,  438, 3231, 3235,  434,
     3228, 3247, 3246, 3240,    0, 3241,    0,    0,  504,  523,
      533,  543, 3228, 3227, 3237, 3236, 3235, 3227, 3224, 3249,

     3228, 3216, 3230, 3213, 3213, 3225, 3247, 3216, 3222, 3223,
     3206, 3222, 3238,    0,    0,    0, 3202, 3216,    0,    0,
     3200, 3205, 3216, 3208, 3215, 3244,  388, 3201, 3212, 3206,
     3199, 3209, 3202, 3207, 3188, 3221, 3223, 3196, 3189, 3197,
     3182,    0, 3185,    0, 3191, 3186,    0, 3178, 3182, 3181,
     3181, 3189, 3191, 3190, 3176,    0,    0,    0, 3186, 3176,
     3184, 3170,  432, 3177, 3164, 3164, 3163, 3165, 3171, 3159,
     3173,  341,  240, 3176, 3167, 3172, 3173, 3165, 3167, 3152,
     3151, 3156, 3163, 3165, 3166, 3162, 3163, 3145, 3142, 3149,
     3155, 3140, 3138, 3152, 3151,    0, 3140, 3151,  374, 3150,

     3139, 3138, 3136, 3188, 3132,  408,  459, 3127, 3141,  428,
     3130, 3139, 3129, 3127, 3136, 3139, 3121,  501, 3123, 3117,
     3122,    0,    0,    0, 3119, 3125, 3128, 3130,    0, 3126,
     3125, 3125, 3171, 3113, 3112,  321, 3120,  444, 3110, 3115,
     3113,  400, 3107, 3115, 3099, 3113, 3104, 3114, 3099, 3113,
     3105, 3103, 3092,  456, 3095, 3090, 3094, 3101, 3086, 3102,
     3099, 3088, 3081,  495, 3101, 3091, 3087, 3078, 3091, 3087,
        0, 3094,  496,  450, 3072, 3071, 3072,  506, 3075, 3084,
      513, 3083,  465, 3069, 3067, 3066, 3071, 3081, 3078, 3077,
     3062, 3066, 3078, 3059, 3072, 3060, 3057,  519,    0, 3060,

     3052, 3063, 3051, 3055, 3067, 3065, 3067, 3054, 3046, 3056,
     3054, 3046, 3049, 3048,  571,  581, 3055, 3054, 3052, 3051,
     3050, 3031, 3081, 3078, 3043, 3045, 3038, 3028, 3040, 3028,
     3030, 3023, 3025, 3022, 3022, 3035, 3069, 3029, 3030, 3036,
        0, 3017, 3028, 3013, 3058, 3030, 3015, 3029, 3014, 3018,
     3021, 3005, 3019, 3005, 3013, 3020, 3011, 3019,    0, 3006,
        0, 2999, 3015, 3006, 2994,    0, 3055, 3012, 3002, 3010,
     2991, 3004, 2995,    0, 2995,  501, 2985,  546, 2999,    0,
     2994, 2983, 2993, 2991, 2985, 2997, 2994, 2994, 2983, 2974,
        0, 2984, 2978, 2980, 2977,    0, 2975, 2968, 2967, 2981,

        0, 2973, 2964, 2962, 2970, 2956, 3038, 2970, 2960,    0,
     2962, 2958,    0, 2957, 2969,    0, 2952, 2952, 2971, 2969,
        0, 2969,    0, 2959, 2948, 2945, 2960, 2955, 2956, 2953,
     2956, 2956, 2945, 2953, 2939, 2942, 2936, 2949, 2940, 2934,
     2939, 2932, 2929, 2947, 2933, 2933, 2941, 2932, 2942,  579,
     2986,    0, 2932, 2940, 2934, 2920, 2917, 2923,    0,    0,
     2922, 2922, 2927,    0,    0, 2917, 2912, 2929, 2924, 2907,
     2915, 2926, 2910, 2919, 2903, 2903, 2902, 2901, 2899, 2909,
        0, 2897, 2898, 2893, 2905, 2898, 2911,  542, 2892, 2905,
     2900, 2908, 2902, 2888, 2893, 2892, 2891,    0, 2897, 2896,

        0, 2895, 2879, 2889, 2878, 2890, 2886, 2875, 2892, 2887,
        0, 2882, 2881,    0,    0, 2878,  445, 2870, 2878, 2867,
     2861, 2865,    0, 2882, 2881, 2857, 2865, 2872, 2873, 2876,
     2861, 2872, 2859, 2855, 2851, 2853,    0, 2857,   58,   90,
      155,  228,  270,  288,  389,  434,  484,  522,  534,  567,
      546,  538,  548,  545,  531,  557,  554,  550,  572,  553,
        0,  545,  578,  565,  549,  596,  568,  561,  566,  585,
      555,  560,  602,  561,  565,  569,  570,  580,  610,  567,
      580,  565,  571,  581,  578,    0,  569,  572,    0,  626,
      579,  581,  570,  595,  596,    0,  593,  579,  599,  598,

      588,  588,  586,  602,  606,  598,  595,  605,    0,  591,
      600,  612,  599,  601,  611,  613,  610,    0,  615,  612,
      608,  618,  615,  612,  684,    0,  608,  625,  620,  614,
      633,    0,  634,  630,  627,  619,    0,  632,  636,  635,
      637,  629,  642,  626,  632,  645,  622,  629,  631,  647,
      644,  633,  635,  650,  639,  636,  643,  659,    0,    0,
      659,  660,    0,  644,  647,  650,    0,  645,  662,  649,
      659,  661,  650,  651,    0,  664,  660,    0,  663,  658,
      657,  666,  660,  677,    0,  663,  668,  675,  664,    0,
      674,  678,  684,  685,  673,  678,  675,    0,    0,  693,

      695,  681,  674,  679,  699,  695,  700,  697,    0,  685,
        0,  704,  702,    0,  692,  693,  689,  706,  696,  699,
      698,  699,  707,  697,  716,  703,  710,  711,    0,  718,
      713,  714,  706,    0,    0,  723,  708,  718,  709,  724,
      721,    0,  717,    0,  731,  733,  730,  764,  765,  729,
      730,  721,  722,  729,  753,  718,  724,  727,  743,  747,
      766,  744,  747,  747,  738,  754,  785,  744,  756,  743,
      745,  755,  743,  762,  752,    0,  755,  751,  785,  762,
      761,  747,  790,  766,  758,  762,  769,  760,  758,  757,
      757,  764,  776,  772,  770,  776,  775,    0,  767,  761,

      768,  783,  775,  770,  790,  772,  772,  782,  788,  795,
      778,  784,  792,    0,  791,  796,  799,  861,  862,  801,
      788,  804,  799,  806,  790,    0,  798,  812,  809,  799,
      814,  807,  802,    0,  815,  813,    0,  806,  806,  817,
      814,  815,  821,  821,  823,  817,  829,  826,    0,  857,
      824,  827,  830,  816,    0,  818,    0,  817,  826,  824,
      884,  823,    0,  844,  844,  845,  840,  827,  844,    0,
      849,  838,  839,  840,  849,    0,  855,  856,    0,  852,
      853,  850,    0,    0,  846,  841,  844,  858,  849,  851,
        0,  861,  848,  848,  855,  864,  857,  867,  873,  861,

        0,  855,    0,    0,  856,  935,  873,  879,  880,  876,
      862,  878,  870,  878,  881,  878,  883,  875,  876,  886,
      891,  882,  880,  894,  883,  885,    0,  878,  894,  888,
      882,  887,  890,  899,  901,  889,  890,  904,  905,  902,
      908,  892,  914,  956,  917,  934,  920,  943,  901,  909,
      912,  925,  923,  913,  951,  948,  930,  911,  919,  928,
      930,  926,  952,    0,  918,  936,  950,  952,  933,  937,
      922,  943,  973,    0,  927,  947,  947,  941,  946,  937,
      937,  934,  953,  955,  942,  932,  958,  940,    0,  940,
      940,  953,  963,  959,    0,  960,  954,  962,  961,    0,

      954,    0,  965,  968,  954,    0,  957, 1032,  961, 1017,
      977,  973,  976,  965,  975,  976,  963,  966,  967,  971,
      978,  985,  975,  989,  979,  972, 1051, 1055,  981,  998,
      980,  987,  987,  983,  979,    0,  997,  985, 1002, 1003,
     1000, 1010, 1011, 1003, 1008,  994, 1003,    0, 1012, 1004,
     1007, 1015, 1021, 1022, 1019, 1020, 1010, 1014, 1009, 1015,
     1029, 1005, 1026, 1013, 1019, 1031,    0, 1030,    0, 1032,
     1036, 1038, 1031, 1035, 1027, 1038, 1035, 1036, 1027, 1046,
     1030,    0, 1040, 1050, 1051,    0, 1033, 1034, 1038, 1052,
     1055, 1059, 1046, 1049,    0, 1057, 1051, 1122, 1060, 1041,

     1067, 1067, 1064, 1070, 1066, 1051, 1053, 1135, 1066, 1067,
     1066, 1068, 1078, 1082, 1070, 1095, 1067, 1066, 1099, 1070,
     1107, 1076, 1079, 1087,    0, 1069, 1076, 1096, 1077, 1118,
     1112, 1092, 1089, 1103, 1104, 1104, 1131, 1091, 1107,    0,
     1124,    0, 1110, 1091, 1099, 1098, 1133, 1112, 1096, 1104,
     1113, 1112, 1114, 1105, 1103, 1145,    0, 1124, 1124, 1117,
        0, 1107, 1114, 1113,    0, 1116, 1131, 1129, 1133, 1120,
     1122, 1121, 1132, 1120, 1130, 1174, 1137, 1129, 1137,    0,
        0, 1126, 1139,    0, 1141,    0, 1147, 1133, 1146, 1138,
     1126, 1152, 1150, 1149,    0, 1142, 1217, 3432, 1137, 1160,

     1149, 1141, 1146, 1140,    0,    0, 1148,    0,    0, 1164,
     1153, 1154, 1167, 1159, 1152, 1153, 1170, 1157,    0,    0,
     1171, 1175, 1181, 1182, 1164, 1180,    0, 1178, 1183, 1171,
        0, 1192, 1177,    0, 1189,    0, 1238, 1194, 1184, 1192,
     1191, 1197,    0, 1189, 1189, 1185, 1185, 1205, 1193, 1203,
     1208, 1191, 1192, 1193, 1193, 1205, 1199, 1211, 1238, 1198,
        0, 1215, 1220, 1220, 1280, 1223, 1212, 1206, 1207, 1224,
     1228, 1215, 1212, 1228, 1229, 1221, 1222, 1224, 1262, 1223,
     1260, 1235, 1232, 1221, 1241, 1238, 1241, 1225, 1246,    0,
        0,    0, 1238, 1236, 1242, 1276, 1231, 1237, 1244, 1269,

     1281, 1244, 1257, 1246, 1247, 1287, 1287, 1242, 1282, 1251,
     1277, 1252, 1259,    0,    0, 1269, 1271, 1260, 1253, 1249,
     1262, 1274, 1263, 1270, 1261, 1270, 1280, 1265, 1266, 1268,
        0, 1283, 1275, 1286, 1290, 1278, 3432,    0, 1278, 1285,
     1295, 3432, 1354, 1283, 1279, 1298, 1295, 1344, 1287, 1286,
        0, 1292,    0, 1287, 1294, 1305, 1303, 1307, 1298, 1305,
     1312,    0, 1311, 1317, 1312, 1313, 1320, 1320, 1318, 1319,
     1306, 1317, 1326, 1308, 1308, 1310, 1322, 1311, 1324, 1320,
     1322, 1327, 1337, 1333, 1339, 1339, 1323, 1338, 1343, 1388,
     1325, 1325, 1339, 1336, 1328, 1345, 1331, 1352, 1353, 1336,

     1352, 1344, 1345, 1338, 1344,    0, 1345, 1356,    0, 1362,
     1339,    0,    0, 1361, 1362, 1347, 1354, 1363, 1365, 1351,
     1372, 1358, 1352, 1372, 1371, 1366, 1367, 1379, 1381, 1402,
     1363, 1412, 1404,    0,    0, 1378, 1381, 1376, 1372, 1382,
     1404, 1378, 1409, 1387, 1415, 1388, 1384, 1379, 1388, 1380,
     1398, 1423, 1431, 1405, 1406,    0, 1394, 1394, 1409, 1422,
     1396,    0, 1402, 1402, 1412, 1415, 1420, 1413,    0,    0,
     1408, 1421, 1411, 1421, 1405,    0, 1427, 1424, 1410, 1422,
     1412, 1419, 1415, 1414, 1429, 1417, 1434, 1427, 1431, 1428,
     1427, 1424, 1424,    0,    0,    0,    0,    0, 1444, 1437,

     1427, 1436, 1435, 1449, 1446, 1440, 1444, 1440, 1440, 1451,
        0, 1449, 1452, 1453, 1452, 1442, 1444, 3432,    0, 1443,
     1448, 1460, 1453, 1449, 1455, 1457, 1457, 1466, 1456, 1467,
     1472, 1456, 1459, 1459, 1475,    0, 1460, 1527, 1469, 1473,
     1467, 1483, 1477,    0, 1485, 1473, 1491, 1491, 1478, 1496,
     1498, 1481, 1494, 1483, 1483, 1546,    0, 1490, 1494, 1487,
     1505, 1491, 1495, 1502, 1509, 1491, 1505, 1497, 1502, 1512,
     1498, 1505, 1539, 1540, 1552, 1553, 1535, 1520, 1514, 1518,
     1554, 1523, 1525, 1529, 1527, 1514, 1514, 1523, 1533, 1537,
        0, 1537, 1557, 1525, 1545, 1535, 1525, 1560, 1569, 1567,

     1567, 1569, 1569, 1552, 1542, 1552, 1540, 1559,    0, 1540,
     1539, 1548, 1545, 1552, 1562, 1563, 1563, 1563,    0, 1569,
     1565, 1557, 1630, 1555, 1559, 1557, 1556, 1557, 1575, 1574,
     1575, 1560, 1577, 1569, 1569, 1581, 1586, 1578, 1568, 1574,
     1581, 1580, 1586, 1579, 1593, 1580, 1592, 1597, 1584,    0,
     1598, 1581, 1582, 1601, 1583, 1590, 1580,    0, 1588, 1605,
     1607, 1604, 1599, 1606, 1589, 1604, 1608, 1600, 1598, 1593,
     1604, 1604, 1600, 1613,    0, 1618, 1616, 1620, 1612, 1668,
     1611, 1628,    0,    0, 1610, 1626, 1619, 1620, 1631, 1632,
     1619, 1636, 1636, 1622, 1618, 1644,    0,    0, 1631, 1645,

     1642, 1643, 1648, 1646, 1639, 1651, 1648, 1651, 1655, 1635,
     1655, 1650, 1653, 1672, 1657, 1674, 1659, 1682, 1683, 1689,
     1663, 1686, 1658, 1655, 1667, 1654,    0, 1668, 1657, 1658,
     1664, 1659, 1675,    0, 1667, 1663, 1677, 1663, 1680, 1666,
     1682, 1668,    0, 1715, 1720, 1691, 1719, 1693, 1689, 1692,
     1678, 1684, 1738, 1698, 1695, 1759, 1697, 1702, 1699, 1705,
     1701, 1695, 1689,    0, 1704, 1690, 1706, 1698, 1708, 1714,
     1697, 1696, 1699, 1711, 1707,    0,    0, 1716, 1716, 1703,
     1708, 1715, 1711, 1711, 1727, 1719, 1729, 1712, 1728, 1732,
     1717, 1733, 1717, 1731, 1732, 1720, 1730, 3432,    0, 1739,

     1736, 1733, 1743, 1744, 1745, 1726, 1733, 1734, 1728, 1737,
     1731, 1732, 1748, 1750, 1750, 1754, 1744, 1740, 1745, 1756,
     1753, 1763, 1764,    0, 1760, 1747, 1749, 1768, 1756, 1749,
     1757, 1759, 1764, 1773, 1755, 1762, 1772, 3432, 1772, 1776,
     1761, 1776, 1770, 1769, 1779, 1780, 1774, 1775, 1788, 1785,
     1785, 1771, 1777, 1773, 3432, 1782, 1779, 3432, 1784, 1824,
     1825, 1810, 1777, 1786, 1801, 1813, 1786, 1789, 1792, 1837,
     1807, 1804, 1805, 1795, 1811, 1813, 1800, 1803, 1812, 1812,
     1801, 1805, 1839, 1849, 1851, 1850, 1853, 1813, 1822, 1822,
     1830, 1870, 1818, 1815, 1828, 1829, 1832, 1818, 1825, 1827,

     1821, 1836, 1822, 1843, 1839, 1826,    0, 1832, 1844, 1848,
     1842, 1852, 1835, 1833, 1850, 1837, 1852, 1844, 1844, 1841,
     1847, 1849, 1850, 1849, 1866, 1858, 1850, 1854, 1858, 1867,
     1852, 1853, 1870, 1872, 1856, 1859, 1864, 1860, 1867, 1862,
     1867, 1876, 1879, 1871, 1886, 1882, 1883, 1871, 1885, 1875,
     1883, 1888, 1885, 1895, 1878, 1893, 1928, 1985, 1881, 1900,
     1900, 1881, 1887, 1886, 1897, 1902, 1886, 1896, 1902, 1905,
     1900, 1906, 1898, 1897, 1906, 1914, 1901, 1921,    0, 1917,
        0, 1910, 1915, 1907, 1911, 1913, 1920, 1928, 1940, 1931,
     1960, 1961, 1965, 1956, 1955, 1924, 3432,    0, 1970, 1941,

     1929, 1959, 1934, 1936, 1937, 1937,    0, 1944, 1968, 1953,
     1954, 1960, 1962, 1963, 1950, 1992, 1979, 1984, 1981, 1987,
     1967,    0, 1948, 2001, 1975, 1956, 1970, 1970, 1971, 1978,
     1977, 1963, 1979, 1964, 1987, 1971, 1974, 1972, 1976, 1981,
     1995, 1989, 1997, 2004, 1999, 1995, 2011, 2012, 1995, 3432,
     2015, 2013, 2017,    0,    0, 3432, 2003, 2010, 2002, 2008,
     2003, 2023, 2016,    0, 2021,    0,    0, 2022, 2028, 2020,
     2030,    0, 2011, 2017, 2013, 2020,    0, 2016, 2032, 2032,
     2020, 2032, 2039, 2022, 2023, 2029, 2025, 2040, 2038, 2042,
     2048, 2093, 2094, 2048, 2051, 2045, 2051, 2099, 2055,    0,

     2055, 2058, 2051, 2061, 2106, 2107, 2108, 2064,    0, 2054,
     2059, 2065, 2113, 2070, 2071,    0, 2071, 2118, 2068, 2069,
     2069, 2079,    0, 2072, 2061, 2063, 2065, 2076, 2072, 2073,
     2083, 2073, 2084, 2071, 2083, 2081, 2089, 2086, 2140, 2079,
     2089, 2097, 2100, 2086, 2081, 2096, 2086, 2105,    0, 2087,
     3432, 2088, 2120, 2121, 2150, 2133, 2091, 2093, 2105, 2096,
     2103,    0, 2103, 2114, 2100,    0, 2101, 2121, 2104,    0,
     2136, 2150, 2152,    0, 2144,    0, 2145,    0, 2146, 2116,
     2131, 2123, 2119, 2160, 2135, 2131, 2132, 2126, 2138, 2122,
     2132, 2128, 2130, 2138, 2144, 2141, 2142, 2128, 2149, 2130,

     2137, 2140, 2152, 2140, 2141, 2142,    0, 2137, 2158, 2153,
     2140, 2167, 2159, 2150, 2160, 2151, 2142, 2148, 2155, 2156,
     2157, 2169, 2158, 2159, 2170, 2172, 2172,    0, 2160, 2179,
     2169, 2173, 2165, 2164,    0,    0, 2182, 2186, 2168, 2188,
     2175, 2172,    0,    0,    0, 2171,    0,    0, 2192,    0,
     2180,    0,    0, 2191,    0, 2182,    0,    0,    0, 2176,
     2181,    0,    0, 2198,    0, 2196, 2187,    0,    0,    0,
     2192, 2187, 2198,    0, 2191, 2205, 2191, 2202, 2203, 2200,
     2204, 2192, 2213, 2205, 2209, 2208, 2203, 2213, 2199, 2217,
     2264, 2222, 2219, 2207, 2205, 2223, 2209, 2224,    0, 2212,

     2211, 2212, 3432, 3432, 3432, 2244, 2214, 2226, 2234, 2218,
     2219, 2257, 2240,    0, 2216, 2217, 2224, 2224, 2236, 2228,
     2258, 2260, 2261, 2230, 2273, 2233, 2251, 2236, 2279, 2242,
     2245, 2253, 2247, 2251, 2258, 2242, 2247, 2255, 2245, 2252,
     2264, 3432, 2250, 2261, 2250, 2266, 2260, 3432, 2331, 2267,
     2260, 2319, 2268, 2269,    0,    0, 2258, 2273, 2262, 2278,
        0, 2274, 2264, 2276, 2277, 2269, 2269, 2275, 2284, 2275,
     2271, 2277,    0, 2276, 2290, 2281, 2296, 2289, 2281, 2282,
        0, 2293, 2299, 2302,    0, 2286, 2303, 2285, 2306,    0,
     2300, 2291,    0, 2308, 2297,    0, 2312, 2293, 2313, 2294,

     2299,    0, 2299, 2305, 2320, 2321, 2302, 2309, 2310,    0,
     2318,    0, 2321,    0,    0,    0, 2308, 2315, 2321, 2317,
     2311,    0, 2319, 2329, 2326, 2327, 2365, 2322, 2336, 2335,
        0, 2322, 2334, 2359, 2373, 2334,    0, 2338, 2346, 2331,
     2362, 2362, 2363, 2353, 2340, 2339, 2355, 2339, 2379, 2356,
     2356,    0, 2356, 2359,    0, 2363, 2359, 2353, 2361, 2360,
     2348, 2368,    0, 2352,    0, 2366, 2359, 2361, 2356, 2374,
     2361, 2372, 2366, 2364, 2368, 2381, 2363, 2362, 2369, 2366,
     2372, 2373, 2373, 2374, 2371, 2391,    0, 2380,    0, 2368,
     2381, 2377, 2376, 2382, 2393, 2394,    0,    0, 2395, 2381,

     2397, 2399, 2384, 2381, 2405, 2402, 2404,    0, 2406, 2409,
     2387,    0, 3432, 2393, 2406, 2396, 2396, 2401, 2410, 2413,
     2419, 2464, 2412, 2402, 2420, 2415, 2413, 2423, 2415, 2425,
     2426, 2470, 2410, 3432, 2414, 2415, 2415, 2423, 2421, 2422,
     2432, 2434, 2425,    0, 2454, 2455, 2465, 2441, 2433, 2434,
     2432,    0, 2443, 3432, 2449, 2439, 2449, 2448, 2448, 2450,
     2435, 2441, 2437, 2443, 2459, 2455, 2456, 3432, 2442, 2445,
     2446, 2460, 2452, 2446, 2449, 2448, 2458,    0,    0, 2464,
     2465, 2454, 2454,    0, 2466, 2455, 2477, 2473, 2479, 2471,
     2467, 2469, 2482, 2484, 2476, 2480, 2486,    0,    0, 2488,

     2483, 2489,    0, 2491,    0, 2483, 2493, 2493, 2486, 2484,
        0, 2478, 2479, 2541, 2485, 3432, 2490, 2482, 2482, 2499,
     2504, 3432, 3432, 3432, 2486, 2548, 2493, 2504, 2509, 2497,
     2494, 2507, 2496, 2497, 2546, 2547, 2504, 2501, 2519, 2520,
     2504, 2523, 2503, 2525, 2525, 2527,    0,    0, 2520, 2511,
     2521, 2519, 2511, 2513,    0, 2521, 2526, 2516,    0,    0,
     2518, 2518, 2521, 2519, 2541, 2542, 2524, 2526, 2525, 2527,
     2533, 2534, 2535, 2535, 2532, 2547, 2550, 2538, 2540,    0,
     2556, 2554,    0,    0, 2555, 2537, 2541, 2541, 2536, 2558,
     2545, 2545,    0, 2552, 2567,    0, 2549, 2569, 2550, 3432,

     2567, 2558, 2554, 2554, 2555,    0, 2562,    0, 2577, 2600,
     2601, 2577, 2576, 2579, 2569, 2584, 2582, 2572, 2584, 2569,
     2576,    0,    0, 2575,    0, 2577, 2585,    0, 2568, 2586,
        0, 2578, 2592, 2579, 2581, 2582, 2600, 2587, 2598,    0,
     2589, 2585, 2591, 2593,    0, 2594, 2601, 2654,    0, 2608,
     2609,    0, 2608, 2594, 2606, 2611, 2599,    0, 2609, 3432,
     2655,    0, 2617, 2612,    0, 2615, 2642, 2619, 2624, 2621,
     2655, 2645, 2646, 2612, 2618, 2627, 2630, 2662, 2627, 2627,
     2619, 2637, 2634, 2639, 2641, 2633, 2628, 2629, 2642, 2641,
        0,    0, 2646, 2647, 2635, 2634, 2633, 2648, 2634, 2650,

     2655, 2636, 2648,    0,    0,    0, 2658, 2641, 2645,    0,
     2660, 2656, 2663, 2656, 2643, 2691, 2678,    0, 2665, 2650,
     2655, 2682, 2683, 2668, 2669, 2662, 2671, 2662, 2673, 2659,
        0,    0, 2676, 2662, 2700, 2663, 2680, 2671, 2685, 2668,
     2668, 2669, 2681, 2682, 2691, 2688,    0, 2689, 2679, 2677,
     2683, 2679, 2694,    0, 2686, 2695, 2682, 2698, 2699, 2687,
        0, 2686, 2688, 2694, 2721, 2722, 2698, 2698, 2708,    0,
     2700, 2712,    0,    0, 2697,    0,    0, 3432, 2697, 2706,
     2700, 2715, 2716, 2703, 2720, 2704, 2706, 2707, 2712,    0,
     2721, 2709, 2716, 2728, 2718, 2718, 2731, 2735, 2731,    0,

        0, 2717,    0,    0, 2733, 2719, 2726, 2721, 2731,    0,
     2742,    0,    0,    0,    0, 2729, 2745, 2737,    0,    0,
     2738, 2748, 2731, 2743, 2746, 2747, 2753, 2743, 2735, 2752,
     2739, 2744,    0, 2739, 2742,    0, 2749, 2742, 2804, 2749,
     2751, 2753, 2762, 2748,    0, 2750, 2812,    0, 2756, 2767,
     2758, 2754, 2775, 2761,    0, 2759, 2774, 2765, 2760, 2780,
     2768, 2775, 2765, 2822, 2774, 2769, 2776,    0, 2811, 2778,
     2776, 2792, 2774, 2775, 2771, 2789,    0,    0,    0, 2792,
     2789,    0, 2785,    0, 2784, 2820,    0,    0, 2793, 2783,
     2786, 2802, 2803, 2798, 2819, 2796, 2802, 2810, 2801, 2795,

     2811,    0, 2794,    0, 2802, 2836, 2813,    0, 2806, 2817,
     2832, 2809, 2823, 2819,    0, 2820, 2807,    0, 2813, 2808,
     2809, 2812,    0, 2830, 2823, 2819,    0, 3432, 2896, 2902,
     2908, 2911, 2912, 2918, 2924, 2930
    } ;

static yyconst flex_int16_t yy_def[3237] =
    {   0,
     3228,    1, 3229, 3229, 3230, 3230, 3228, 3228, 3228, 3228,
     3228, 3228, 3231, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3232, 3232,   28, 3228,
     3228, 3228, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3228, 3228, 3228, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3228, 3228, 3228, 3234, 3228, 3228, 3228, 3228, 3231,
     3228, 3231, 3235, 3228, 3228, 3228, 3228, 3228, 3236, 3228,

     3228, 3228, 3228,   28,   28, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3231, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3234, 3228, 3235, 3236, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3228, 3228, 3228, 3228, 3228, 3228, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3228, 3228, 3228,
     3228, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233,
     3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3228, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3228, 3228, 3228, 3228, 3228,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3228, 3228, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3228, 3233, 3228, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3228, 3228, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3228, 3228,
     3228, 3228, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3228, 3228, 3233, 3228, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3228, 3233, 3228, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3228, 3228, 3228, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3228, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3228, 3228, 3228, 3228, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3228, 3228, 3233, 3228, 3228, 3233, 3233, 3233,
     3233, 3228, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3228,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3228, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3228, 3228, 3228, 3228, 3228,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3228, 3228, 3233, 3228, 3233, 3233, 3233, 3228,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233, 3233,
     3228, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3228, 3228, 3228, 3228, 3228, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3228, 3233,
     3228, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233,
     3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233,

     3233, 3228, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233,
     3228, 3228, 3233, 3228, 3233, 3233, 3233, 3228, 3233, 3233,
     3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233,
     3233, 3233, 3228, 3228, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3228,
     3228, 3233, 3228, 3233, 3228, 3233, 3233, 3233, 3233, 3233,
     3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3228, 3228, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233,
     3233, 3233, 3233, 3233, 3228, 3228, 3233, 3228, 3233, 3228,
     3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228,
     3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233,

     3233, 3233, 3233, 3228, 3228, 3233, 3233, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3228, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3228, 3233, 3233, 3233, 3233, 3233, 3228, 3228, 3233,
     3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3228, 3228, 3228, 3228, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3228, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3228, 3228, 3233, 3233, 3233, 3233, 3233, 3228,
     3228, 3228, 3228, 3228, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3228, 3233, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3228, 3228, 3233, 3233, 3233, 3233,
     3233, 3228, 3228, 3228, 3228, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3228, 3233, 3233, 3233, 3233, 3233, 3228,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3228, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,

     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233, 3233,
     3233, 3233, 3233, 3233, 3233, 3233, 3233,    0, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228
    } ;

static yyconst flex_int16_t yy_nxt[3525] =
    {   0,
        8,    9,   10,   11,    9,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   25,
       26,   27,   28,   25,   25,   25,   29,   25,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   34,   43,   44,   45,   46,   34,   47,   34,   48,
       49,   50,   51,   52,   53,   34,   34,   34,   54,    8,
       55,   56,   34,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   34,   82,
       83,   84,   86,   86,   91,   86,  114,   86,   86,   86,

      115,   86,   88,   86,   99,   88,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  101,  100,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  101,  101,
      109,  110,  280,  281,  944,  101,  103,  104,  102,  102,
      102,  102,  102,  102,  105,  102,  102,   92,  103,  103,
      116,  120,  132,  121,  123,  103,  136,  106,  107,  148,
      122,  117,  150,   88,  945,  124,   88,  103,  149,   91,
      138,  317,   89,  156,  125,  139,  144,  133,  134,  103,
      103,  118,  318,  126,  223,  140,  103,  240,  224,  127,
      128,  129,  225,  145,  141,  142,  143,  196,  226,  180,

      211,  319,  241,  181,  212,  213,  282,  151,  146,  182,
      429,  152,  430,  137,  320,  157,  158,  159,  147,  183,
      184,  946,   92,  283,  314,  315,  316,  153,  163,  164,
      165,  166,  167,   89,  185,  190,  219,  220,  186,  191,
      221,  187,  197,  192,  590,  222,  446,   91,  188,  193,
      198,  189,  194,  199,  340,  200,  205,  201,  202,  195,
      447,  214,  375,  203,  206,  204,  341,  207,  215,  216,
      208,  369,  168,  209,  217,  169,  170,  370,  227,  228,
      357,  358,  376,  229,  171,  172,  173,  230,  371,  372,
      174,  175,  176,  231,  235,  236,  177,  178,  179,  237,

       92,  439,  232,  233,  234,  248,  242,  343,  249,  238,
      243,  947,  344,  244,  276,  239,  345,  351,  277,  440,
      245,  591,  278,  246,  250,  251,  252,  253,  279,  254,
      352,  255,  392,  393,  256,  257,  353,  948,  258,  362,
      363,  259,  373,  260,  263,  364,  261,  262,  264,  374,
      365,  265,  266,  270,  271,  949,  366,  432,  267,  272,
      379,  268,  367,  433,  273,  274,  275,  380,  269,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  384,
      381,  450,  385,  451,  382,  473,  474,  103,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  383,  422,

      423,  424,  654,  655,  588,  101,  290,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  497,  103,  589,
      487,  291,  498,  291,  488,  103,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  389,  290,  394,  950,
      399,  616,  499,  390,  400,  407,  500,  391,  395,  923,
      401,  408,  454,  617,  410,  411,  103,  412,  413,  414,
      396,  455,  409,  546,  435,  415,  416,  662,  456,  417,
      547,  663,  457,  418,  460,  419,  436,  437,  458,  461,
      468,  438,  624,  478,  951,  625,  462,  479,  484,  469,
      463,  480,  464,  485,  630,  470,  490,  471,  486,  420,

      481,  492,  491,  503,  501,  508,  657,  924,  631,  493,
      502,  509,  504,  577,  578,  658,  579,  952,  505,  697,
      698,  494,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  675,  626,  710,  711,  515,  676,  515,  627,
      290,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  290,  639,  686,  695,  702,  707,  687,  640,  696,
      708,  797,  726,  865,  798,  953,  703,  727,  704,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  800,
      898,  954,  955,  956,  957,  958,  959,  801,  960,  961,
      962,  963,  964,  899,  965,  966,  802,  967,  968,  969,
      970,  971,  972,  973,  974,  975,  976,  977,  979,  980,
      981,  982,  983,  984,  985,  986,  987,  988,  989,  990,
      866,  991,  992,  993,  978,  996,  997,  998,  999, 1000,
     1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
     1004, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1005,
     1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031,
     1032, 1033,  994,  995, 1034, 1035, 1036, 1038, 1039, 1040,

     1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
     1051, 1052, 1053, 1054, 1055, 1037, 1056, 1057, 1058, 1059,
     1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070,
     1071, 1066, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
     1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
     1030, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
     1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
     1109, 1110, 1111, 1112, 1114, 1115, 1113, 1116, 1117, 1118,
     1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,

     1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
     1149, 1151, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
     1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
     1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
     1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
     1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
     1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
     1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1220,
     1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,

     1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
     1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
     1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
     1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
     1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
     1289, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
     1300, 1301, 1302, 1303, 1304, 1290, 1305, 1306, 1308, 1309,
     1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
     1307, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
     1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,

     1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
     1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
     1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
     1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1379,
     1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
     1391, 1392, 1393, 1394, 1395, 1396, 1397, 1399, 1380, 1397,
     1400, 1398, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
     1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1378,
     1418, 1419, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428,
     1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,

     1439, 1425, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
     1450, 1451, 1452, 1453, 1454, 1455, 1448, 1449, 1456, 1457,
     1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
     1468, 1469, 1470, 1471, 1472, 1473, 1397, 1474, 1475, 1397,
     1476, 1398, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
     1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
     1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
     1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
     1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
     1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,

     1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
     1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1397, 1553,
     1559, 1397, 1560, 1398, 1554, 1555, 1561, 1562, 1563, 1564,
     1565, 1566, 1567, 1568, 1569, 1556, 1570, 1571, 1572, 1578,
     1573, 1557, 1574, 1580, 1558, 1581, 1582, 1575, 1583, 1584,
     1585, 1586, 1576, 1577, 1587, 1588, 1589, 1579, 1590, 1591,
     1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601,
     1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
     1612, 1613, 1614, 1615, 1616, 1618, 1619, 1620, 1621, 1622,
     1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,

     1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
     1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1652, 1653,
     1654, 1655, 1656, 1657, 1659, 1660, 1651, 1661, 1662, 1663,
     1664, 1665, 1658, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
     1673, 1675, 1617, 1676, 1677, 1678, 1679, 1674, 1680, 1681,
     1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
     1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701,
     1702, 1703, 1704, 1705, 1706, 1708, 1709, 1710, 1711, 1712,
     1713, 1714, 1715, 1716, 1707, 1717, 1718, 1719, 1720, 1721,
     1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731,

     1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
     1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
     1752, 1753, 1754, 1755, 1756, 1757, 1758, 1761, 1759, 1762,
     1763, 1764, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
     1774, 1775, 1760, 1776, 1765, 1777, 1779, 1780, 1781, 1782,
     1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
     1793, 1794, 1795, 1796, 1778, 1797, 1798, 1799, 1804, 1805,
     1806, 1807, 1808, 1809, 1800, 1801, 1802, 1810, 1811, 1812,
     1813, 1803, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
     1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,

     1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
     1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
     1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861,
     1862, 1863, 1864, 1865, 1866, 1867, 1868, 1875, 1869, 1870,
     1876, 1877, 1878, 1871, 1879, 1880, 1881, 1872, 1882, 1883,
     1884, 1885, 1886, 1873, 1874, 1887, 1888, 1889, 1890, 1891,
     1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
     1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
     1912, 1913, 1914, 1916, 1918, 1919, 1922, 1923, 1925, 1926,
     1927, 1928, 1929, 1930, 1931, 1932, 1933, 1920, 1921, 1934,

     1935, 1915, 1917, 1924, 1936, 1937, 1938, 1939, 1940, 1941,
     1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
     1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
     1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971,
     1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
     1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
     1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
     2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
     2012, 2014, 2015, 2016, 2017, 2018, 2013, 2019, 2020, 2021,
     2022, 2024, 2025, 2026, 2023, 2027, 2028, 2029, 2031, 2032,

     2030, 2033, 2034, 2036, 2037, 2038, 2039, 2040, 2041, 2042,
     2043, 2044, 2045, 2046, 2047, 2048, 2049, 2035, 2050, 2051,
     2052, 2053, 2054, 2055, 2056, 2058, 2059, 2060, 2061, 2062,
     2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072,
     2057, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
     2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
     2092, 2093, 2094, 2095, 2097, 2098, 2099, 2100, 2101, 2102,
     2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112,
     2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
     2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132,

     2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142,
     2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
     2153, 2096, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
     2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
     2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
     2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
     2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201,
     2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213,
     2202, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222,
     2203, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2231, 2232,

     2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242,
     2230, 2245, 2243, 2246, 2247, 2248, 2249, 2250, 2251, 2252,
     2253, 2254, 2255, 2256, 2257, 2244, 2258, 2259, 2260, 2261,
     2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271,
     2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281,
     2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291,
     2292, 2323, 2324, 2325, 2326, 2327, 2293, 2328, 2329, 2330,
     2331, 2332, 2294, 2333, 2334, 2295, 2335, 2336, 2337, 2338,
     2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348,
     2349, 2350, 2351, 2296, 2352, 2297, 2353, 2354, 2298, 2355,

     2356, 2357, 2299, 2300, 2301, 2358, 2302, 2359, 2360, 2361,
     2362, 2363, 2364, 2365, 2303, 2366, 2304, 2305, 2367, 2368,
     2369, 2370, 2371, 2306, 2372, 2373, 2374, 2307, 2375, 2376,
     2377, 2378, 2308, 2379, 2380, 2381, 2382, 2384, 2385, 2386,
     2309, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2310, 2394,
     2311, 2395, 2312, 2383, 2396, 2313, 2397, 2398, 2314, 2315,
     2316, 2317, 2399, 2318, 2400, 2319, 2401, 2320, 2402, 2403,
     2404, 2321, 2405, 2322, 2406, 2408, 2409, 2410, 2411, 2412,
     2413, 2414, 2415, 2416, 2407, 2417, 2418, 2419, 2420, 2421,
     2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431,

     2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441,
     2442, 2443, 2444, 2445, 2446, 2447, 2449, 2450, 2451, 2452,
     2454, 2453, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462,
     2464, 2465, 2466, 2448, 2467, 2468, 2470, 2469, 2472, 2473,
     2474, 2475, 2476, 2477, 2478, 2479, 2480, 2463, 2481, 2482,
     2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492,
     2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502,
     2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512,
     2471, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521,
     2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531,

     2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541,
     2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551,
     2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561,
     2562, 2563, 2564, 2565, 2566, 2568, 2569, 2570, 2571, 2572,
     2567, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581,
     2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591,
     2592, 2593, 2594, 2595, 2597, 2598, 2599, 2600, 2601, 2602,
     2603, 2604, 2596, 2605, 2606, 2607, 2608, 2609, 2610, 2611,
     2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621,
     2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631,

     2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641,
     2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651,
     2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661,
     2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2673,
     2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683,
     2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693,
     2694, 2695, 2696, 2697, 2699, 2700, 2701, 2702, 2703, 2704,
     2705, 2706, 2707, 2708, 2709, 2710, 2711, 2698, 2712, 2713,
     2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2671,
     2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732,

     2733, 2734, 2735, 2672, 2736, 2737, 2738, 2739, 2740, 2741,
     2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751,
     2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761,
     2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771,
     2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781,
     2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791,
     2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801,
     2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811,
     2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821,
     2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831,

     2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841,
     2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851,
     2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861,
     2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871,
     2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881,
     2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891,
     2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901,
     2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911,
     2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921,
     2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931,

     2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941,
     2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951,
     2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961,
     2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971,
     2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981,
     2983, 2984, 2985, 2986, 2982, 2987, 2988, 2989, 2990, 2991,
     2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001,
     3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011,
     3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021,
     3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031,

     3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041,
     3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051,
     3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061,
     3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071,
     3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081,
     3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091,
     3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101,
     3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111,
     3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121,
     3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131,

     3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141,
     3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151,
     3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161,
     3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171,
     3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181,
     3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191,
     3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201,
     3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211,
     3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221,
     3222, 3223, 3224, 3225, 3226, 3227,   85,   85,   85,   85,

       85,   85,   87,   87,   87,   87,   87,   87,   90,   90,
       90,   90,   90,   90,  102,  102,  113,  113,  285,  943,
      942,  285,  285,  285,  287,  287,  941,  287,  287,  287,
      288,  288,  940,  288,  288,  288,  939,  938,  937,  936,
      935,  934,  933,  932,  931,  930,  929,  928,  927,  926,
      925,  922,  921,  920,  919,  918,  917,  916,  915,  914,
      913,  912,  911,  910,  909,  908,  907,  906,  905,  904,
      903,  902,  901,  900,  897,  896,  895,  894,  893,  892,
      891,  890,  889,  888,  887,  886,  885,  884,  883,  882,
      881,  880,  879,  878,  877,  876,  875,  874,  873,  872,

      871,  870,  869,  868,  867,  864,  863,  862,  861,  860,
      859,  858,  857,  856,  855,  854,  853,  852,  851,  850,
      849,  848,  847,  846,  845,  844,  843,  842,  841,  840,
      839,  838,  837,  836,  835,  834,  833,  832,  831,  830,
      829,  828,  827,  826,  825,  824,  823,  822,  821,  820,
      819,  818,  817,  816,  815,  814,  813,  812,  811,  810,
      809,  808,  807,  806,  805,  804,  803,  799,  796,  795,
      794,  793,  792,  791,  790,  789,  788,  787,  786,  785,
      784,  783,  782,  781,  780,  779,  778,  777,  776,  775,
      774,  773,  772,  771,  770,  769,  768,  767,  766,  765,

      764,  763,  762,  761,  760,  759,  758,  757,  756,  755,
      754,  753,  752,  751,  750,  749,  748,  747,  746,  745,
      744,  743,  742,  741,  740,  739,  738,  737,  736,  735,
      734,  733,  732,  731,  730,  729,  728,  725,  724,  723,
      722,  721,  720,  719,  718,  717,  716,  715,  714,  713,
      712,  709,  706,  705,  701,  700,  699,  694,  693,  692,
      691,  690,  689,  688,  685,  684,  683,  682,  681,  680,
      679,  678,  677,  674,  673,  672,  671,  670,  669,  668,
      667,  666,  665,  664,  661,  660,  659,  656,  653,  652,
      651,  650,  649,  648,  647,  646,  645,  644,  643,  642,

      641,  638,  637,  636,  635,  634,  633,  632,  629,  628,
      623,  622,  621,  620,  619,  618,  615,  614,  613,  612,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  598,  597,  596,  595,  594,  593,  592,
      587,  586,  585,  584,  583,  582,  581,  580,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  563,  562,  561,  560,  559,  558,  557,  556,  555,
      554,  553,  552,  551,  550,  549,  548,  545,  544,  543,
      542,  541,  540,  539,  538,  537,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  527,  526,  525,  524,  523,

      522,  521,  520,  519,  518,  517,  514,  513,  512,  511,
      510,  507,  506,  496,  495,  489,  483,  482,  477,  476,
      475,  472,  467,  466,  465,  459,  453,  452,  449,  448,
      445,  444,  443,  442,  441,  434,  431,  428,  427,  426,
      425,  421,  406,  405,  404,  403,  402,  398,  397,  388,
      387,  386,  378,  377,  368,  361,  360,  359,  356,  355,
      354,  350,  349,  348,  347,  346,  342,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,

      299,  298,  297,  296,  295,  294,  293, 3228,  286,  284,
      247,  218,  210,  162,  161,  160,  155,  154,  135,  131,
      130,  119,  112,  111,  108,   97,   96,   95,   94,   93,
     3228,    7, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,

     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228
    } ;

static yyconst flex_int16_t yy_chk[3525] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,   13,    3,   35,    3,    4,    4,

       35,    4,    9,    4,   24,    9,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   25,   24,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   27,   28,
       31,   31,   79,   79,  739,   26,   25,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   13,   27,   28,
       36,   38,   42,   38,   39,   26,   44,   27,   28,   47,
       38,   36,   48,   88,  740,   39,   88,   25,   47,   90,
       45,  134,    9,   51,   39,   45,   46,   42,   42,   27,
       28,   36,  134,   39,   68,   45,   26,   71,   68,   39,
       39,   39,   68,   46,   45,   45,   45,   61,   68,   58,

       64,  135,   71,   58,   64,   64,   80,   48,   46,   58,
      224,   48,  224,   44,  135,   51,   51,   51,   46,   58,
       59,  741,   90,   80,  133,  133,  133,   48,   57,   57,
       57,   57,   57,   88,   59,   60,   67,   67,   59,   60,
       67,   59,   61,   60,  373,   67,  238,  136,   59,   60,
       61,   59,   60,   61,  169,   61,   62,   61,   61,   60,
      238,   65,  194,   61,   62,   61,  169,   62,   65,   65,
       62,  191,   57,   62,   65,   57,   57,  191,   69,   69,
      184,  184,  194,   69,   57,   57,   57,   69,  192,  192,
       57,   57,   57,   69,   70,   70,   57,   57,   57,   70,

      136,  229,   69,   69,   69,   74,   72,  171,   74,   70,
       72,  742,  171,   72,   78,   70,  171,  180,   78,  229,
       72,  373,   78,   72,   74,   74,   74,   75,   78,   75,
      180,   75,  205,  205,   75,   75,  180,  743,   75,  188,
      188,   75,  193,   75,   76,  188,   75,   75,   76,  193,
      189,   76,   76,   77,   77,  744,  189,  226,   76,   77,
      198,   76,  189,  226,   77,   77,   77,  198,   76,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  200,
      199,  242,  200,  242,  199,  257,  257,   98,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  199,  219,

      219,  219,  436,  436,  372,  102,  101,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  271,   98,  372,
      265,  103,  271,  103,  265,  102,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  204,  101,  206,  745,
      209,  399,  272,  204,  209,  216,  272,  204,  206,  717,
      209,  216,  245,  399,  217,  217,  102,  217,  217,  217,
      206,  245,  216,  327,  228,  217,  217,  442,  246,  217,
      327,  442,  246,  217,  248,  217,  228,  228,  246,  248,
      255,  228,  406,  261,  746,  406,  248,  261,  264,  255,
      248,  261,  248,  264,  410,  255,  267,  255,  264,  217,

      261,  268,  267,  277,  276,  280,  438,  717,  410,  268,
      276,  280,  277,  363,  363,  438,  363,  747,  277,  474,
      474,  268,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  454,  407,  483,  483,  290,  454,  290,  407,
      289,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  289,  418,  464,  473,  478,  481,  464,  418,  473,
      481,  576,  498,  650,  576,  748,  478,  498,  478,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  578,
      688,  749,  750,  751,  752,  753,  754,  578,  755,  756,
      757,  758,  759,  688,  760,  762,  578,  763,  764,  765,
      766,  767,  768,  769,  770,  771,  772,  773,  774,  775,
      776,  777,  778,  779,  780,  781,  782,  783,  784,  785,
      650,  787,  788,  790,  773,  791,  792,  793,  794,  795,
      797,  798,  799,  800,  801,  802,  803,  804,  805,  806,
      799,  807,  808,  810,  811,  812,  813,  814,  815,  799,
      816,  817,  819,  820,  821,  822,  823,  824,  825,  827,
      828,  829,  790,  790,  830,  831,  833,  834,  835,  836,

      838,  839,  840,  841,  842,  843,  844,  845,  846,  847,
      848,  849,  850,  851,  852,  833,  853,  854,  855,  856,
      857,  858,  861,  862,  864,  865,  866,  868,  869,  870,
      871,  865,  872,  873,  874,  876,  877,  879,  880,  881,
      882,  883,  883,  884,  886,  887,  888,  889,  891,  892,
      825,  893,  894,  895,  896,  897,  900,  901,  902,  903,
      904,  905,  906,  907,  908,  910,  912,  913,  915,  916,
      917,  918,  919,  920,  921,  922,  920,  923,  924,  925,
      926,  927,  928,  930,  931,  932,  933,  936,  937,  938,
      939,  940,  941,  943,  945,  946,  947,  948,  949,  950,

      951,  952,  953,  954,  955,  956,  957,  958,  959,  960,
      961,  962,  961,  963,  964,  965,  966,  967,  968,  969,
      970,  971,  972,  973,  974,  975,  977,  978,  979,  980,
      981,  982,  983,  984,  985,  986,  987,  988,  989,  990,
      991,  992,  993,  994,  995,  996,  997,  999, 1000, 1001,
     1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
     1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
     1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
     1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1035,
     1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1056,

     1058, 1059, 1060, 1061, 1061, 1062, 1064, 1065, 1066, 1067,
     1068, 1069, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1080,
     1081, 1082, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093,
     1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1105, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
     1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
     1128, 1129, 1130, 1131, 1132, 1117, 1133, 1134, 1135, 1136,
     1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1144, 1145,
     1134, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
     1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165,

     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1176,
     1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
     1187, 1188, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198,
     1199, 1201, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211,
     1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
     1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1211, 1228,
     1230, 1228, 1231, 1232, 1233, 1234, 1235, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1249, 1210,
     1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1262, 1263, 1264, 1265, 1266, 1268, 1270, 1271,

     1272, 1256, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
     1281, 1283, 1284, 1285, 1287, 1288, 1280, 1280, 1289, 1290,
     1291, 1292, 1293, 1294, 1296, 1297, 1298, 1299, 1300, 1301,
     1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1308,
     1311, 1308, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
     1320, 1321, 1322, 1323, 1324, 1326, 1326, 1326, 1327, 1328,
     1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
     1339, 1341, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
     1351, 1352, 1353, 1354, 1355, 1356, 1358, 1359, 1360, 1362,
     1363, 1364, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,

     1374, 1375, 1376, 1377, 1378, 1379, 1382, 1383, 1385, 1387,
     1388, 1389, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1399,
     1401, 1397, 1402, 1397, 1400, 1400, 1403, 1404, 1407, 1410,
     1411, 1412, 1413, 1414, 1415, 1400, 1416, 1417, 1418, 1422,
     1421, 1400, 1421, 1423, 1400, 1424, 1425, 1421, 1426, 1428,
     1429, 1430, 1421, 1421, 1432, 1433, 1435, 1422, 1437, 1438,
     1439, 1440, 1441, 1442, 1444, 1445, 1446, 1447, 1448, 1449,
     1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
     1460, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
     1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,

     1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1493,
     1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
     1504, 1505, 1506, 1507, 1508, 1509, 1501, 1510, 1511, 1512,
     1513, 1516, 1507, 1517, 1518, 1519, 1520, 1520, 1521, 1522,
     1523, 1524, 1465, 1525, 1526, 1527, 1528, 1523, 1529, 1530,
     1532, 1533, 1534, 1535, 1536, 1539, 1540, 1541, 1543, 1544,
     1545, 1546, 1547, 1548, 1548, 1548, 1548, 1549, 1550, 1552,
     1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1563, 1564,
     1565, 1566, 1567, 1568, 1558, 1569, 1570, 1571, 1572, 1573,
     1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,

     1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
     1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
     1604, 1605, 1607, 1608, 1610, 1611, 1614, 1615, 1614, 1616,
     1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
     1627, 1628, 1614, 1629, 1618, 1630, 1631, 1632, 1633, 1636,
     1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
     1647, 1648, 1649, 1650, 1630, 1651, 1652, 1653, 1654, 1655,
     1657, 1658, 1659, 1660, 1653, 1653, 1653, 1661, 1663, 1664,
     1665, 1653, 1666, 1667, 1668, 1671, 1672, 1673, 1674, 1675,
     1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686,

     1687, 1688, 1689, 1690, 1691, 1692, 1693, 1699, 1700, 1701,
     1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1712,
     1713, 1714, 1715, 1716, 1717, 1720, 1721, 1722, 1723, 1724,
     1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1731, 1731,
     1733, 1734, 1735, 1731, 1737, 1738, 1739, 1731, 1740, 1741,
     1742, 1743, 1745, 1731, 1731, 1746, 1747, 1748, 1749, 1750,
     1751, 1752, 1753, 1754, 1755, 1756, 1756, 1758, 1759, 1760,
     1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
     1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
     1781, 1782, 1783, 1784, 1785, 1786, 1787, 1776, 1776, 1788,

     1789, 1773, 1774, 1778, 1790, 1792, 1793, 1794, 1795, 1796,
     1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
     1807, 1808, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
     1818, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
     1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
     1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
     1849, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1859, 1860,
     1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
     1871, 1872, 1873, 1873, 1874, 1876, 1871, 1877, 1878, 1879,
     1880, 1881, 1882, 1885, 1880, 1886, 1887, 1888, 1889, 1890,

     1888, 1891, 1892, 1893, 1894, 1895, 1896, 1899, 1900, 1901,
     1902, 1903, 1904, 1905, 1906, 1907, 1908, 1892, 1909, 1910,
     1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
     1921, 1922, 1923, 1924, 1925, 1926, 1928, 1929, 1930, 1931,
     1915, 1932, 1933, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
     1942, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
     1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
     1963, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
     1974, 1975, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
     1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,

     1996, 1997, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
     2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
     2018, 1956, 2019, 2020, 2021, 2022, 2023, 2025, 2026, 2027,
     2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
     2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
     2049, 2050, 2051, 2052, 2053, 2054, 2056, 2057, 2059, 2060,
     2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
     2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
     2070, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
     2070, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,

     2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2108, 2109,
     2096, 2110, 2109, 2111, 2112, 2113, 2114, 2115, 2116, 2117,
     2118, 2119, 2120, 2121, 2122, 2109, 2123, 2124, 2125, 2126,
     2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136,
     2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146,
     2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156,
     2157, 2159, 2160, 2161, 2162, 2163, 2157, 2164, 2165, 2166,
     2167, 2168, 2157, 2169, 2170, 2157, 2171, 2172, 2173, 2174,
     2175, 2176, 2177, 2178, 2180, 2182, 2183, 2184, 2185, 2186,
     2187, 2188, 2189, 2157, 2190, 2157, 2191, 2192, 2157, 2193,

     2194, 2195, 2157, 2157, 2157, 2196, 2157, 2199, 2200, 2201,
     2202, 2203, 2204, 2205, 2157, 2206, 2157, 2158, 2208, 2209,
     2210, 2211, 2212, 2158, 2213, 2214, 2215, 2158, 2216, 2217,
     2218, 2219, 2158, 2220, 2221, 2223, 2224, 2225, 2226, 2227,
     2158, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2158, 2235,
     2158, 2236, 2158, 2224, 2237, 2158, 2238, 2239, 2158, 2158,
     2158, 2158, 2240, 2158, 2241, 2158, 2242, 2158, 2243, 2244,
     2245, 2158, 2246, 2158, 2247, 2248, 2249, 2251, 2252, 2253,
     2257, 2258, 2259, 2260, 2247, 2261, 2262, 2263, 2265, 2268,
     2269, 2270, 2271, 2273, 2274, 2275, 2276, 2278, 2279, 2280,

     2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290,
     2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2301,
     2302, 2301, 2303, 2304, 2305, 2306, 2307, 2308, 2310, 2311,
     2312, 2313, 2314, 2296, 2315, 2317, 2318, 2317, 2319, 2320,
     2321, 2322, 2324, 2325, 2326, 2327, 2328, 2311, 2329, 2330,
     2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340,
     2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2350, 2352,
     2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2363,
     2318, 2364, 2365, 2367, 2368, 2369, 2371, 2372, 2373, 2375,
     2377, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387,

     2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397,
     2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2408,
     2409, 2410, 2411, 2412, 2412, 2413, 2414, 2415, 2416, 2417,
     2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427,
     2422, 2429, 2430, 2431, 2432, 2433, 2434, 2437, 2438, 2439,
     2440, 2441, 2442, 2446, 2449, 2451, 2454, 2456, 2460, 2461,
     2464, 2466, 2467, 2471, 2472, 2473, 2475, 2476, 2477, 2478,
     2479, 2480, 2471, 2481, 2482, 2483, 2484, 2485, 2486, 2487,
     2488, 2489, 2490, 2491, 2491, 2492, 2493, 2494, 2495, 2496,
     2497, 2498, 2500, 2501, 2502, 2506, 2507, 2508, 2509, 2510,

     2511, 2512, 2513, 2515, 2516, 2517, 2518, 2519, 2520, 2521,
     2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531,
     2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541,
     2543, 2544, 2545, 2546, 2547, 2549, 2550, 2551, 2552, 2553,
     2554, 2557, 2558, 2559, 2560, 2562, 2563, 2564, 2565, 2566,
     2567, 2568, 2569, 2570, 2571, 2572, 2574, 2575, 2576, 2577,
     2578, 2579, 2580, 2582, 2583, 2584, 2586, 2587, 2588, 2589,
     2591, 2592, 2594, 2595, 2597, 2598, 2599, 2582, 2600, 2601,
     2603, 2604, 2605, 2606, 2607, 2608, 2609, 2611, 2613, 2552,
     2617, 2618, 2619, 2620, 2621, 2623, 2624, 2625, 2626, 2627,

     2628, 2629, 2630, 2552, 2632, 2633, 2634, 2635, 2636, 2638,
     2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648,
     2649, 2650, 2651, 2653, 2654, 2656, 2657, 2658, 2659, 2660,
     2661, 2662, 2664, 2666, 2667, 2668, 2669, 2670, 2671, 2672,
     2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682,
     2683, 2684, 2685, 2686, 2688, 2690, 2691, 2692, 2693, 2694,
     2695, 2696, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706,
     2707, 2709, 2710, 2711, 2714, 2715, 2716, 2717, 2718, 2719,
     2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729,
     2730, 2731, 2732, 2733, 2735, 2736, 2737, 2738, 2739, 2740,

     2741, 2742, 2743, 2745, 2746, 2747, 2748, 2749, 2750, 2751,
     2753, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763,
     2764, 2765, 2766, 2767, 2769, 2770, 2771, 2772, 2773, 2774,
     2775, 2776, 2777, 2780, 2781, 2782, 2783, 2785, 2786, 2787,
     2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797,
     2800, 2801, 2802, 2804, 2806, 2807, 2808, 2809, 2810, 2812,
     2813, 2814, 2815, 2817, 2818, 2819, 2820, 2821, 2825, 2826,
     2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836,
     2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846,
     2849, 2850, 2851, 2852, 2853, 2854, 2856, 2857, 2858, 2861,

     2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871,
     2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2881, 2882,
     2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2894, 2895,
     2897, 2898, 2899, 2901, 2902, 2903, 2904, 2905, 2907, 2909,
     2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919,
     2920, 2921, 2924, 2926, 2919, 2927, 2929, 2930, 2932, 2933,
     2934, 2935, 2936, 2937, 2938, 2939, 2941, 2942, 2943, 2944,
     2946, 2947, 2948, 2950, 2951, 2953, 2954, 2955, 2956, 2957,
     2959, 2961, 2963, 2964, 2966, 2967, 2968, 2969, 2970, 2971,
     2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981,

     2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2993,
     2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003,
     3007, 3008, 3009, 3011, 3012, 3013, 3014, 3015, 3016, 3017,
     3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028,
     3029, 3030, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040,
     3041, 3042, 3043, 3044, 3045, 3046, 3048, 3049, 3050, 3051,
     3052, 3053, 3055, 3056, 3057, 3058, 3059, 3060, 3062, 3063,
     3064, 3065, 3066, 3067, 3068, 3069, 3071, 3072, 3075, 3079,
     3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089,
     3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3102,

     3105, 3106, 3107, 3108, 3109, 3111, 3116, 3117, 3118, 3121,
     3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131,
     3132, 3134, 3135, 3137, 3138, 3139, 3140, 3141, 3142, 3143,
     3144, 3146, 3147, 3149, 3150, 3151, 3152, 3153, 3154, 3156,
     3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166,
     3167, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3180,
     3181, 3183, 3185, 3186, 3189, 3190, 3191, 3192, 3193, 3194,
     3195, 3196, 3197, 3198, 3199, 3200, 3201, 3203, 3205, 3206,
     3207, 3209, 3210, 3211, 3212, 3213, 3214, 3216, 3217, 3219,
     3220, 3221, 3222, 3224, 3225, 3226, 3229, 3229, 3229, 3229,

     3229, 3229, 3230, 3230, 3230, 3230, 3230, 3230, 3231, 3231,
     3231, 3231, 3231, 3231, 3232, 3232, 3233, 3233, 3234,  738,
      736, 3234, 3234, 3234, 3235, 3235,  735, 3235, 3235, 3235,
     3236, 3236,  734, 3236, 3236, 3236,  733,  732,  731,  730,
      729,  728,  727,  726,  725,  724,  722,  721,  720,  719,
      718,  716,  713,  712,  710,  709,  708,  707,  706,  705,
      704,  703,  702,  700,  699,  697,  696,  695,  694,  693,
      692,  691,  690,  689,  687,  686,  685,  684,  683,  682,
      680,  679,  678,  677,  676,  675,  674,  673,  672,  671,
      670,  669,  668,  667,  666,  663,  662,  661,  658,  657,

      656,  655,  654,  653,  651,  649,  648,  647,  646,  645,
      644,  643,  642,  641,  640,  639,  638,  637,  636,  635,
      634,  633,  632,  631,  630,  629,  628,  627,  626,  625,
      624,  622,  620,  619,  618,  617,  615,  614,  612,  611,
      609,  608,  607,  606,  605,  604,  603,  602,  600,  599,
      598,  597,  595,  594,  593,  592,  590,  589,  588,  587,
      586,  585,  584,  583,  582,  581,  579,  577,  575,  573,
      572,  571,  570,  569,  568,  567,  565,  564,  563,  562,
      560,  558,  557,  556,  555,  554,  553,  552,  551,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  540,  539,

      538,  537,  536,  535,  534,  533,  532,  531,  530,  529,
      528,  527,  526,  525,  524,  523,  522,  521,  520,  519,
      518,  517,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  504,  503,  502,  501,  500,  497,  496,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  482,  480,  479,  477,  476,  475,  472,  470,  469,
      468,  467,  466,  465,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  441,  440,  439,  437,  435,  434,
      433,  432,  431,  430,  428,  427,  426,  425,  421,  420,

      419,  417,  416,  415,  414,  413,  412,  411,  409,  408,
      405,  404,  403,  402,  401,  400,  398,  397,  395,  394,
      393,  392,  391,  390,  389,  388,  387,  386,  385,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      371,  370,  369,  368,  367,  366,  365,  364,  362,  361,
      360,  359,  355,  354,  353,  352,  351,  350,  349,  348,
      346,  345,  343,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  326,  325,  324,
      323,  322,  321,  318,  317,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,

      298,  297,  296,  295,  294,  293,  286,  284,  283,  282,
      281,  279,  278,  270,  269,  266,  263,  262,  260,  259,
      258,  256,  254,  253,  249,  247,  244,  243,  241,  239,
      237,  236,  235,  231,  230,  227,  225,  223,  222,  221,
      220,  218,  215,  213,  212,  211,  210,  208,  207,  203,
      202,  201,  197,  195,  190,  187,  186,  185,  183,  182,
      181,  176,  175,  174,  173,  172,  170,  168,  161,  160,
      156,  155,  154,  153,  152,  151,  149,  148,  147,  146,
      145,  144,  140,  139,  138,  137,  132,  131,  130,  126,
      125,  124,  123,  122,  121,  120,  119,  118,  117,  116,

      115,  114,  108,  107,  106,  105,  104,   92,   89,   81,
       73,   66,   63,   56,   53,   52,   50,   49,   43,   41,
       40,   37,   33,   32,   29,   22,   20,   19,   15,   14,
        7, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,

     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228, 3228,
     3228, 3228, 3228, 3228
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[496] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "feiparser.l"
/* FEI Lexer! */
/* NOTE: To comment this file use C "standard comments"  BUT leave a space before the slash-star */
/* /////////////////////////////////////////////////////////////////////////////// */
/* //                                                                              */
/* // COPYRIGHT (C):      Version of a Creative Commons License,                   */
/* //                     for details contact Boris Jeremic, jeremic@ucdavis.edu   */
/* // PROJECT:            Real ESSI Simulator                                      */
/* // PROGRAMMER:         Jose Abell                                               */
/* // DATE:               Jan 2012                                                 */
/* // UPDATE HISTORY:     Full update history in git repository.                   */
/* // QUALITY ASSURANCE:  Developers have worked really hard to develop            */
/* //                     an extensive verification of developed implementation    */
/* //                     and with that can claim quality and fitness for intended */
/* //                     purpose (modeling and simulation of Real ESSI Problems)  */
/* //                     within confines of verification effort                   */
/* //                                                                              */
/* // LEGACY/DEFUNCT COPYLEFT (C):                                                 */
/* //                     Woody's viral GPL-like license (adapted by BJ):          */
/* //                     ``This    source  code is Copyrighted in                 */
/* //                     worldwide for  an  indefinite  period,  and anybody      */
/* //                     caught  using it without our permission, will be         */
/* //                     mighty good friends of ourn, cause we don't give         */
/* //                     a  darn.  Hack it. Compile it. Debug it. Run it.         */
/* //                     Yodel  it.  Enjoy it. We wrote it, that's all we         */
/* //                     wanted to do.''                                          */
/* //                                                                              */
/* /////////////////////////////////////////////////////////////////////////////   */


#line 36 "feiparser.l"
	#include <iostream>
	#include <fstream>
	#include <string>



	//Old C libraries are used in lexer....
	#include <fenv.h>  // For feenableexcept()
    #include <cmath>
    #include <cerrno>
    #pragma STDC FENV_ACCESS ON
    #include <stacktrace.h>
    #include <cstdlib>
	#include <cstring>
	#include <csignal>
	#include <stdio.h>                         // Provides printf, etc.
	#include <string.h>
	#include <getopt.h>                        // For the command-line argument parser
	/// =================================================================================
	// Please do not erase! Might make it into code someday.
	// #include <readline/readline.h>
	// #include <readline/history.h>
	// =================================================================================

	//Our FEI libraries
	#include "feiast.h"
	#include "dsl_actions.h"
	#include "siunit.h"
	#include "quantity.h"
    //#define __USE_GNU

    


	//From the parser generator
	#include "feiparser.tab.hh"

	//Boost for string to double conversion
	//#include <../boost/boost/lexical_cast.hpp>
	#include <boost/lexical_cast.hpp>

    #ifdef _PARALLEL_PROCESSING
    #include <mpi.h>
    #endif

	int yycolumn = 1;
	#define YY_DECL int yylex(yy::feiparser::semantic_type *yylval,\
							  yy::feiparser::location_type *yylloc)
	//#define YY_USER_ACTION yylloc -> columns (yyleng);
	#define YY_USER_ACTION yylloc->end.line = yylineno; \
	yylloc->end.column = yycolumn+yyleng; \
	yycolumn += yyleng;

	// =================================================================================
	// Please do not erase! Might make it into code someday.
	// This is to replace STDIN with GNU Readline (Caution!!! GPL Licence).
	// #undef YY_INPUT
	// #define YY_INPUT(buf, result, max_size) (result = my_yyinput(buf, max_size))
	// =================================================================================

	//static int my_yyinput(char *buf, int max_size);
	//static char *st_readline_buffer;
	//static int  st_readline_used_len;

	//Simplify the usage of tokens...
	typedef yy::feiparser::token token;

	//Standard namespace
	using namespace std;


	//
	//FILE * ;

	struct bufstack
	{
		struct bufstack *prev;
		YY_BUFFER_STATE bs;
		int lineno;
		char* filename;
		FILE *f;
	} *curbs = 0;

	char* curfilename;

	int newfile(char* fn);
	int newstdin(void);
	int popfile(void);
	int error_behavior(void);
	void welcome_msg();
	void set_known_units();
	void set_variables(char* cstring);


	char initial[] = "STDIN";

	//Command line options flags
	int FLAG_interactive_mode    = 1;
	int FLAG_generate_cpp_output = 0;
	int FLAG_dry_run             = 0;
	int FLAG_execute_apis        = 1;
	int FLAG_inclusion_mode      = 0;
	int FLAG_run_file            = 0;
    int FLAG_binary_output       = 0;
	int FLAG_debug_attach        = 0;

	/* EXTERNS - All defined in feiparser.yy */
	extern const string thePrompt;
	extern string out_cpp_filename;
	extern string prompt;
	extern map<string,Quantity> global_variables;
	extern set<string> locked_global_variables;
	extern int recovery_mode;
	extern void set_model_name(char* cstring);
	extern void set_outcppfile_name(string newfilename);
	extern void wipe_model();
	extern void set_dry_run_mode(int);
	extern void set_profiling_results_filename(char* cstring);
	extern void call_hdf5_flush_next_chance(void);

#ifndef VERSION
#define VERSION "--NOT FROM GIT REPO--"
#endif
/* float exponent */
#line 2506 "feiparser.lex.c"

#define INITIAL 0
#define IFILE 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 164 "feiparser.l"



	// start where previous token ended
	//yylloc -> step();


 /* ================================================================================================= */
 /* ========              BEGIN LEXER                                                       ========= */
 /* ================================================================================================= */
 
 /* The order in this file matters. Patterns which are higher up are matched first */
 
 /* single character ops are directly passed to the parser (more grammatical clarity) */
#line 2710 "feiparser.lex.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3229 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3432 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
#line 179 "feiparser.l"
case 2:
#line 180 "feiparser.l"
case 3:
#line 181 "feiparser.l"
case 4:
#line 182 "feiparser.l"
case 5:
#line 183 "feiparser.l"
case 6:
#line 184 "feiparser.l"
case 7:
#line 185 "feiparser.l"
case 8:
#line 186 "feiparser.l"
case 9:
#line 187 "feiparser.l"
case 10:
#line 188 "feiparser.l"
case 11:
#line 189 "feiparser.l"
case 12:
#line 190 "feiparser.l"
case 13:
#line 191 "feiparser.l"
case 14:
#line 192 "feiparser.l"
case 15:
YY_RULE_SETUP
#line 192 "feiparser.l"
{ return yytext[0]; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 194 "feiparser.l"
{
								yylloc->begin.line = yylineno;
								yylloc->begin.column = yycolumn;

								return yytext[0];
							}
	YY_BREAK
/* assign operate */
case 17:
YY_RULE_SETUP
#line 202 "feiparser.l"
{ return token::PLUSEQUAL; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 203 "feiparser.l"
{ return token::MINUSEQUAL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 204 "feiparser.l"
{ return token::TIMESEQUAL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 205 "feiparser.l"
{ return token::DIVIDEEQUAL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 206 "feiparser.l"
{ return token::MODULUSEQUAL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 207 "feiparser.l"
{ return token::POWEQUAL; }
	YY_BREAK
/* comparison ops */
case 23:
YY_RULE_SETUP
#line 211 "feiparser.l"
{ yylval->fn = 1; return token::CMP; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 212 "feiparser.l"
{ yylval->fn = 2; return token::CMP; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 213 "feiparser.l"
{ yylval->fn = 3; return token::CMP; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 214 "feiparser.l"
{ yylval->fn = 4; return token::CMP; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 215 "feiparser.l"
{ yylval->fn = 5; return token::CMP; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 216 "feiparser.l"
{ yylval->fn = 6; return token::CMP; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 217 "feiparser.l"
{ yylval->fn = 7; return token::CMP; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 218 "feiparser.l"
{ yylval->fn = 8; return token::CMP; }
	YY_BREAK
/* test for units */
case 31:
#line 223 "feiparser.l"
case 32:
#line 224 "feiparser.l"
case 33:
#line 225 "feiparser.l"
case 34:
#line 226 "feiparser.l"
case 35:
#line 227 "feiparser.l"
case 36:
#line 228 "feiparser.l"
case 37:
#line 229 "feiparser.l"
case 38:
#line 230 "feiparser.l"
case 39:
#line 231 "feiparser.l"
case 40:
#line 232 "feiparser.l"
case 41:
#line 233 "feiparser.l"
case 42:
YY_RULE_SETUP
#line 233 "feiparser.l"
{yylval->ident = new string(yytext); return token::ISUNITTYPE;}
	YY_BREAK
/* Auto-variables (keywords)  */
case 43:
YY_RULE_SETUP
#line 236 "feiparser.l"
{return token::NUMBER_OF_NODES;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 237 "feiparser.l"
{return token::NUMBER_OF_ELEMENTS;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 238 "feiparser.l"
{return token::CURRENT_TIME;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 239 "feiparser.l"
{return token::NUMBER_OF_SP_CONSTRAINTS;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 240 "feiparser.l"
{return token::NUMBER_OF_MP_CONSTRAINTS;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 241 "feiparser.l"
{return token::NUMBER_OF_LOADS;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 242 "feiparser.l"
{return token::IS_PARALLEL;}
	YY_BREAK
/* Flow control keywords */
case 50:
YY_RULE_SETUP
#line 245 "feiparser.l"
{ return token::IF; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 246 "feiparser.l"
{ return token::THEN; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 247 "feiparser.l"
{ return token::ELSE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 248 "feiparser.l"
{ return token::WHILE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 249 "feiparser.l"
{ return token::DO; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 250 "feiparser.l"
{ return token::LET;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 251 "feiparser.l"
{ return token::IN; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 252 "feiparser.l"
{ return token::EXITSAFEMODE;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 253 "feiparser.l"
{ return token::CONTINUE;}
	YY_BREAK
/* Include statement is handled by the lexer */
case 59:
YY_RULE_SETUP
#line 256 "feiparser.l"
{BEGIN IFILE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 257 "feiparser.l"
{
								{
									//This ignores anything up to the newline.
									int c;
									while((c=yyinput()) && c != '\n');
								}
								yylineno++;
								if(newfile(yytext) == 0)
									yyterminate();  /*file not found*/
								yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
								prompt = "";
								BEGIN INITIAL;
								FLAG_inclusion_mode = 1;
							}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 271 "feiparser.l"
{
								cerr << curfilename << ":" << yylineno << ": bad include line." << endl;
								yyterminate();
							}
	YY_BREAK
/* built in functions */
case 62:
#line 279 "feiparser.l"
case 63:
#line 280 "feiparser.l"
case 64:
#line 281 "feiparser.l"
case 65:
#line 282 "feiparser.l"
case 66:
#line 283 "feiparser.l"
case 67:
#line 284 "feiparser.l"
case 68:
#line 285 "feiparser.l"
case 69:
#line 286 "feiparser.l"
case 70:
#line 287 "feiparser.l"
case 71:
#line 288 "feiparser.l"
case 72:
#line 289 "feiparser.l"
case 73:
#line 290 "feiparser.l"
case 74:
#line 291 "feiparser.l"
case 75:
#line 292 "feiparser.l"
case 76:
#line 293 "feiparser.l"
case 77:
#line 294 "feiparser.l"
case 78:
YY_RULE_SETUP
#line 294 "feiparser.l"
{ yylval->ident = new string(yytext); return token::FUNCTION; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 296 "feiparser.l"
{return token::VECTOR;}
	YY_BREAK
/* ================================================================================================= */
/* ========              INITIAL COMMANDS (VERBS)                                          ========= */
/* ================================================================================================= */
case 80:
YY_RULE_SETUP
#line 302 "feiparser.l"
{return token::MODEL;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 303 "feiparser.l"
{return token::ADD;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 304 "feiparser.l"
{return token::DEFINE;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 305 "feiparser.l"
{return token::FIX;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 306 "feiparser.l"
{return token::FREE;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 307 "feiparser.l"
{return token::REMOVE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 308 "feiparser.l"
{return token::SIMULATE;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 309 "feiparser.l"
{return token::COMPUTE;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 310 "feiparser.l"
{return token::CMD_print;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 311 "feiparser.l"
{return token::CMD_help;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 312 "feiparser.l"
{return token::CMD_whos;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 313 "feiparser.l"
{return token::CMD_check;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 314 "feiparser.l"
{return token::MESH;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 315 "feiparser.l"
{return token::REQUIRE;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 316 "feiparser.l"
{return token::SET;}
	YY_BREAK
/* New loading stage.... should change */
case 95:
YY_RULE_SETUP
#line 320 "feiparser.l"
{return token::NEW;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 321 "feiparser.l"
{return token::LOADING;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 322 "feiparser.l"
{return token::STAGE;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 323 "feiparser.l"
{return token::RESTART;}
	YY_BREAK
/* ================================================================================================= */
/* ========                     ADD                                                        ========= */
/* ================================================================================================= */
/* Things which can be added (nouns). May be several phrases */
case 99:
YY_RULE_SETUP
#line 330 "feiparser.l"
{return token::NODE;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 331 "feiparser.l"
{return token::ELEMENT;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 332 "feiparser.l"
{return token::ELEMENTS;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 333 "feiparser.l"
{return token::MATERIAL;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 334 "feiparser.l"
{return token::LOAD;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 335 "feiparser.l"
{return token::ACCELERATION_FIELD;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 336 "feiparser.l"
{return token::TIMEHISTORY;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 337 "feiparser.l"
{return token::MASS;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 338 "feiparser.l"
{return token::IMPOSEDMOTION;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 339 "feiparser.l"
{return token::UNIFORMACCELERATION;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 340 "feiparser.l"
{return token::DAMPING;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 341 "feiparser.l"
{return token::CONSTRAINT;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 342 "feiparser.l"
{return token::REACTION;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 343 "feiparser.l"
{return token::FORCES;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 344 "feiparser.l"
{return token::DRM;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 345 "feiparser.l"
{return token::SECTION;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 346 "feiparser.l"
{return token::LOADPATTERN;}
	YY_BREAK
/* "penalty displacement"              {return token::PENALTYDISPLACEMENT;} */
case 116:
YY_RULE_SETUP
#line 348 "feiparser.l"
{return token::LOADVALUE;}
	YY_BREAK
/* Element names */
case 117:
YY_RULE_SETUP
#line 351 "feiparser.l"
{return token::EightNodeBrick;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 352 "feiparser.l"
{return token::EightNodeBrickLT;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 353 "feiparser.l"
{return token::EightNodeBrickLTNoOutput;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 354 "feiparser.l"
{return token::TwentyNodeBrick;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 355 "feiparser.l"
{return token::TwentyNodeBrickLT;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 356 "feiparser.l"
{return token::TwentySevenNodeBrick;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 357 "feiparser.l"
{return token::TwentySevenNodeBrickLT;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 358 "feiparser.l"
{return token::EightNodeBrickElastic;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 359 "feiparser.l"
{return token::TwentyNodeBrickElastic;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 360 "feiparser.l"
{return token::TwentySevenNodeBrickElastic;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 361 "feiparser.l"
{return token::EightNodeBrick_upU;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 362 "feiparser.l"
{return token::EightNodeBrick_up;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 363 "feiparser.l"
{return token::TwentyNodeBrick_uPU;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 364 "feiparser.l"
{return token::beam_displacement_based;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 365 "feiparser.l"
{return token::BeamColumnDispFiber3d;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 366 "feiparser.l"
{return token::beam_elastic;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 367 "feiparser.l"
{return token::beam_9dof_elastic;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 368 "feiparser.l"
{return token::beam_elastic_lumped_mass;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 369 "feiparser.l"
{return token::FourNodeShellMITC4;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 370 "feiparser.l"
{return token::FourNodeShellNewMITC4;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 371 "feiparser.l"
{return token::ThreeNodeShellANDES;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 372 "feiparser.l"
{return token::FourNodeShellANDES;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 373 "feiparser.l"
{return token::truss;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 374 "feiparser.l"
{return token::contact;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 375 "feiparser.l"
{return token::FrictionalPenaltyContact;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 376 "feiparser.l"
{return token::variable_node_brick_8_to_27;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 377 "feiparser.l"
{return token::ShearBeamLT;}
	YY_BREAK
/* Element options */
case 144:
YY_RULE_SETUP
#line 381 "feiparser.l"
{return token::porosity;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 382 "feiparser.l"
{return token::rho_s;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 383 "feiparser.l"
{return token::rho_f;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 384 "feiparser.l"
{return token::k_x;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 385 "feiparser.l"
{return token::k_y;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 386 "feiparser.l"
{return token::k_z;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 387 "feiparser.l"
{return token::K_s;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 388 "feiparser.l"
{return token::K_f;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 389 "feiparser.l"
{return token::pressure;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 390 "feiparser.l"
{return token::cross_section;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 391 "feiparser.l"
{return token::shear_modulus;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 392 "feiparser.l"
{return token::torsion_Jx;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 393 "feiparser.l"
{return token::bending_Iz;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 394 "feiparser.l"
{return token::bending_Iy;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 395 "feiparser.l"
{return token::mass_density;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 396 "feiparser.l"
{return token::xz_plane_vector;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 397 "feiparser.l"
{return token::joint_1_offset;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 398 "feiparser.l"
{return token::joint_2_offset;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 399 "feiparser.l"
{return token::direction;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 400 "feiparser.l"
{return token::stiffness;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 401 "feiparser.l"
{return token::normal_stiffness;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 402 "feiparser.l"
{return token::tangential_stiffness;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 403 "feiparser.l"
{return token::normal_damping;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 404 "feiparser.l"
{return token::tangential_damping;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 405 "feiparser.l"
{return token::friction_ratio;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 406 "feiparser.l"
{return token::maximum_gap;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 407 "feiparser.l"
{return token::contact_plane_vector;}
	YY_BREAK
/* section types */
case 171:
YY_RULE_SETUP
#line 411 "feiparser.l"
{return token::MembranePlateFiber;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 412 "feiparser.l"
{return token::ElasticMembranePlate;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 413 "feiparser.l"
{return token::elastic3d;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 414 "feiparser.l"
{return token::FiberSection;}
	YY_BREAK
/* section options */
case 175:
YY_RULE_SETUP
#line 417 "feiparser.l"
{return token::thickness;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 418 "feiparser.l"
{return token::number_of_integration_points;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 419 "feiparser.l"
{return token::section_number;}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 420 "feiparser.l"
{return token::fiber_cross_section;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 421 "feiparser.l"
{return token::fiber_location_Y;}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 422 "feiparser.l"
{return token::fiber_location_Z;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 423 "feiparser.l"
{return token::fiber_location;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 424 "feiparser.l"
{return token::TorsionConstant_GJ;}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 425 "feiparser.l"
{return token::FIBER;}
	YY_BREAK
/* Material Names*/
case 184:
YY_RULE_SETUP
#line 428 "feiparser.l"
{return token::linear_elastic_isotropic_3d;}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 429 "feiparser.l"
{return token::VonMisesLT;}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 430 "feiparser.l"
{return token::DruckerPragerLT;}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 431 "feiparser.l"
{return token::DruckerPragerVonMisesLT;}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 432 "feiparser.l"
{return token::DruckerPragerArmstrongFrederickLT;}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 433 "feiparser.l"
{return token::sanisand2008;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 434 "feiparser.l"
{return token::camclay;}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 435 "feiparser.l"
{return token::camclay_accelerated;}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 436 "feiparser.l"
{return token::sanisand2004;}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 437 "feiparser.l"
{return token::linear_elastic_crossanisotropic;}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 438 "feiparser.l"
{return token::uniaxial_elastic_1d;}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 439 "feiparser.l"
{return token::uniaxial_steel01;}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 440 "feiparser.l"
{return token::uniaxial_steel02;}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 441 "feiparser.l"
{return token::uniaxial_concrete02;}
	YY_BREAK
/* LTensor based materials */
case 198:
YY_RULE_SETUP
#line 445 "feiparser.l"
{return token::NDMaterialLT;}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 446 "feiparser.l"
{return token::linear_elastic_isotropic_3d_LT;}
	YY_BREAK
case 200:
#line 448 "feiparser.l"
case 201:
YY_RULE_SETUP
#line 448 "feiparser.l"
{return token::PisanoLT;}
	YY_BREAK
/* Material options */
case 202:
YY_RULE_SETUP
#line 452 "feiparser.l"
{return token::elastic_modulus;}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 453 "feiparser.l"
{return token::elastic_modulus_horizontal;}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 454 "feiparser.l"
{return token::elastic_modulus_vertical;}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 455 "feiparser.l"
{return token::viscoelastic_modulus;}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 456 "feiparser.l"
{return token::poisson_ratio;}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 457 "feiparser.l"
{return token::poisson_ratio_h_v;}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 458 "feiparser.l"
{return token::poisson_ratio_h_h;}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 459 "feiparser.l"
{return token::shear_modulus_h_v;}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 460 "feiparser.l"
{return token::von_mises_radius;}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 461 "feiparser.l"
{return token::druckerprager_angle;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 462 "feiparser.l"
{return token::druckerprager_k;}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 463 "feiparser.l"
{return token::armstrong_frederick_ha;}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 464 "feiparser.l"
{return token::armstrong_frederick_cr;}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 465 "feiparser.l"
{return token::initial_confining_stress;}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 466 "feiparser.l"
{return token::pressure_reference_p0;}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 467 "feiparser.l"
{return token::strain;}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 468 "feiparser.l"
{return token::stress;}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 469 "feiparser.l"
{return token::control;}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 470 "feiparser.l"
{
										yylval->value = new Quantity(0.0,ESSIunits::unitless);
										return token::NUMBER;
									}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 474 "feiparser.l"
{
										yylval->value = new Quantity(1.0,ESSIunits::unitless);
										return token::NUMBER;
									}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 478 "feiparser.l"
{return token::isotropic_hardening_rate;}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 479 "feiparser.l"
{return token::kinematic_hardening_rate;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 480 "feiparser.l"
{return token::initial_void_ratio;}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 481 "feiparser.l"
{return token::initial_shear_modulus;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 482 "feiparser.l"
{return token::initial_bulk_modulus;}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 483 "feiparser.l"
{return token::reference_void_ratio;}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 484 "feiparser.l"
{return token::critical_stress_ratio_M;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 485 "feiparser.l"
{return token::minimum_bulk_modulus;}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 486 "feiparser.l"
{return token::initial_mean_pressure;}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 487 "feiparser.l"
{return token::e0;}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 488 "feiparser.l"
{return token::sanisand2008_Pat;}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 489 "feiparser.l"
{return token::sanisand2008_k_c;}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 490 "feiparser.l"
{return token::sanisand2008_K0;}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 491 "feiparser.l"
{return token::sanisand2008_G0;}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 492 "feiparser.l"
{return token::sanisand2008_alpha_cc;}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 493 "feiparser.l"
{return token::sanisand2008_c;}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 494 "feiparser.l"
{return token::sanisand2008_xi;}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 495 "feiparser.l"
{return token::sanisand2008_lambda;}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 496 "feiparser.l"
{return token::sanisand2008_ec_ref;}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 497 "feiparser.l"
{return token::sanisand2008_m;}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 498 "feiparser.l"
{return token::sanisand2008_h0;}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 499 "feiparser.l"
{return token::sanisand2008_ch;}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 500 "feiparser.l"
{return token::sanisand2008_nb;}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 501 "feiparser.l"
{return token::sanisand2008_A0;}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 502 "feiparser.l"
{return token::sanisand2008_nd;}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 503 "feiparser.l"
{return token::sanisand2008_p_r;}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 504 "feiparser.l"
{return token::sanisand2008_rho_c;}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 505 "feiparser.l"
{return token::sanisand2008_theta_c;}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 506 "feiparser.l"
{return token::sanisand2008_X;}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 507 "feiparser.l"
{return token::sanisand2008_z_max;}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 508 "feiparser.l"
{return token::sanisand2008_cz;}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 509 "feiparser.l"
{return token::sanisand2008_p0;}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 510 "feiparser.l"
{return token::sanisand2008_p_in;}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 511 "feiparser.l"
{return token::yield_strength;}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 512 "feiparser.l"
{return token::strain_hardening_ratio;}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 513 "feiparser.l"
{return token::a2;}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 514 "feiparser.l"
{return token::a3;}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 515 "feiparser.l"
{return token::a4;}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 516 "feiparser.l"
{return token::R0;}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 517 "feiparser.l"
{return token::cR1;}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 518 "feiparser.l"
{return token::cR2;}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 519 "feiparser.l"
{return token::compressive_strength;}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 520 "feiparser.l"
{return token::strain_at_compressive_strength;}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 521 "feiparser.l"
{return token::crushing_strength;}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 522 "feiparser.l"
{return token::strain_at_crushing_strength;}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 523 "feiparser.l"
{return token::tensile_strength;}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 524 "feiparser.l"
{return token::tension_softening_stiffness;}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 525 "feiparser.l"
{return token::sanisand2004_Pat;}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 526 "feiparser.l"
{return token::sanisand2004_G0;}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 527 "feiparser.l"
{return token::sanisand2004_p_cut;}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 528 "feiparser.l"
{return token::sanisand2004_Mc;}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 529 "feiparser.l"
{return token::sanisand2004_c;}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 530 "feiparser.l"
{return token::sanisand2004_lambda_c;}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 531 "feiparser.l"
{return token::sanisand2004_xi;}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 532 "feiparser.l"
{return token::sanisand2004_ec_ref;}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 533 "feiparser.l"
{return token::sanisand2004_m;}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 534 "feiparser.l"
{return token::sanisand2004_h0;}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 535 "feiparser.l"
{return token::sanisand2004_ch;}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 536 "feiparser.l"
{return token::sanisand2004_nb;}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 537 "feiparser.l"
{return token::sanisand2004_A0;}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 538 "feiparser.l"
{return token::sanisand2004_nd;}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 539 "feiparser.l"
{return token::sanisand2004_z_max;}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 540 "feiparser.l"
{return token::sanisand2004_cz;}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 541 "feiparser.l"
{return token::strain_increment_size;}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 542 "feiparser.l"
{return token::maximum_strain;}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 543 "feiparser.l"
{return token::number_of_times_reaching_maximum_strain;}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 544 "feiparser.l"
{return token::CONSTITUTIVE;}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 545 "feiparser.l"
{return token::testing;}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 546 "feiparser.l"
{return token::constant;}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 547 "feiparser.l"
{return token::mean;}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 548 "feiparser.l"
{return token::triaxial;}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 549 "feiparser.l"
{return token::drained;}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 550 "feiparser.l"
{return token::undrained;}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 551 "feiparser.l"
{return token::simple;}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 552 "feiparser.l"
{return token::shear;}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 553 "feiparser.l"
{return token::number_of_subincrements;}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 554 "feiparser.l"
{return token::maximum_number_of_iterations;}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 555 "feiparser.l"
{return token::tolerance_1;}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 556 "feiparser.l"
{return token::tolerance_2;}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 557 "feiparser.l"
{return token::Gauss;}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 558 "feiparser.l"
{return token::each;}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 559 "feiparser.l"
{return token::points;}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 560 "feiparser.l"
{return token::point;}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 561 "feiparser.l"
{return token::single;}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 562 "feiparser.l"
{return token::value;}
	YY_BREAK
/* Pisano Model options  */
case 307:
YY_RULE_SETUP
#line 566 "feiparser.l"
{return token::M_in;}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 567 "feiparser.l"
{return token::kd_in;}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 568 "feiparser.l"
{return token::xi_in;}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 569 "feiparser.l"
{return token::h_in;}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 570 "feiparser.l"
{return token::m_in;}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 571 "feiparser.l"
{return token::beta_min;}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 572 "feiparser.l"
{return token::n_in;}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 573 "feiparser.l"
{return token::a_in;}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 574 "feiparser.l"
{return token::elastic_modulus_1atm;}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 575 "feiparser.l"
{return token::eplcum_cr_in;}
	YY_BREAK
/* Load options */
case 317:
#line 579 "feiparser.l"
case 318:
#line 580 "feiparser.l"
case 319:
#line 581 "feiparser.l"
case 320:
#line 582 "feiparser.l"
case 321:
#line 583 "feiparser.l"
case 322:
#line 584 "feiparser.l"
case 323:
#line 585 "feiparser.l"
case 324:
#line 586 "feiparser.l"
case 325:
YY_RULE_SETUP
#line 586 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::FORCE;
									}
	YY_BREAK
/* Acceleration field options*/
case 326:
YY_RULE_SETUP
#line 592 "feiparser.l"
{return token::ax;}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 593 "feiparser.l"
{return token::ay;}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 594 "feiparser.l"
{return token::az;}
	YY_BREAK
/* Time-History types */
case 329:
YY_RULE_SETUP
#line 597 "feiparser.l"
{return token::TH_PATH_SERIES;}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 598 "feiparser.l"
{return token::TH_PATH_TIME_SERIES;}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 599 "feiparser.l"
{return token::TH_LINEAR;}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 600 "feiparser.l"
{return token::TH_FROM_REACTIONS;}
	YY_BREAK
/* Element load types */
case 333:
YY_RULE_SETUP
#line 603 "feiparser.l"
{return token::self_weight;}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 604 "feiparser.l"
{return token::surface;}
	YY_BREAK
/* Time-History options */
case 335:
YY_RULE_SETUP
#line 607 "feiparser.l"
{return token::startTime;}
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 608 "feiparser.l"
{return token::endTime;}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 609 "feiparser.l"
{return token::Period;}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 610 "feiparser.l"
{return token::Phase;}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 611 "feiparser.l"
{return token::Amplitude;}
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 612 "feiparser.l"
{return token::frequency;}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 613 "feiparser.l"
{return token::frequency1;}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 614 "feiparser.l"
{return token::frequency2;}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 615 "feiparser.l"
{return token::frequency3;}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 616 "feiparser.l"
{return token::frequency4;}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 617 "feiparser.l"
{return token::MaxTime;}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 618 "feiparser.l"
{return token::MAGNITUDES;}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 619 "feiparser.l"
{return token::MAGNITUDE;}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 620 "feiparser.l"
{return token::initial_velocity;}
	YY_BREAK
/* Mass options */
case 349:
YY_RULE_SETUP
#line 623 "feiparser.l"
{return token::mx;}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 624 "feiparser.l"
{return token::my;}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 625 "feiparser.l"
{return token::mz;}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 626 "feiparser.l"
{return token::Imx;}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 627 "feiparser.l"
{return token::Imy;}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 628 "feiparser.l"
{return token::Imz;}
	YY_BREAK
/* Damping model types */
case 355:
YY_RULE_SETUP
#line 631 "feiparser.l"
{return token::DAMPING_RAYLEIGH;}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 632 "feiparser.l"
{return token::DAMPING_CAUGHEY3;}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 633 "feiparser.l"
{return token::DAMPING_CAUGHEY4;}
	YY_BREAK
/* Damping model options */
case 358:
YY_RULE_SETUP
#line 636 "feiparser.l"
{return token::a0;}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 637 "feiparser.l"
{return token::a1;}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 638 "feiparser.l"
{return token::stiffness_to_use;}
	YY_BREAK
case 361:
#line 640 "feiparser.l"
case 362:
#line 641 "feiparser.l"
case 363:
YY_RULE_SETUP
#line 641 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::stiffness_to_use_opt;
									}
	YY_BREAK
/* Constraint types */
case 364:
YY_RULE_SETUP
#line 647 "feiparser.l"
{return token::equaldof;}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 648 "feiparser.l"
{return token::equaldof;}
	YY_BREAK
/* Constraint options */
case 366:
YY_RULE_SETUP
#line 651 "feiparser.l"
{return token::master;}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 652 "feiparser.l"
{return token::slave;}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 653 "feiparser.l"
{return token::dof_to_constrain;}
	YY_BREAK
/* DRM OPtions */
case 369:
YY_RULE_SETUP
#line 656 "feiparser.l"
{return token::scale_factor;}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 657 "feiparser.l"
{return token::displacement_scale_unit;}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 658 "feiparser.l"
{return token::velocity_scale_unit;}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 659 "feiparser.l"
{return token::acceleration_scale_unit;}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 660 "feiparser.l"
{return token::number_of_steps;}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 661 "feiparser.l"
{return token::number_of_boundary_nodes;}
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 662 "feiparser.l"
{return token::number_of_exterior_nodes;}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 663 "feiparser.l"
{return token::number_of_drm_elements;}
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 664 "feiparser.l"
{return token::element_file;}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 665 "feiparser.l"
{return token::boundary_nodes_file;}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 666 "feiparser.l"
{return token::exterior_nodes_file;}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 667 "feiparser.l"
{return token::displacement_file;}
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 668 "feiparser.l"
{return token::acceleration_file;}
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 669 "feiparser.l"
{return token::hdf5_file;}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 670 "feiparser.l"
{return token::velocity_file;}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 671 "feiparser.l"
{return token::force_file;}
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 672 "feiparser.l"
{return token::series_file;}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 673 "feiparser.l"
{return token::time_series_file;}
	YY_BREAK
/* ================================================================================================= */
/* ========                     DEFINE                                                     ========= */
/* ================================================================================================= */
/* Defineable things */
case 387:
YY_RULE_SETUP
#line 681 "feiparser.l"
{return token::ALGORITHM;}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 682 "feiparser.l"
{return token::CONVERGENCE_TEST;}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 683 "feiparser.l"
{return token::INTEGRATION;}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 684 "feiparser.l"
{return token::SOLVER;}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 685 "feiparser.l"
{return token::DYNAMICINTEGRATOR;}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 686 "feiparser.l"
{return token::STATICINTEGRATOR;}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 687 "feiparser.l"
{return token::OUTPUT;}
	YY_BREAK
/* Constitutive algorithm options*/
case 394:
#line 691 "feiparser.l"
case 395:
#line 692 "feiparser.l"
case 396:
#line 693 "feiparser.l"
case 397:
#line 694 "feiparser.l"
case 398:
YY_RULE_SETUP
#line 694 "feiparser.l"
{yylval->ident = new string(yytext); return token::CONSTITUTIVE_ALGNAME;}
	YY_BREAK
/* Algorithm options*/
case 399:
#line 698 "feiparser.l"
case 400:
#line 699 "feiparser.l"
case 401:
#line 700 "feiparser.l"
case 402:
#line 701 "feiparser.l"
case 403:
#line 702 "feiparser.l"
case 404:
YY_RULE_SETUP
#line 702 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::ALGNAME;
									 }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 707 "feiparser.l"
{return token::yield_function_relative_tolerance;}
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 708 "feiparser.l"
{return token::stress_relative_tolerance;}
	YY_BREAK
/* Test options */
case 407:
#line 712 "feiparser.l"
case 408:
#line 713 "feiparser.l"
case 409:
#line 714 "feiparser.l"
case 410:
#line 715 "feiparser.l"
case 411:
#line 716 "feiparser.l"
case 412:
YY_RULE_SETUP
#line 716 "feiparser.l"
{
										        yylval->ident = new string(yytext);
										        return token::TESTNAME;
									         }
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 720 "feiparser.l"
{return token::tolerance;}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 721 "feiparser.l"
{return token::maximum_iterations;}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 722 "feiparser.l"
{return token::verbose_level;}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 723 "feiparser.l"
{return token::minimum_time_step;}
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 724 "feiparser.l"
{return token::maximum_time_step;}
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 725 "feiparser.l"
{return token::number_of_iterations;}
	YY_BREAK
/* define solver options */
case 419:
#line 729 "feiparser.l"
case 420:
#line 730 "feiparser.l"
case 421:
#line 731 "feiparser.l"
case 422:
#line 732 "feiparser.l"
case 423:
YY_RULE_SETUP
#line 732 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::SOLVERNAME;
									}
	YY_BREAK
/* define static and dynamic integrator options */
case 424:
YY_RULE_SETUP
#line 738 "feiparser.l"
{return token::DYNAMICINTEGRATOR_NEWMARK;}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 739 "feiparser.l"
{return token::DYNAMICINTEGRATOR_HHT;}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 740 "feiparser.l"
{return token::STATICINTEGRATOR_DISPLACEMENT;}
	YY_BREAK
/* SIMULATE*/
case 427:
YY_RULE_SETUP
#line 744 "feiparser.l"
{return token::STATIC;}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 745 "feiparser.l"
{return token::DYNAMIC;}
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 746 "feiparser.l"
{return token::TRANSIENT;}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 747 "feiparser.l"
{return token::VARIABLETRANSIENT;}
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 748 "feiparser.l"
{return token::EIGEN;}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 749 "feiparser.l"
{return token::USING;}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 750 "feiparser.l"
{return token::time_step;}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 751 "feiparser.l"
{return token::number_of_modes;}
	YY_BREAK
/* OUTPUT */
case 435:
YY_RULE_SETUP
#line 754 "feiparser.l"
{return token::BINARY;}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 755 "feiparser.l"
{return token::TEXT;}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 756 "feiparser.l"
{return token::ENABLE;}
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 757 "feiparser.l"
{return token::DISABLE;}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 758 "feiparser.l"
{return token::COMPRESSION;}
	YY_BREAK
/* ================================================================================================= */
/* ========                    AUXILLIARY WORDS                                            ========= */
/* ================================================================================================= */
case 440:
YY_RULE_SETUP
#line 765 "feiparser.l"
{return token::AT;}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 766 "feiparser.l"
{return token::ALL;}
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 767 "feiparser.l"
{return token::AND;}
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 768 "feiparser.l"
{return token::TEXTDOFS;}
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 769 "feiparser.l"
{return token::FACTOR;}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 770 "feiparser.l"
{return token::INCREMENT;}
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 771 "feiparser.l"
{return token::NAME;}
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 772 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 773 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 774 "feiparser.l"
{return token::TEXTNUMBER;}
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 775 "feiparser.l"
{return token::of;}
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 776 "feiparser.l"
{return token::STEPS;}
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 777 "feiparser.l"
{return token::TO;}
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 778 "feiparser.l"
{return token::TYPE;}
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 779 "feiparser.l"
{return token::USE;}
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 780 "feiparser.l"
{return token::WITH;}
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 781 "feiparser.l"
{return token::NODES;}
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 782 "feiparser.l"
{return token::DOMAIN_;}
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 783 "feiparser.l"
{return token::dof;}
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 784 "feiparser.l"
{return token::RESPONSE;}
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 785 "feiparser.l"
{return token::FILE;}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 786 "feiparser.l"
{return token::FROM;}
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 787 "feiparser.l"
{return token::EVERY;}
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 788 "feiparser.l"
{return token::LEVEL;}
	YY_BREAK
/* Greek */
case 464:
YY_RULE_SETUP
#line 791 "feiparser.l"
{return token::alpha;}
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 792 "feiparser.l"
{return token::beta;}
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 793 "feiparser.l"
{return token::gamma;}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 794 "feiparser.l"
{return token::lambda;}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 795 "feiparser.l"
{return token::kappa;}
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 796 "feiparser.l"
{return token::delta;}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 799 "feiparser.l"
{return token::INTEGRATIONPOINTS;}
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 800 "feiparser.l"
{return token::IntegrationRule;}
	YY_BREAK
/* DOFS */
case 472:
#line 805 "feiparser.l"
case 473:
#line 806 "feiparser.l"
case 474:
#line 807 "feiparser.l"
case 475:
#line 808 "feiparser.l"
case 476:
#line 809 "feiparser.l"
case 477:
#line 810 "feiparser.l"
case 478:
#line 811 "feiparser.l"
case 479:
#line 812 "feiparser.l"
case 480:
#line 813 "feiparser.l"
case 481:
YY_RULE_SETUP
#line 813 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::DOF;
									}
	YY_BREAK
/*Other language commands*/
case 482:
#line 820 "feiparser.l"
case 483:
#line 821 "feiparser.l"
case 484:
YY_RULE_SETUP
#line 821 "feiparser.l"
{
									yylval->ident = new string(yytext);
									return token::BYE;
								}
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 825 "feiparser.l"
{void show_einstein(); show_einstein();}
	YY_BREAK
/* ================================================================================================= */
/* ========                     NON KEYWORDS                                               ========= */
/* ================================================================================================= */
/* names */
case 486:
YY_RULE_SETUP
#line 835 "feiparser.l"
{
										yylval->ident = new string(yytext);
										return token::IDENT;
									}
	YY_BREAK
/*numbers*/
case 487:
#line 842 "feiparser.l"
case 488:
YY_RULE_SETUP
#line 842 "feiparser.l"
{
										yylval->value = new Quantity(atof(yytext), ESSIunits::unitless);
										return token::NUMBER;
									}
	YY_BREAK
/* End-of-file discards current file and returns to the previous, otherwise to the interactive prompt */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IFILE):
case YY_STATE_EOF(COMMENT):
#line 847 "feiparser.l"
{
										if (popfile()==0)
										{
											if(FLAG_interactive_mode == 1)
											{
												newstdin();
												yyrestart(yyin);
												//yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
												prompt = thePrompt;
												//cout << prompt;
											}
											else
											{
												cout << endl << "You forgot to say \"bye\"... " << endl;
												wipe_model();
												exit(0);
											}

										}
										if (strncmp(curfilename, initial, 5) == 0) //I dont like strncmp :(
										{
											prompt = thePrompt;
											//cout << prompt;
										}
										yylloc -> begin.filename = yylloc -> end.filename = new std::string(curfilename);
									}
	YY_BREAK
/* comments */
case 489:
YY_RULE_SETUP
#line 875 "feiparser.l"

	YY_BREAK
case 490:
YY_RULE_SETUP
#line 876 "feiparser.l"

	YY_BREAK
/* ignore white space, tabs and carriage return*/
case 491:
YY_RULE_SETUP
#line 880 "feiparser.l"
//{yylloc -> step();}
	YY_BREAK
/* ignore newline*/
/*\n                                  {yylloc -> lines(1);} */
case 492:
/* rule 492 can match eol */
YY_RULE_SETUP
#line 884 "feiparser.l"
{
										yycolumn = 1;
									}
	YY_BREAK
/* Match text strings */
case 493:
/* rule 493 can match eol */
YY_RULE_SETUP
#line 889 "feiparser.l"
{
										std::string* thisString = new std::string(yytext);
										yylval->ident = thisString;
										return token::STRING;
									}
	YY_BREAK
/* catch-all of the rest and report (only useless characters like ? get to this point */
case 494:
YY_RULE_SETUP
#line 896 "feiparser.l"
{ cout << "Failed to parse the character at line " << yylineno << " : " << *yytext << endl; }
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 898 "feiparser.l"
ECHO;
	YY_BREAK
#line 5190 "feiparser.lex.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3229 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3229 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3228);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 898 "feiparser.l"




int newfile(char* fn) {
	FILE *f = fopen(fn, "r");

	bufstack *bs = (bufstack*) malloc(sizeof( bufstack)) ;

	if (!f)     {perror(fn); return 0 ;}
	if (!bs)    {perror("Out of memory."); exit(1);}

	if (curbs) curbs->lineno = yylineno;
	bs->prev = curbs;

	bs->bs = yy_create_buffer(f,YY_BUF_SIZE);
	bs -> f = f;
	bs -> filename = fn;
	bs -> lineno = 1;
	yy_switch_to_buffer(bs->bs);
	curbs = bs;
	yylineno = 1;
	curfilename = fn;

	cout << "Including: \"" << fn << "\"" << endl << endl;

	return 1;
}



int newstdin()
{

	FILE *f = stdin;

	bufstack *bs = (bufstack *) malloc(sizeof( bufstack)) ;


	if (!f)
	{
		perror("Could not open STDIN!");
		return 0 ;
	}
	if (!bs)
	{
		perror("Out of memory.");
		exit(1);
	}

	if (curbs)
	{
		curbs->lineno = yylineno;
	}
	bs->prev = curbs;
	bs->bs = yy_create_buffer(f,YY_BUF_SIZE);
	bs -> f = f;
	bs -> lineno = 1;
	bs -> filename = initial;

	yy_switch_to_buffer(bs->bs);
	curbs = bs;


	yylineno = 1;
	curfilename = initial;

	cout << "Input: STDIN" << endl << endl;
	prompt = thePrompt;
	//cout << prompt ;
	return 1;
}

int popfile(void)
{
	bufstack *bs = curbs;
	bufstack *prevbs;

	if (!bs)
	{
		return 0;
	}

	fclose(bs->f);
	yy_delete_buffer(bs->bs);

	prevbs = bs-> prev;
	free(bs);

	if (!prevbs)
	{
		return 0;
	}

	yy_switch_to_buffer(prevbs->bs);
	curbs = prevbs;

	cout << "Done including: \"" << curfilename << "\" (" << yylineno << " lines included)." << endl;
	cout << "Continuing with \"" << curbs->filename << "\" at line " << curbs->lineno << "." << endl;

	cout << endl << prompt;

	yylineno = curbs->lineno;
	curfilename = curbs->filename;

	return 1;
}

int error_behavior()
{
	//while (popfile() != 0); // Discard everything!

	//Start new interactive mode
	if ( FLAG_interactive_mode == 1 )
	{
		newstdin();
		yyrestart(yyin);

		prompt = thePrompt;
		//if (recovery_mode == 1)
		//    prompt = "(safe) " + thePrompt;
	}
	else
	{
		exit(-1);
	}

	return 0;
}


void print_usage()
{
	cout <<
		 "RealESSI Simulator: UCDavis Earthquake-Soil-Structure-Interaction Simulator \n"
		 "              -          -    -         -                     \n"
		 "Usage: essi [-cfhnsmbe FILENAME]\n"
		 "  -c --cpp-output                : Output cpp version of the analysis done. \n"
		 "  -f --filename [FILENAME]       : Include and run FILENAME. \n"
		 "  -h --help                      : Print this message. \n"
		 "  -n --no-interactive            : Disable interactive mode. \n"
		 "  -s --set-variable              : Set a variable from the command line. \n"
		 "  -d --dry-run                   : Do not execute ESSI API calls. Just parse. \n"
		 "  -m --model-name [NAME]         : Set the model name from the command line. \n"
		 "  -p --profile-report [FILENAME] : Set the filename for the profiler report (and activate lightweight profiling)\n"
		 " \n\n"
		 "Example to set a variable name from command line:\n"
		 "    essi -s a=10,b=20,c=30\n"
		 "Runs ESSI with variables a, b, and c set to 10, 20 and 30 respectively.\n"
		 "At this time, only ESSIunits::unitless variables can be set. \n"
		 "\n\n";

}





#ifdef _PARALLEL_PROCESSING
  #include "../ModifiedOpenSeesServices/domain/domain/partitioned/PartitionedDomain.h"
  #include "../ModifiedOpenSeesServices/graph/partitioner/GraphPartitioner.h"
  #include <../ModifiedOpenSeesServices/actor/objectBroker/FEM_ObjectBroker.h>
  #include <../ModifiedOpenSeesServices/actor/machineBroker/MachineBroker.h>
  #include <../ModifiedOpenSeesServices/actor/machineBroker/MPI_MachineBroker.h>

  extern PartitionedDomain theDomain;
  extern int OPS_PARALLEL_PROCESSING;
  extern int OPS_NUM_SUBDOMAINS;
  extern bool OPS_PARTITIONED;
  extern FEM_ObjectBroker *OPS_OBJECT_BROKER;
  extern MachineBroker  *OPS_MACHINE;
  extern GraphPartitioner  *OPS_GRAPH_PARTITIONER;
  static MPI_MachineBroker *theMachineBroker = 0;
#endif


int start_parser(int argc, char**argv)
{

	//Allegedly, this forces cout to be non-buffered. Always flushes!!
	std::cout<<std::unitbuf; 

	
	//Welcome message
	welcome_msg();

	// Generate previously known units list
	set_known_units();

	//Parse Command Line Parameters
	int c;
	char *filename_from_command_line = 0;

	while (1)
	{
		static struct option long_options[] =
		{
			{"cpp-output",       no_argument,       0, 'c'},
			{"file",             required_argument, 0, 'f'},
			{"help",             no_argument,       0, 'h'},
			{"model-name",       required_argument, 0, 'm'},
			{"no-interactive",   no_argument,       0, 'n'},
			{"set-variable",     required_argument, 0, 's'},
			{"no-cpp-output",    no_argument,       0, 'x'},
			{"dry-run",          no_argument,       0, 'd'},
            {"profile-report",   required_argument, 0, 'p'},
			{"debug-attach",     no_argument      , 0, 'a'},
			{0, 0, 0, 0}
		};

		/* getopt_long stores the option index here. */
		int option_index = 0;

		//This is the command line option parser
		c = getopt_long(argc, argv, "cf:hns:xm:dp:a", long_options, &option_index);

		/* Detect the end of the options. */
		if (c == -1)
		{
			break;
		}

		switch (c)
		{

			case 'c':  // -c --cpp-output: Create .cpp output
				FLAG_generate_cpp_output = 1;
				break;
			case 'f': // -f --file: Take input from file
				filename_from_command_line = optarg;
				FLAG_run_file = 1;
				break;
			case 'h': // -h --help: print usage
				print_usage();
				return (0);
				break;
			case 'n': // -n --no-interactive: disable interactive mode
				FLAG_interactive_mode = 0;
				break;
			case 's': // -s --set-variable: Set a variable from the command line
				set_variables(optarg);
				break;
			case 'x': // -x --no-cpp-output: disable cpp output (default)
				FLAG_generate_cpp_output = 0;
				break;
			case 'd': // -d --dry-run: do not call API... just make parser call and produce cpp output if so enabled
				FLAG_dry_run = 1;
				set_dry_run_mode(FLAG_dry_run);
				break;
			case 'm': // -m --model-name: Set model name from the command line
				set_model_name(optarg);
				break;
			case 'b': //  -b --binary-output: The output generated will be in binary instead of plain text.
				FLAG_binary_output = 1;
				break;
			case 'p': // -p --profile-report: Set the filename for the profiler report (and activate profiling)
				//cout << "Setting report file to:" << optarg << endl;
				set_profiling_results_filename(optarg);
				break;
            case 'a': // Debugger attach loop
                FLAG_debug_attach = 1;
                break;
			default:
				print_usage();
				return (0);
		}
	}

	if (optind < argc)
	{
		cout << "Unexpected option" << endl << endl;
		print_usage();
		return (0);
	}

	if (FLAG_interactive_mode)
	{
		newstdin();
	}

	if (FLAG_run_file)
	{
		newfile(filename_from_command_line);
		set_outcppfile_name(string(filename_from_command_line));
		prompt = "";
	}

    if(FLAG_debug_attach)
    {       
            int i = 0;
            char hostname[256];
            gethostname(hostname, sizeof(hostname));
            printf("PID %d on %s ready for attach\n", getpid(), hostname);
            fflush(stdout);
            while (0 == i)
                sleep(5);
    }

#ifdef _PARALLEL_PROCESSING
	//Kill other processes in case of dry run... parallel is not needed.
	if(FLAG_dry_run)
	{
		theMachineBroker->shutdown();
	}
#endif

	// Parse flag
	int exitflag = -1;

	//Construct a parser object
	yy::feiparser parser;

	// Start parsing!
	cout << prompt;
	exitflag = parser.parse();

	//Exit
	return exitflag;
}




/*  SIGNAL HANDLING  */


void signalHandler(int signum)
{
    #ifdef _PARALLEL_PROCESSING
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    cout << "(" << rank << ") ";
    #endif
	if(signum == SIGINT)
	{
		cout << "Caught SIGINT! Program ending." << endl;
	}
	else if(signum == SIGABRT)
	{
		cout << "Caught SIGABRT! Program ending." << endl;
	}
	else if(signum == SIGSEGV)
	{
		cout << "Caught SIGSEGV! Program ending." << endl;
	}
	else if(signum == SIGTERM)
	{
		cout << "Caught SIGTERM! Program ending." << endl;
	}
	else if(signum == SIGILL)
	{
		cout << "Caught SIGILL! Program ending." << endl;
	}
	else if(signum == SIGFPE)
	{
		cout << "Caught SIGFPE! Program ending." << endl;
        int exceptions;
        exceptions = fetestexcept(FE_INVALID | FE_DIVBYZERO| FE_OVERFLOW);
        if(exceptions & FE_INVALID)
        {
            cout << "   Floating point error -- (FE_INVALID) - Undefined operation (0/0, 0/1, sqrt(-1), inf - int, etc.)\n" << endl;
        }
        if(exceptions & FE_DIVBYZERO)
        {
            cout << "   Floating point error -- (FE_DIVBYZERO) - 0/0\n" << endl;
        }
        if(exceptions & FE_OVERFLOW)
        {
            cout << "   Floating point error -- (FE_OVERFLOW) - Result is larger than the largest representable number at current accuracy. \n" << endl;
        }
        if(exceptions & FE_UNDERFLOW)
        {
            cout << "   Floating point error -- (FE_UNDERFLOW) - Result too small (but not zero) to be represented as a number at current accuracy. \n" << endl;
        }

	}
	else if(signum == SIGUSR1 || signum == SIGUSR2)
	{
		cout << "HDF5 set to flush, please wait...\n\n";
		call_hdf5_flush_next_chance();
		return; // Do not quit on these signals.
	}
    print_stacktrace();
	exit(signum);
}

 /* END SIGNALS */

int main(int argc, char**argv)
{
    //feclearexcept(FE_ALL_EXCEPT);
    //feenableexcept(FE_INVALID   | 
    //FE_DIVBYZERO | 
    //FE_OVERFLOW);

	signal(SIGINT, signalHandler);
	signal(SIGABRT, signalHandler);
	signal(SIGSEGV, signalHandler);
	signal(SIGTERM, signalHandler);
	signal(SIGILL, signalHandler);
	signal(SIGFPE, signalHandler);
	signal(SIGUSR1, signalHandler);
    signal(SIGUSR2, signalHandler);


	int exitflag = -1;

#ifdef _PARALLEL_PROCESSING
	// In parallel processing, a few things have to be setup before starting.

   FEM_ObjectBroker theBroker;
   MPI_MachineBroker theMachine(&theBroker, argc, argv);
   theMachineBroker = &theMachine;
   int rank = theMachine.getPID();
   int np = theMachine.getNP();

   if (rank != 0) //If this is the main machine
   {

		exitflag = theMachine.runActors();
   } 
   else  // Or if it is a slave node
   {
		OPS_OBJECT_BROKER       = &theBroker;
		OPS_MACHINE             = &theMachine;
		OPS_PARALLEL_PROCESSING = np;
		OPS_NUM_SUBDOMAINS      = np - 1;
		OPS_PARTITIONED         = false;

		exitflag = start_parser(argc, argv);
	}

	//this got moved to the wipe_model() API call...... 
	theDomain.clearAll();
	theMachine.shutdown();

	cout << "Process # " << rank << " ended with exitflag = " << exitflag << endl;
#else
	exitflag = start_parser(argc, argv);
#endif


	return exitflag;
}
  


int smaller(int a, int b)
{
	if (a >= b)
	{
		return b;
	}
	else
	{
		return a;
	}
}

// =================================================================================
// Please do not erase! Might make it into the code some day. (Jose Abell)
//
// This code replaces standard input as the main input mechanism, and implements
// a smarter prompt, which has auto replace, code history, etc.
//
// Buggy and unstable as it is. (To make it work, the is a macro that needs to be enabled on top of
// this file)
//
//static int my_yyinput(char *buf, int max_size)
//{
//    int   len;
//
//    if (st_readline_buffer == NULL)
//    {
//        st_readline_used_len = 0;
//        st_readline_buffer = readline(prompt.c_str());
//
//        if (st_readline_buffer == NULL)
//            return 0;
//        else
//        {
//            //strncat(st_readline_buffer, " ", 1);
//        }
//    }
//
//    len = smaller(strlen(st_readline_buffer) - st_readline_used_len, max_size);
//
//    if (len == 0)
//    {
//        strncat(st_readline_buffer, " ", 1);
//        len = 1;
//    }
//
//    strncpy(buf, &st_readline_buffer[st_readline_used_len], len);
//    add_history(st_readline_buffer);
//
//    st_readline_used_len += len;
//    if (st_readline_buffer[st_readline_used_len] == '\0')
//    {
//        free(st_readline_buffer);
//        st_readline_buffer = NULL;
//    }
//
//    return len;
//}
//// =================================================================================

#include <ctime>
void welcome_msg()
{
	time_t rawtime;
	struct tm *timeinfo;
	char timestring[80];
	time ( &rawtime );
	timeinfo = localtime ( &rawtime );
	strftime (timestring, 80, "%b %d %Y at %H:%M:%S", timeinfo);
	cout << "                                                               " << endl;
	cout << "                                                               " << endl;
	cout << "  The Finite Element Interpreter                               " << endl;
	cout << "                                                               " << endl;
	cout << "  Real ESSI                                                  " << endl;
	cout << "  Earthquake Soil Structure Interaction Simulator            " << endl;
	cout << "                                                             " << endl;
	#ifdef _PARALLEL_PROCESSING
	cout << " Parallel processing mode. Main machine!                     " << endl;
	#else
	cout << "  Sequential processing mode.                                " << endl;
	#endif
	cout << "                                                             " << endl;
	cout << "Version : " << VERSION << endl;
	cout << "Compiled: " << __DATE__ << " at " << __TIME__  << endl;
	cout << "Time Now: " << timestring  << endl;
	cout << "                                                               " << endl;
	cout << "Static startup tips:                                           " << endl;
	cout << " * Remember: Every command ends with a semicolon ';'.          " << endl;
	cout << " * Type 'quit;' or 'exit;' to finish.                          " << endl;
	cout << " * Run 'essi -h' to see available command line options.        " << endl;
	cout << "                                                               " << endl;
}

void set_known_units()
{
	//Base units*/
    global_variables["m"] = Quantity(1.0, ESSIunits::m);
    global_variables["kg"] = Quantity(1.0, ESSIunits::kg);
    global_variables["s"] = Quantity(1.0, ESSIunits::s);

    // Length
    global_variables["cm"] = Quantity(1.0, ESSIunits::cm);
    global_variables["mm"] = Quantity(1.0, ESSIunits::mm);
    global_variables["Km"] = Quantity(1.0, ESSIunits::km);

    //Time
    global_variables["Hz"] = Quantity(1.0, ESSIunits::Hz);
    global_variables["ms"] = Quantity(1.0, ESSIunits::ms);
    global_variables["ns"] = Quantity(1.0, ESSIunits::ns);

    //Force
    global_variables["N"] = Quantity(1.0, ESSIunits::N);
    global_variables["kN"] = Quantity(1.0, ESSIunits::kN);

    //Pressure
    global_variables["Pa"] = Quantity(1.0, ESSIunits::Pa);
    global_variables["kPa"] = Quantity(1.0, ESSIunits::kPa);
    global_variables["MPa"] = Quantity(1.0, ESSIunits::MPa);
    global_variables["GPa"] = Quantity(1.0, ESSIunits::GPa);

    //Imperial units
    global_variables["pound"] = Quantity(4.448221615255 , ESSIunits::N);
    global_variables["inch"] = Quantity(0.0254 , ESSIunits::m);
    global_variables["feet"] = Quantity(0.3048 , ESSIunits::m);
    global_variables["yard"] = Quantity(0.9144 , ESSIunits::m);
    global_variables["mile"] = Quantity(1.60935e3 , ESSIunits::m);
    global_variables["psi"] = Quantity(6894.757293178 , ESSIunits::Pa);
	global_variables["ksi"] = Quantity(6894757.293178 , ESSIunits::Pa);
	global_variables["kip"] = Quantity(4448.221615255 , ESSIunits::N);
	
    //Constants
	global_variables["g"] = ESSIunits::g;  // gravitational acceleration on Earth at sea level and 45degrees of latitude
	global_variables["pi"] = Quantity(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986, ESSIunits::unitless); // pi to a useless ammount of significant digits

	// Put these variables in the locked list.... cuz we own this!
	map<string, Quantity>::const_iterator it;
	for (it = global_variables.begin();
			it != global_variables.end();
			it++)
	{
		locked_global_variables.insert(it->first);
	}
}

void set_variables(char *cstring)
{
	string variables(cstring);

	cout << endl << "The following variables are being set from the command line:" << endl << endl;

	while (1)
	{
		size_t i1 = variables.find("=");
		size_t i2 = variables.find(",");

		if (i1 == string::npos)
		{
			break;
		}

		string var_name(variables.substr(0, i1));
		string var_value(variables.substr(i1 + 1, i2 - i1 - 1));

		if (i2 == string::npos)
		{
			variables = "";
		}
		else
		{
			variables = variables.substr(i2 + 1);
		}

		cout << var_name << " = " << var_value << endl;

		double value = boost::lexical_cast<double>(var_value);
		global_variables[var_name] = Quantity(value, ESSIunits::unitless); // :) love boost!
	}
	cout << endl << endl;
}




























void show_einstein()
{

	cout << " "                                                                                 << endl;
	cout << "                    .+~                :xx++::"                                    << endl;
	cout << "                   :`. -          .!!X!~\"?!`~!~!. :-:."                           << endl;
	cout << "                  <             .!!!H\":.~ ::+!~~!!!~ `%X."                        << endl;
	cout << "                  '             ~~!M!!>!!X?!!!!!!!!!!...!~."                       << endl;
	cout << "                              <!:!MM!~:XM!!!!!!.:!..~ !.  `<"                      << endl;
	cout << "                  <: `   :~ .:<~!!M!XXHM!!!X!XXHtMMHHHX!  ~ ~"                     << endl;
	cout << "                ~~~~<' ~!!!:!!!!!XM!!M!!!XHMMMRMSXXX!!!!!!:  <`"                   << endl;
	cout << "                  `<  <::!!!!!X!X?M!!M!!XMMMMXXMMMM?!!!!!!?!:~<"                   << endl;
	cout << "               : '~~~<!!!XMMH!!XMXMXHHXXXXM!!!!MMMMSXXXX!!!!!!!~"                  << endl;
	cout << "            :    ::`~!!!MMMMXXXtMMMMMMMMMMMHX!!!!!!HMMMMMX!!!!!: ~"                << endl;
	cout << "               '~:~!!!!!MMMMMMMMMMMMMMMMMMMMMMXXX!!!M??MMMM!!X!!i:"                << endl;
	cout << "               <~<!!!!!XMMMMMMMMMMMM8M8MMMMM8MMMMMXX!!!!!!!!X!?t?!:"               << endl;
	cout << "               ~:~~!!!!?MMMMMM@M@RMRRR$@@MMRMRMMMMMMXSX!!!XMMMX<?X!"               << endl;
	cout << "             :XX <!!XHMMMM88MM88BR$M$$$$8@8RN88MMMMMMMMHXX?MMMMMX!!!"              << endl;
	cout << "           .:X! <XMSM8M@@$$$$$$$$$$$$$$$$$$$B8R$8MMMMMMMMMMMMMMMMX!X"              << endl;
	cout << "          :!?! !?XMMMMM8$$$$8$$$$$$$$$$$$$$BBR$$MMM@MMMMMMMMMMMMMM!!X"             << endl;
	cout << "        ~<!!~ <!!XMMMB$$$$$$$$$$$$$$$$$$$$$$$$MMR$8MR$MMMMMMMMMMMMM!?!:"           << endl;
	cout << "        :~~~ !:X!XMM8$$$$$$$$$$$$$$$$$$$$$$$RR$$MMMMR8NMMMMMMMMMMMMM<!`-"          << endl;
	cout << "    ~:<!:~`~':!:HMM8N$$$$$$$$$$$$$$$$$$$$$$$$$8MRMM8R$MRMMMMMMMMRMMMX!"            << endl;
	cout << "  !X!``~~   :~XM?SMM$B$$$$$$$$$$$$$$$$$$$$$$BR$$MMM$@R$M$MMMMMM$MMMMX?L"           << endl;
	cout << " X~.      : `!!!MM#$RR$$$$$$$$$$$$$$$$$R$$$$$R$M$MMRRRM8MMMMMMM$$MMMM!?:"          << endl;
	cout << " ! ~ <~  !! !!~`` :!!MR$$$$$$$$$$RMM!?!??RR?#R8$M$MMMRM$RMMMM8MM$MMM!M!:>"         << endl;
	cout << ": ' >!~ '!!  !   .!XMM8$$$$$@$$$R888HMM!!XXHWX$8$RM$MR5$8MMMMR$$@MMM!!!< ~"        << endl;
	cout << "!  ' !  ~!! :!:XXHXMMMR$$$$$$$$$$$$$$$$8$$$$8$$$MMR$M$$$MMMMMM$$$MMM!!!!"          << endl;
	cout << " ~<!!!  !!! !!HMMMMMMMM$$$$$$$$$$$$$$$$$$$$$$$$$$MMM$M$$MM8MMMR$$MMXX!!!!/:`"      << endl;
	cout << "  ~!!!  !!! !XMMMMMMMMMMR$$$$$$$$$$$$R$RRR$$$$$$$MMMM$RM$MM8MM$$$M8MMMX!!!!:"      << endl;
	cout << "  !~ ~  !!~ XMMM%!!!XMMX?M$$$$$$$$B$MMSXXXH?MR$$8MMMM$$@$8$M$B$$$$B$MMMX!!!!"      << endl;
	cout << "  ~!    !! 'XMM?~~!!!MMMX!M$$$$$$MRMMM?!%MMMH!R$MMMMMM$$$MM$8$$$$$$MR@M!!!!!"      << endl;
	cout << "  <>    !!  !Mf x@#\"~!t?M~!$$$$$RMMM?Xb@!~`??MS$M@MMM@RMRMMM$$$$$$RMMMMM!!!!"     << endl;
	cout << "  !    '!~ <!!:!?M   !@!M<XM$$R5M$8MMM$! -XXXMMRMBMMM$RMMM@$R$BR$MMMMXX?!X!!"      << endl;
	cout << "  !    '!  !!X!!!?::xH!HM:MM$RM8M$RHMMMX...XMMMMM$RMMRRMMMMMMM8MMMMMMMMX!!X!"      << endl;
	cout << "  !     ~  !!?:::!!!MXMR~!MMMRMM8MMMMMS!!M?XXMMMMM$$M$M$RMMMM8$RMMMMMMMM%X!!"      << endl;
	cout << "  ~     ~  !~~X!!XHMMM?~ XM$MMMMRMMMMMM@MMMMMMMMMM$8@MMMMMMMMRMMMMM?!MMM%HX!"      << endl;
	cout << "           !!!!XSMMXXMM .MMMMMMMM$$$BB8MMM@MMMMMMMR$RMMMMMMMMMMMMMMMXX!?H!XX"      << endl;
	cout << "           XHXMMMMMMMM!.XMMMMMMMMMR$$$8M$$$$$M@88MMMMMMMMMMMMMMM!XMMMXX!!!XM"      << endl;
	cout << "      ~   <!MMMMMMMMRM:XMMMMMMMMMM8R$$$$$$$$$$$$$$$NMMMMMMMM?!MM!M8MXX!!/t!M"      << endl;
	cout << "      '   ~HMMMMMMMMM~!MM8@8MMM!MM$$8$$$$$$$$$$$$$$8MMMMMMM!!XMMMM$8MR!MX!MM"      << endl;
	cout << "          'MMMMMMMMMM'MM$$$$$MMXMXM$$$$$$$$$$$$$$$$RMMMMMMM!!MMM$$$$MMMMM<!M"      << endl;
	cout << "          'MMMMMMMMM!'MM$$$$$RMMMMMM$$$$$$$$$$$$$$$MMM!MMMX!!MM$$$$$M$$M$M!M"      << endl;
	cout << "           !MMMMMM$M! !MR$$$RMM8$8MXM8$$$$$$$$$$$$NMMM!MMM!!!?MRR$$RXM$$MR!M"      << endl;
	cout << "           !M?XMM$$M.< !MMMMMMSUSRMXM$8R$$$$$$$$$$#$MM!MMM!X!t8$M$MMMHMRMMX$"      << endl;
	cout << "    ,-,   '!!!MM$RMSMX:.?!XMHRR$RM88$$$8M$$$$$R$$$$8MM!MMXMH!M$$RMMMMRNMMX!$"      << endl;
	cout << "   -'`    '!!!MMMMMMMMMM8$RMM8MBMRRMR8RMMM$$$$8$8$$$MMXMMMMM!MR$MM!M?MMMMMM$"      << endl;
	cout << "          'XX!MMMMMMM@RMM$MM@$$BM$$$M8MMMMR$$$$@$$$$MM!MMMMXX$MRM!XH!!??XMMM"      << endl;
	cout << "          `!!!M?MHMMM$RMMMR@$$$$MR@MMMM8MMMM$$$$$$$WMM!MMMM!M$RMM!!.MM!%M?~!"      << endl;
	cout << "           !!!!!!MMMMBMM$$RRMMMR8MMMMMRMMMMM8$$$$$$$MM?MMMM!f#RM~    `~!!!~!"      << endl;
	cout << "           ~!!HX!!~!?MM?MMM??MM?MMMMMMMMMRMMMM$$$$$MMM!MMMM!!"                     << endl;
	cout << "           '!!!MX!:`~~`~~!~~!!!!XM!!!?!?MMMM8$$$$$MMMMXMMM!!"                      << endl;
	cout << "            !!~M@MX.. <!!X!!!!XHMHX!!``!XMMMB$MM$$B$M!MMM!!"                       << endl;
	cout << "            !!!?MRMM!:!XHMHMMMMMMMM!  X!SMMX$$MM$$$RMXMMM~"                        << endl;
	cout << "             !M!MMMM>!XMMMMMMMMXMM!!:!MM$MMMBRM$$$$8MMMM~"                         << endl;
	cout << "             `?H!M$R>'MMMM?MMM!MM6!X!XM$$$MM$MM$$$$MX$f"                           << endl;
	cout << " _______      `MXM$8X MMMMMMM!!MM!!!!XM$$$MM$MM$$$RX@\""                           << endl;
	cout << "/       \\_/|   ~M?$MM !MMMMXM!!MM!!!XMMM$$$8$XM$$RM!`"                            << endl;
	cout << "|Go AGS! _/    !XMMM !MMMMXX!XM!!!HMMMM$$$$RH$$M!~"                                << endl;
	cout << "\\_______/       'M?MM `?MMXMM!XM!XMMMMM$$$$$RM$$#"                                << endl;
	cout << "                 `>MMk ~MMHM!XM!XMMM$$$$$$BRM$M\""                                 << endl;
	cout << "                  ~`?M. !M?MXM!X$$@M$$$$$$RMM#"                                    << endl;
	cout << "                    `!M  !!MM!X8$$$RM$$$$MM#`"                                     << endl;
	cout << "                      !% `~~~X8$$$$8M$$RR#`"                                       << endl;
	cout << "                       !!x:xH$$$$$$$R$R*`"                                         << endl;
	cout << "                        ~!?MMMMRRRM@M#`       -Sushil-"                            << endl;
	cout << "                         `~???MMM?M\"`"                                            << endl;
	cout << "                             ``~~"                                                 << endl;
}


