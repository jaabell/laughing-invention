Compiler = GNU
#Compiler = LLVM
#Compiler = PGI
#Compiler = PARALLEL

DEBUG_MODE = DEBUG
#DEBUG_MODE = NO_DEBUG

PROGRAMMING_MODE = SEQUENTIAL
#PROGRAMMING_MODE = PARALLEL

ifeq ($(PROGRAMMING_MODE), PARALLEL)
  PROGRAMMING_FLAG = -D_PDD -D_PARALLEL_PROCESSING -D_TIMING -D_PETSC -D_BDEBUG -DPETSC_USE_BOPT_O -DPETSC_USE_EXTERN_CXX  
  MACHINE_INCLUDES  = 
  INCLUDES = $(ESSI_INCLUDES) $(PARALLEL_NUMERIC_INCLUDES) 
  LIBS = $(ESSI_LIBS) $(PARALLEL_NUMERIC_LIBS) $(PARALLEL_MACHINE_LIBS)
else
  PROGRAMMING_FLAG =
  MACHINE_INCLUDES  = 
  INCLUDES = $(ESSI_INCLUDES) $(SEQUENTIAL_NUMERIC_INCLUDES) 
  LIBS = $(ESSI_LIBS) $(SEQUENTIAL_NUMERIC_LIBS) $(SEQUENTIAL_MACHINE_LIBS)
endif


ifeq ($(Compiler), GNU)
  CC++            =  g++
  CC              =  gcc
  FC              =  gfortran
  FORTRAN         =  gfortran
  F90             =
  LINKER          =  g++
else ifeq ($(Compiler), LLVM)
  CC++            =  clang++
  CC              =  clang
  FC              =  gfortran
  FORTRAN         =  gfortran
  F90             =
  LINKER          =  clang++
else ifeq ($(Compiler), PGI)
  CC++            =  pgcpp
  CC              =  pgcc
  FC              =  pgf77
  FORTRAN         =  pgf77
# FC              =  g77
# FORTRAN         =  g77
  F90             =  pgf95
  LINKER          =  pgcpp
else ifeq ($(Compiler), PARALLEL)
  CC++            =  mpic++
  CC              =  mpicc
  FC              =  mpif77
  FORTRAN         =  mpif77
  F90             =
  LINKER          =  mpic++
endif

ifeq ($(DEBUG_MODE), NO_DEBUG)
  C++FLAGS        = -Wall \
                    -Winline \
                    -O \
                    -finline \
                    -finline-functions \
                    -finline-limit=1000 \
                    -fkeep-inline-functions \
                    -fdefault-inline \
                    -ffloat-store \
                    -ffast-math \
                    -funroll-loops \
                    -ftemplate-depth=1000 \
                    -D_LINUX \
                    -D_UNIX \
                    $(PROGRAMMING_FLAG) \
                    -DBrzi_nDarray_val \
                    -std=c++0x \
                    -Wno-write-strings \
                    -march=native

  CFLAGS          = -O \
                    -D_LINUX \
                    -D_UNIX \
                    -D_NOGRAPHICS $(PROGRAMMING_FLAG) -D_TCL84
                    -march=native $(MORE_CFLAGS)

  FFLAGS          = -O $(MORE_FFLAGS)
  LINKFLAGS       = -O $(MORE_LINKFLAGS)

else
  C++FLAGS        = -Wall \
                    -Winline \
                    -g \
                    -pg \
                    -D_G3DEBUG \
                    -D_LINUX \
                    -D_UNIX \
                     $(PROGRAMMING_FLAG) \
                    -DBrzi_nDarray_val \
                    -D_TEACHING_MODE \
                    -std=c++0x \
                    -Wno-write-strings

  CFLAGS          = -g -pg \
                    -D_G3DEBUG \
                    -D_LINUX \
                    -D_UNIX -D_NOGRAPHICS $(PROGRAMMING_FLAG) -D_TCL84 \
                    $(MORE_CFLAGS)
  FFLAGS          = -march=native -ffast-math -funroll-loops -O3 $(MORE_FFLAGS)
  LINKFLAGS       = -g -pg -v $(MORE_LINKFLAGS)
endif





AR     = ar 
ARFLAGS   = cqls


MAKE            = make
CD              = cd
ECHO            = echo
RM              = rm
RMFLAGS         = -fr
SHELL           = /bin/sh





.SUFFIXES:
.SUFFIXES:	.C .c .f .f90 .cpp .o .cpp

#
# %------------------%
# | Default command. |
# %------------------%
#
.DEFAULT:
	@$(ECHO) "Unknown target $@, try:  make help"
#
# %-----------------------------------------------%
# |  Command to build .o files from source files. |
# %-----------------------------------------------%
#


%.o : %.cpp 
#	@$(ECHO) Making $@ from $< $@ with $(CC++) $(C++FLAGS) $(INCLUDES) -c $<
	$(CC++) $(C++FLAGS) $(INCLUDES) $(MACHINE_INCLUDES) -c $<


%.o : %.C 
#	@$(ECHO) Making $@ from $<
	$(CC++) $(C++FLAGS) $(INCLUDES) $(MACHINE_INCLUDES) -c $<

%.o : %.c 
#	@$(ECHO) Making $@ from $<
	$(CC) $(CFLAGS) $(MACHINE_INCLUDES) -c  $< 

%.o : %.f 
#	@$(ECHO) Making $@ from $<
	$(FC) $(FFLAGS) -c  $< 

%.o : %.f77 
#	@$(ECHO) Making $@ from $<
	$(FC) $(FFLAGS) -c $< 

%.o : %.f90 
#	@$(ECHO) Making $@ from $<
	$(FC90) $(FFLAGS) -c $<



